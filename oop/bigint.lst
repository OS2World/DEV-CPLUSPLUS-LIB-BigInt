
Module: D:\source\bint\oop\bigint.cpp
Group: 'DGROUP' CONST,CONST2,_DATA,_BSS

Segment: _TEXT  PARA USE32  00003068 bytes  

Comdat: near BigInt::BigInt()  SEGMENT ANY '_TEXT'  00000001 bytes  

#ifdef __BORLANDC__
/* to avoid problems with signed/unsigned char functions in the runtime
 * library we have to switch to 'default char = signed char'
 */
#pragma option -K-
#endif

#include "bigint.hpp"
#include <mem.h>
#include <limits.h>
#include <ctype.h>


template<class A,class B> inline A max(A a,B b) {return a>b?a:b; }
template<class A,class B> inline A min(A a,B b) {return a<b?a:b; }

 0000  c3                                ret     


No disassembly errors

------------------------------------------------------------
 0000                    int near BigInt::IsNegative() const:
 0000  8b 40 04                          mov     eax,+4H[eax]
 0003  c1 e8 1f                          shr     eax,1fH
 0006  83 f8 01                          cmp     eax,00000001H
 0009  0f 94 c0                          sete    al
 000c  25 ff 00 00 00                    and     eax,000000ffH

int BigInt::IsNegative() const {
        return (bits[bigint_unitprecis-1]>>(bigint_unitbits-1))==1;
}

 0011  c3                                ret     
 0012  8b c0                             mov     eax,eax

int BigInt::IsZero() const {
        const UnitType *p=bits;
        for(int x=0; x<bigint_unitprecis; x++,p++)
                if(*p!=0) return 0;
 0014                    int near BigInt::IsZero() const:
 0014  52                                push    edx
 0015  89 c2                             mov     edx,eax
 0017  31 c0                             xor     eax,eax
 0019  83 3a 00          L1              cmp     dword ptr [edx],00000000H
 001c  74 04                             je      L2
 001e  31 c0                             xor     eax,eax
 0020  5a                                pop     edx
 0021  c3                                ret     
 0022  40                L2              inc     eax
 0023  83 c2 04                          add     edx,00000004H
 0026  83 f8 02                          cmp     eax,00000002H
 0029  72 ee                             jb      L1

        return 1;
 002b  b8 01 00 00 00                    mov     eax,00000001H

}

 0030  5a                                pop     edx
 0031  c3                                ret     
 0032  8b c0                             mov     eax,eax

int BigInt::IsOdd() const {
        return int(bits[0]&1);
}

 0034                    int near BigInt::IsOdd() const:
 0034  8b 00                             mov     eax,[eax]
 0036  83 e0 01                          and     eax,00000001H
 0039  c3                                ret     
 003a  8b c0                             mov     eax,eax

void BigInt::incr() {
        UnitType *p=bits;
        for(int x=0; x<bigint_unitprecis; x++,p++) {
                if(*p==bigint_unitmax)
                        *p=0;
                else {
                        ++*p;
                        break;
                }
 003c                    void near BigInt::incr():
 003c  53                                push    ebx
 003d  51                                push    ecx
 003e  52                                push    edx
 003f  31 d2                             xor     edx,edx
 0041  8b 18             L3              mov     ebx,[eax]
 0043  83 fb ff                          cmp     ebx,0ffffffffH
 0046  74 09                             je      L4
 0048  8d 4b 01                          lea     ecx,+1H[ebx]
 004b  89 08                             mov     [eax],ecx
 004d  5a                                pop     edx
 004e  59                                pop     ecx
 004f  5b                                pop     ebx
 0050  c3                                ret     

        }
}

 0051  42                L4              inc     edx
 0052  c7 00 00 00 00 00                 mov     dword ptr [eax],00000000H
 0058  83 c0 04                          add     eax,00000004H
 005b  83 fa 02                          cmp     edx,00000002H
 005e  72 e1                             jb      L3
 0060  5a                                pop     edx
 0061  59                                pop     ecx
 0062  5b                                pop     ebx
 0063  c3                                ret     

void BigInt::decr() {
        UnitType *p=bits;
        for(int x=0; x<bigint_unitprecis; x++,p++) {
                if(*p==0)
                        *p=bigint_unitmax;
                else {
                        --*p;
                        break;
                }
 0064                    void near BigInt::decr():
 0064  53                                push    ebx
 0065  51                                push    ecx
 0066  52                                push    edx
 0067  31 d2                             xor     edx,edx
 0069  8b 18             L5              mov     ebx,[eax]
 006b  85 db                             test    ebx,ebx
 006d  74 09                             je      L6
 006f  8d 4b ff                          lea     ecx,-1H[ebx]
 0072  89 08                             mov     [eax],ecx
 0074  5a                                pop     edx
 0075  59                                pop     ecx
 0076  5b                                pop     ebx
 0077  c3                                ret     

        }
}


 0078  42                L6              inc     edx
 0079  c7 00 ff ff ff ff                 mov     dword ptr [eax],0ffffffffH
 007f  83 c0 04                          add     eax,00000004H
 0082  83 fa 02                          cmp     edx,00000002H
 0085  72 e2                             jb      L5
 0087  5a                                pop     edx
 0088  59                                pop     ecx
 0089  5b                                pop     ebx
 008a  c3                                ret     
 008b  90                                nop     

BigInt::BigInt(unsigned char x) {
 008c                    near BigInt::BigInt( char unsigned ):
 008c  53                                push    ebx
 008d  51                                push    ecx
 008e  83 ec 04                          sub     esp,00000004H
 0091  89 c1                             mov     ecx,eax
 0093  88 14 24                          mov     [esp],dl

        memset(bits,0,bigint_bytes);
 0096  bb 08 00 00 00                    mov     ebx,00000008H
 009b  31 d2                             xor     edx,edx
 009d  e8 00 00 00 00                    call    memset_

        bits[0]=UnitType(x);
 00a2  31 c0                             xor     eax,eax
 00a4  8a 04 24                          mov     al,[esp]
 00a7  89 01                             mov     [ecx],eax

}

 00a9  89 c8                             mov     eax,ecx
 00ab  83 c4 04                          add     esp,00000004H
 00ae  59                                pop     ecx
 00af  5b                                pop     ebx
 00b0  c3                                ret     
 00b1  8d 40 00                          lea     eax,+0H[eax]

BigInt::BigInt(signed char x) {
 00b4                    near BigInt::BigInt( char signed ):
 00b4  53                                push    ebx
 00b5  51                                push    ecx
 00b6  83 ec 04                          sub     esp,00000004H
 00b9  89 c1                             mov     ecx,eax
 00bb  88 14 24                          mov     [esp],dl

        if(x<=0)
 00be  8b 44 24 fd                       mov     eax,-3H[esp]
 00c2  c1 f8 18                          sar     eax,18H
 00c5  85 c0                             test    eax,eax
 00c7  7f 0e                             jg      L7

                memset(bits,-1,bigint_bytes);
        else
 00c9  bb 08 00 00 00                    mov     ebx,00000008H
 00ce  ba ff ff ff ff                    mov     edx,0ffffffffH
 00d3  89 c8                             mov     eax,ecx
 00d5  eb 09                             jmp     L8

                memset(bits,0,bigint_bytes);
 00d7  bb 08 00 00 00    L7              mov     ebx,00000008H
 00dc  89 c8                             mov     eax,ecx
 00de  31 d2                             xor     edx,edx
 00e0  e8 00 00 00 00    L8              call    memset_

        bits[0]=UnitType(x);
 00e5  8b 44 24 fd                       mov     eax,-3H[esp]
 00e9  c1 f8 18                          sar     eax,18H
 00ec  89 01                             mov     [ecx],eax

}

 00ee  89 c8                             mov     eax,ecx
 00f0  83 c4 04                          add     esp,00000004H
 00f3  59                                pop     ecx
 00f4  5b                                pop     ebx
 00f5  c3                                ret     
 00f6  8b c0                             mov     eax,eax

BigInt::BigInt(unsigned short x) {
 00f8                    near BigInt::BigInt( short unsigned ):
 00f8  53                                push    ebx
 00f9  51                                push    ecx
 00fa  56                                push    esi
 00fb  89 c1                             mov     ecx,eax
 00fd  89 d6                             mov     esi,edx

        memset(bits,0,bigint_bytes);
 00ff  bb 08 00 00 00                    mov     ebx,00000008H
 0104  31 d2                             xor     edx,edx
 0106  e8 00 00 00 00                    call    memset_

        UnitType *p=bits;
 010b  66 85 f6                          test    si,si
 010e  74 1d                             je      L9

        while(x && (p-bits)<bigint_unitprecis) {
 0110  89 ca                             mov     edx,ecx
 0112  29 ca                             sub     edx,ecx
 0114  89 d0                             mov     eax,edx
 0116  c1 fa 1f                          sar     edx,1fH
 0119  c1 e2 02                          shl     edx,02H
 011c  1b c2                             sbb     eax,edx
 011e  c1 f8 02                          sar     eax,02H
 0121  83 f8 02                          cmp     eax,00000002H
 0124  73 07                             jae     L9

                UnitType c=x&bigint_unitmax;
 0126  31 c0                             xor     eax,eax
 0128  66 89 f0                          mov     ax,si

                *p++=c;
                x>>=bigint_unitbits;
        }
 012b  89 01                             mov     [ecx],eax

}

 012d  89 c8             L9              mov     eax,ecx
 012f  5e                                pop     esi
 0130  59                                pop     ecx
 0131  5b                                pop     ebx
 0132  c3                                ret     
 0133  90                                nop     

BigInt::BigInt(signed short x) {
 0134                    near BigInt::BigInt( short ):
 0134  53                                push    ebx
 0135  51                                push    ecx
 0136  56                                push    esi
 0137  89 c1                             mov     ecx,eax
 0139  89 d6                             mov     esi,edx

        if(x<0)
 013b  0f bf c2                          movsx   eax,dx
 013e  85 c0                             test    eax,eax
 0140  7d 0e                             jge     L10

                memset(bits,-1,bigint_bytes);
        else
 0142  bb 08 00 00 00                    mov     ebx,00000008H
 0147  ba ff ff ff ff                    mov     edx,0ffffffffH
 014c  89 c8                             mov     eax,ecx
 014e  eb 09                             jmp     L11

                memset(bits,0,bigint_bytes);
        UnitType *p=bits;
 0150  bb 08 00 00 00    L10             mov     ebx,00000008H
 0155  89 c8                             mov     eax,ecx
 0157  31 d2                             xor     edx,edx
 0159  e8 00 00 00 00    L11             call    memset_

        unsigned short xt=(unsigned short)(x);
        while(xt) {
 015e  66 85 f6                          test    si,si
 0161  74 07                             je      L12

                UnitType c=xt&bigint_unitmax;
 0163  31 c0                             xor     eax,eax
 0165  66 89 f0                          mov     ax,si

                *p++=c;
#if defined(__BORLANDC__)
        /* Borland C++ DOES generate partly correct code, but it seems that
         * the 80386+ processor ignores the instruction:
         *      shl dx,20h or: shl edx,20h   (Note: 20h == 32 !)
         * strangly the instruction:
         *      shl dx,10h
         * behaves correctly even though it too gives total loss of precision
         * So we have to make a hack to ensure that if we are using 32-bit
         * units (longs) that the shift is done in two tempi. This has been
         * additionally hacked: BC++ does not provide a built-in type widers
         * that 32 bit (long), so we can just as well terminate the loop!
         * The problem only arises when UnitType::= unsigned long and
         * generating 80186+ code. Multi-bit shifts were first implemented on
         * the 80186 processor, so on 8086 a 32-bit shift is done by 32 1-bit
         * shifts and no the problem should not occur.
         */
#if bigint_unitbits==32
                        break;
#else
                        xt>>=bigint_unitbits;
#endif
#elif defined(__WATCOMC__)
                xt>>=bigint_unitbits;
#else
#error Check that your compiler does this correctly!
                //original code:
                xt>>=bigint_unitbits;
#endif
        }
 0168  89 01                             mov     [ecx],eax

}


 016a  89 c8             L12             mov     eax,ecx
 016c  5e                                pop     esi
 016d  59                                pop     ecx
 016e  5b                                pop     ebx
 016f  c3                                ret     

BigInt::BigInt(unsigned int x) {
 0170                    near BigInt::BigInt( int unsigned ):
 0170  53                                push    ebx
 0171  51                                push    ecx
 0172  56                                push    esi
 0173  89 c1                             mov     ecx,eax
 0175  89 d6                             mov     esi,edx

        memset(bits,0,bigint_bytes);
 0177  bb 08 00 00 00                    mov     ebx,00000008H
 017c  31 d2                             xor     edx,edx
 017e  e8 00 00 00 00                    call    memset_

        UnitType *p=bits;
        while(x) {
                UnitType c=x&bigint_unitmax;
 0183  85 f6                             test    esi,esi
 0185  74 02                             je      L13

                *p++=c;
                x>>=bigint_unitbits;
        }
 0187  89 31                             mov     [ecx],esi

}

 0189  89 c8             L13             mov     eax,ecx
 018b  5e                                pop     esi
 018c  59                                pop     ecx
 018d  5b                                pop     ebx
 018e  c3                                ret     
 018f  90                                nop     

BigInt::BigInt(signed int x) {
 0190                    near BigInt::BigInt( int ):
 0190  53                                push    ebx
 0191  51                                push    ecx
 0192  56                                push    esi
 0193  89 c1                             mov     ecx,eax
 0195  89 d6                             mov     esi,edx

        if(x<0)
 0197  85 d2                             test    edx,edx
 0199  7d 0c                             jge     L14

                memset(bits,-1,bigint_bytes);
        else
 019b  bb 08 00 00 00                    mov     ebx,00000008H
 01a0  ba ff ff ff ff                    mov     edx,0ffffffffH
 01a5  eb 07                             jmp     L15

                memset(bits,0,bigint_bytes);
        UnitType *p=bits;
 01a7  bb 08 00 00 00    L14             mov     ebx,00000008H
 01ac  31 d2                             xor     edx,edx
 01ae  e8 00 00 00 00    L15             call    memset_

        unsigned int xt=(unsigned int)(x);
        while(xt) {
                UnitType c=UnitType(xt)&UnitType(bigint_unitmax);
 01b3  85 f6                             test    esi,esi
 01b5  74 02                             je      L16

                *p++=c;
#ifdef __BORLANDC__
                // see description in BigInt(signed short)
#if bigint_unitbits==32
                        break;
#else
                        xt>>=bigint_unitbits;
#endif
#elif defined(__WATCOMC__)
                xt>>=bigint_unitbits;
#else
#error Check that your compiler does this correctly!
                xt>>=bigint_unitbits;
#endif
        }
 01b7  89 31                             mov     [ecx],esi

}

 01b9  89 c8             L16             mov     eax,ecx
 01bb  5e                                pop     esi
 01bc  59                                pop     ecx
 01bd  5b                                pop     ebx
 01be  c3                                ret     
 01bf  90                                nop     

BigInt::BigInt(unsigned long x) {
 01c0                    near BigInt::BigInt( long unsigned ):
 01c0  53                                push    ebx
 01c1  51                                push    ecx
 01c2  56                                push    esi
 01c3  89 c1                             mov     ecx,eax
 01c5  89 d6                             mov     esi,edx

        memset(bits,0,bigint_bytes);
 01c7  bb 08 00 00 00                    mov     ebx,00000008H
 01cc  31 d2                             xor     edx,edx
 01ce  e8 00 00 00 00                    call    memset_

        UnitType *p=bits;
        while(x) {
                UnitType c=UnitType(x)&UnitType(bigint_unitmax);
 01d3  85 f6                             test    esi,esi
 01d5  74 02                             je      L17

                *p++=c;
                x>>=bigint_unitbits;
        }
 01d7  89 31                             mov     [ecx],esi

}

 01d9  89 c8             L17             mov     eax,ecx
 01db  5e                                pop     esi
 01dc  59                                pop     ecx
 01dd  5b                                pop     ebx
 01de  c3                                ret     
 01df  90                                nop     

BigInt::BigInt(signed long x) {
 01e0                    near BigInt::BigInt( long ):
 01e0  53                                push    ebx
 01e1  51                                push    ecx
 01e2  56                                push    esi
 01e3  89 c1                             mov     ecx,eax
 01e5  89 d6                             mov     esi,edx

        if(x<0)
 01e7  85 d2                             test    edx,edx
 01e9  7d 0c                             jge     L18

                memset(bits,-1,bigint_bytes);
        else
 01eb  bb 08 00 00 00                    mov     ebx,00000008H
 01f0  ba ff ff ff ff                    mov     edx,0ffffffffH
 01f5  eb 07                             jmp     L19

                memset(bits,0,bigint_bytes);
        UnitType *p=bits;
 01f7  bb 08 00 00 00    L18             mov     ebx,00000008H
 01fc  31 d2                             xor     edx,edx
 01fe  e8 00 00 00 00    L19             call    memset_

        unsigned long xt=(unsigned long)(x);
        while(xt) {
                UnitType c=UnitType(xt)&UnitType(bigint_unitmax);
 0203  85 f6                             test    esi,esi
 0205  74 02                             je      L20

                *p++=c;
#ifdef __BORLANDC__
                // see description in BigInt(signed short)
#if bigint_unitbits==32
                        break;
#else
                        xt>>=bigint_unitbits;
#endif
#elif defined(__WATCOMC__)
                xt>>=bigint_unitbits;
#else
#error Check that your compiler does this correctly!
                xt>>=bigint_unitbits;
#endif
        }
 0207  89 31                             mov     [ecx],esi

}

 0209  89 c8             L20             mov     eax,ecx
 020b  5e                                pop     esi
 020c  59                                pop     ecx
 020d  5b                                pop     ebx
 020e  c3                                ret     
 020f  90                                nop     

void BigInt::Zeroize() {
 0210                    void near BigInt::Zeroize():
 0210  53                                push    ebx
 0211  52                                push    edx

        memset(bits,0,bigint_bytes);
 0212  bb 08 00 00 00                    mov     ebx,00000008H
 0217  31 d2                             xor     edx,edx
 0219  e8 00 00 00 00                    call    memset_

}

 021e  5a                                pop     edx
 021f  5b                                pop     ebx
 0220  c3                                ret     
 0221  8d 40 00                          lea     eax,+0H[eax]

void BigInt::Oneize() {
 0224                    void near BigInt::Oneize():
 0224  53                                push    ebx
 0225  51                                push    ecx
 0226  52                                push    edx
 0227  89 c1                             mov     ecx,eax

        memset(bits,0,bigint_bytes);
 0229  bb 08 00 00 00                    mov     ebx,00000008H
 022e  31 d2                             xor     edx,edx
 0230  e8 00 00 00 00                    call    memset_

        bits[0]=1;
 0235  c7 01 01 00 00 00                 mov     dword ptr [ecx],00000001H

}

 023b  5a                                pop     edx
 023c  59                                pop     ecx
 023d  5b                                pop     ebx
 023e  c3                                ret     
 023f  90                                nop     

void BigInt::OnesComplement() {
        UnitType *p=bits;
 0240                    void near BigInt::OnesComplement():
 0240  53                                push    ebx
 0241  52                                push    edx

        for(int x=0; x<bigint_unitprecis; x++,p++)
 0242  31 d2                             xor     edx,edx

                *p^=bigint_unitmax;
 0244  8b 18             L21             mov     ebx,[eax]
 0246  83 c0 04                          add     eax,00000004H
 0249  f7 d3                             not     ebx
 024b  42                                inc     edx
 024c  89 58 fc                          mov     -4H[eax],ebx
 024f  83 fa 02                          cmp     edx,00000002H
 0252  72 f0                             jb      L21

}

 0254  5a                                pop     edx
 0255  5b                                pop     ebx
 0256  c3                                ret     
 0257  90                                nop     

void BigInt::TwosComplement() {
 0258                    void near BigInt::TwosComplement():
 0258  53                                push    ebx
 0259  51                                push    ecx
 025a  52                                push    edx
 025b  56                                push    esi
 025c  57                                push    edi
 025d  89 c3                             mov     ebx,eax

        OnesComplement();
 025f  31 d2                             xor     edx,edx
 0261  8b 08             L22             mov     ecx,[eax]
 0263  83 c0 04                          add     eax,00000004H
 0266  f7 d1                             not     ecx
 0268  42                                inc     edx
 0269  89 48 fc                          mov     -4H[eax],ecx
 026c  83 fa 02                          cmp     edx,00000002H
 026f  73 13                             jae     L24
 0271  eb ee                             jmp     L22

        incr();
 0273  42                L23             inc     edx
 0274  c7 00 00 00 00 00                 mov     dword ptr [eax],00000000H
 027a  83 c0 04                          add     eax,00000004H
 027d  83 fa 02                          cmp     edx,00000002H
 0280  72 06                             jb      L25
 0282  eb 10                             jmp     L26
 0284  89 d8             L24             mov     eax,ebx
 0286  31 d2                             xor     edx,edx
 0288  8b 30             L25             mov     esi,[eax]
 028a  83 fe ff                          cmp     esi,0ffffffffH
 028d  74 e4                             je      L23
 028f  8d 7e 01                          lea     edi,+1H[esi]
 0292  89 38                             mov     [eax],edi

}

 0294  5f                L26             pop     edi
 0295  5e                                pop     esi
 0296  5a                                pop     edx
 0297  59                                pop     ecx
 0298  5b                                pop     ebx
 0299  c3                                ret     
 029a  8b c0                             mov     eax,eax

BigInt::operator int() {
 029c                    near BigInt::operator int ():
 029c  51                                push    ecx
 029d  52                                push    edx
 029e  56                                push    esi
 029f  57                                push    edi
 02a0  83 ec 04                          sub     esp,00000004H
 02a3  b9 04 00 00 00                    mov     ecx,00000004H
 02a8  89 e7                             mov     edi,esp

        int result=0;
        memcpy(&result,bits,min(sizeof(result),bigint_bytes));
        return result;
 02aa  31 d2                             xor     edx,edx
 02ac  89 c6                             mov     esi,eax
 02ae  89 14 24                          mov     [esp],edx
 02b1  57                                push    edi
 02b2  89 c8                             mov     eax,ecx
 02b4  c1 e9 02                          shr     ecx,02H
 02b7  f2 a5                             repne   movsd    
 02b9  8a c8                             mov     cl,al
 02bb  80 e1 03                          and     cl,03H
 02be  f2 a4                             repne   movsb    
 02c0  5f                                pop     edi

}

 02c1  8b 04 24                          mov     eax,[esp]
 02c4  83 c4 04                          add     esp,00000004H
 02c7  5f                                pop     edi
 02c8  5e                                pop     esi
 02c9  5a                                pop     edx
 02ca  59                                pop     ecx
 02cb  c3                                ret     

BigInt::operator long() {
 02cc                    near BigInt::operator long ():
 02cc  51                                push    ecx
 02cd  52                                push    edx
 02ce  56                                push    esi
 02cf  57                                push    edi
 02d0  83 ec 04                          sub     esp,00000004H
 02d3  b9 04 00 00 00                    mov     ecx,00000004H
 02d8  89 e7                             mov     edi,esp

        long result=0;
        memcpy(&result,bits,min(sizeof(result),bigint_bytes));
        return result;
 02da  31 d2                             xor     edx,edx
 02dc  89 c6                             mov     esi,eax
 02de  89 14 24                          mov     [esp],edx
 02e1  57                                push    edi
 02e2  89 c8                             mov     eax,ecx
 02e4  c1 e9 02                          shr     ecx,02H
 02e7  f2 a5                             repne   movsd    
 02e9  8a c8                             mov     cl,al
 02eb  80 e1 03                          and     cl,03H
 02ee  f2 a4                             repne   movsb    
 02f0  5f                                pop     edi

}




 02f1  8b 04 24                          mov     eax,[esp]
 02f4  83 c4 04                          add     esp,00000004H
 02f7  5f                                pop     edi
 02f8  5e                                pop     esi
 02f9  5a                                pop     edx
 02fa  59                                pop     ecx
 02fb  c3                                ret     

BigInt abs(const BigInt &x) {
 02fc                    BigInt near abs( BigInt const near & ):
 02fc  53                                push    ebx
 02fd  51                                push    ecx
 02fe  56                                push    esi
 02ff  57                                push    edi
 0300  83 ec 0c                          sub     esp,0000000cH
 0303  89 44 24 08                       mov     +8H[esp],eax

        BigInt result=x;
 0307  89 e7                             mov     edi,esp
 0309  89 d6                             mov     esi,edx
 030b  a5                                movsd   
 030c  a5                                movsd   

        if(result.IsNegative())
 030d  8b 44 24 04                       mov     eax,+4H[esp]
 0311  c1 e8 1f                          shr     eax,1fH
 0314  83 f8 01                          cmp     eax,00000001H
 0317  0f 94 c0                          sete    al
 031a  25 ff 00 00 00                    and     eax,000000ffH
 031f  74 37                             je      L31

                result.TwosComplement();
 0321  89 e0                             mov     eax,esp
 0323  31 d2                             xor     edx,edx
 0325  8b 18             L27             mov     ebx,[eax]
 0327  83 c0 04                          add     eax,00000004H
 032a  f7 d3                             not     ebx
 032c  42                                inc     edx
 032d  89 58 fc                          mov     -4H[eax],ebx
 0330  83 fa 02                          cmp     edx,00000002H
 0333  73 13                             jae     L29
 0335  eb ee                             jmp     L27
 0337  42                L28             inc     edx
 0338  c7 00 00 00 00 00                 mov     dword ptr [eax],00000000H
 033e  83 c0 04                          add     eax,00000004H
 0341  83 fa 02                          cmp     edx,00000002H
 0344  72 06                             jb      L30
 0346  eb 10                             jmp     L31
 0348  89 e0             L29             mov     eax,esp
 034a  31 d2                             xor     edx,edx
 034c  8b 08             L30             mov     ecx,[eax]
 034e  83 f9 ff                          cmp     ecx,0ffffffffH
 0351  74 e4                             je      L28
 0353  8d 71 01                          lea     esi,+1H[ecx]
 0356  89 30                             mov     [eax],esi

        return result;
 0358  8b 7c 24 08       L31             mov     edi,+8H[esp]
 035c  89 e6                             mov     esi,esp
 035e  a5                                movsd   
 035f  a5                                movsd   

}

 0360  8b 44 24 08                       mov     eax,+8H[esp]
 0364  83 c4 0c                          add     esp,0000000cH
 0367  5f                                pop     edi
 0368  5e                                pop     esi
 0369  59                                pop     ecx
 036a  5b                                pop     ebx
 036b  c3                                ret     

BigInt operator+(const BigInt &a, const BigInt &b) {
 036c                    BigInt near operator +( BigInt const near &, BigInt const near & ):
 036c  51                                push    ecx
 036d  56                                push    esi
 036e  57                                push    edi
 036f  55                                push    ebp
 0370  83 ec 0c                          sub     esp,0000000cH
 0373  89 44 24 08                       mov     +8H[esp],eax
 0377  89 d8                             mov     eax,ebx

        BigInt result=a;
 0379  89 e7                             mov     edi,esp
 037b  89 d6                             mov     esi,edx
 037d  31 db                             xor     ebx,ebx
 037f  a5                                movsd   
 0380  a5                                movsd   

        return result+=b;
 0381  89 e2                             mov     edx,esp
 0383  31 f6                             xor     esi,esi
 0385  eb 1c                             jmp     L35
 0387  39 cf             L32             cmp     edi,ecx
 0389  73 07                             jae     L33
 038b  bb 01 00 00 00                    mov     ebx,00000001H
 0390  eb 02                             jmp     L34
 0392  31 db             L33             xor     ebx,ebx
 0394  83 c2 04          L34             add     edx,00000004H
 0397  46                                inc     esi
 0398  83 c0 04                          add     eax,00000004H
 039b  89 7a fc                          mov     -4H[edx],edi
 039e  83 fe 02                          cmp     esi,00000002H
 03a1  73 14                             jae     L36
 03a3  8b 08             L35             mov     ecx,[eax]
 03a5  03 0a                             add     ecx,[edx]
 03a7  8b 28                             mov     ebp,[eax]
 03a9  8d 3c 19                          lea     edi,[ecx+ebx]
 03ac  39 e9                             cmp     ecx,ebp
 03ae  73 d7                             jae     L32
 03b0  bb 01 00 00 00                    mov     ebx,00000001H
 03b5  eb dd                             jmp     L34
 03b7  8b 7c 24 08       L36             mov     edi,+8H[esp]
 03bb  89 e6                             mov     esi,esp
 03bd  a5                                movsd   
 03be  a5                                movsd   

}

 03bf  8b 44 24 08                       mov     eax,+8H[esp]
 03c3  83 c4 0c                          add     esp,0000000cH
 03c6  5d                                pop     ebp
 03c7  5f                                pop     edi
 03c8  5e                                pop     esi
 03c9  59                                pop     ecx
 03ca  c3                                ret     
 03cb  90                                nop     

BigInt operator-(const BigInt &a, const BigInt &b) {
 03cc                    BigInt near operator -( BigInt const near &, BigInt const near & ):
 03cc  51                                push    ecx
 03cd  56                                push    esi
 03ce  57                                push    edi
 03cf  55                                push    ebp
 03d0  83 ec 0c                          sub     esp,0000000cH
 03d3  89 44 24 08                       mov     +8H[esp],eax

        BigInt result=a;
 03d7  89 e7                             mov     edi,esp
 03d9  89 d6                             mov     esi,edx
 03db  89 e0                             mov     eax,esp

        result-=b;
        return result;
}


/* The following two function can on some cpu's be optimized heavily by using
 * some sort of BitBlitting/bit moving assembler instruction
 */
 03dd  89 d9                             mov     ecx,ebx
 03df  a5                                movsd   
 03e0  a5                                movsd   
 03e1  31 d2                             xor     edx,edx
 03e3  31 f6                             xor     esi,esi
 03e5  eb 1c                             jmp     L40
 03e7  39 df             L37             cmp     edi,ebx
 03e9  76 07                             jbe     L38
 03eb  ba 01 00 00 00                    mov     edx,00000001H
 03f0  eb 02                             jmp     L39
 03f2  31 d2             L38             xor     edx,edx
 03f4  83 c0 04          L39             add     eax,00000004H
 03f7  46                                inc     esi
 03f8  83 c1 04                          add     ecx,00000004H
 03fb  89 78 fc                          mov     -4H[eax],edi
 03fe  83 fe 02                          cmp     esi,00000002H
 0401  73 b4                             jae     L36
 0403  8b 18             L40             mov     ebx,[eax]
 0405  8b 39                             mov     edi,[ecx]
 0407  29 fb                             sub     ebx,edi
 0409  89 df                             mov     edi,ebx
 040b  8b 28                             mov     ebp,[eax]
 040d  29 d7                             sub     edi,edx
 040f  39 eb                             cmp     ebx,ebp
 0411  76 d4                             jbe     L37
 0413  ba 01 00 00 00                    mov     edx,00000001H
 0418  eb da                             jmp     L39
 041a  8b c0                             mov     eax,eax

BigInt operator<<(const BigInt &a, unsigned int b) {
        BigInt result;
 041c                    BigInt near operator <<( BigInt const near &, int unsigned ):
 041c  51                                push    ecx
 041d  56                                push    esi
 041e  57                                push    edi
 041f  55                                push    ebp
 0420  83 ec 14                          sub     esp,00000014H
 0423  89 44 24 08                       mov     +8H[esp],eax
 0427  89 d6                             mov     esi,edx

        if(b>=bigint_bitprecis)
                //total loss of precision
 0429  83 fb 40                          cmp     ebx,00000040H
 042c  72 13                             jb      L41

                result.Zeroize();
 042e  bb 08 00 00 00                    mov     ebx,00000008H
 0433  89 e0                             mov     eax,esp
 0435  31 d2                             xor     edx,edx
 0437  e8 00 00 00 00                    call    memset_
 043c  e9 b3 00 00 00                    jmp     L47

        else if(b==0)
                //no shift at all
 0441  85 db             L41             test    ebx,ebx
 0443  75 18                             jne     L42

                result=a;
 0445  89 e7                             mov     edi,esp
 0447  a5                                movsd   
 0448  a5                                movsd   
 0449  8b 7c 24 08                       mov     edi,+8H[esp]
 044d  89 e6                             mov     esi,esp
 044f  a5                                movsd   
 0450  a5                                movsd   
 0451  8b 44 24 08                       mov     eax,+8H[esp]
 0455  83 c4 14                          add     esp,00000014H
 0458  5d                                pop     ebp
 0459  5f                                pop     edi
 045a  5e                                pop     esi
 045b  59                                pop     ecx
 045c  c3                                ret     

 045d  f6 c3 07          L42             test    bl,07H

Comdat: BigInt near & near BigInt::operator =( BigInt const near & )  SEGMENT ANY '_TEXT'  0000000b bytes  

        else if(b%CHAR_BIT==0) {
                //byte move - fast!
 0000  56                                push    esi
 0001  57                                push    edi
 0002  89 c7                             mov     edi,eax
 0004  89 d6                             mov     esi,edx
 0006  a5                                movsd   
 0007  a5                                movsd   
 0008  5f                                pop     edi
 0009  5e                                pop     esi
 000a  c3                                ret     

No disassembly errors

------------------------------------------------------------
 0460  75 3c                             jne     L43
 0462  89 e0                             mov     eax,esp

                unsigned byteshift=b%CHAR_BIT;
 0464  89 d9                             mov     ecx,ebx
 0466  31 d2                             xor     edx,edx

                result.Zeroize();
 0468  bb 08 00 00 00                    mov     ebx,00000008H
 046d  83 e1 07                          and     ecx,00000007H
 0470  e8 00 00 00 00                    call    memset_

                memmove(result.bits+byteshift,a.bits,bigint_bytes-byteshift);
        } else {
                //hard one:
                const BigInt::UnitType        *from=a.bits;
 0475  bb 08 00 00 00                    mov     ebx,00000008H
 047a  89 e0                             mov     eax,esp
 047c  29 cb                             sub     ebx,ecx
 047e  c1 e1 02                          shl     ecx,02H
 0481  89 f2                             mov     edx,esi
 0483  01 c8                             add     eax,ecx
 0485  e8 00 00 00 00                    call    memmove_
 048a  8b 7c 24 08                       mov     edi,+8H[esp]
 048e  89 e6                             mov     esi,esp
 0490  a5                                movsd   
 0491  a5                                movsd   
 0492  8b 44 24 08                       mov     eax,+8H[esp]
 0496  83 c4 14                          add     esp,00000014H
 0499  5d                                pop     ebp
 049a  5f                                pop     edi
 049b  5e                                pop     esi
 049c  59                                pop     ecx
 049d  c3                                ret     

                BigInt::UnitType        *to=result.bits;
 049e  89 e0             L43             mov     eax,esp

                unsigned toi=0;
                //do whole units first
                while(b>=bigint_unitbits) {
 04a0  31 d2                             xor     edx,edx
 04a2  83 fb 20                          cmp     ebx,00000020H
 04a5  72 12                             jb      L45

                        b-=bigint_unitbits;
                        *to++=0;
 04a7  83 eb 20          L44             sub     ebx,00000020H

 04aa  42                                inc     edx

                        toi++;
 04ab  c7 00 00 00 00 00                 mov     dword ptr [eax],00000000H
 04b1  83 c0 04                          add     eax,00000004H

                }

 04b4  83 fb 20                          cmp     ebx,00000020H
 04b7  73 ee                             jae     L44

                BigInt::UnitType carrybits=0;
 04b9  31 ff             L45             xor     edi,edi
 04bb  83 fa 02                          cmp     edx,00000002H
 04be  73 34                             jae     L47

                while(toi<bigint_unitprecis) {
                        BigInt::UnitType newcarrybits=(*from)>>(bigint_unitbits-b);
 04c0  b9 20 00 00 00                    mov     ecx,00000020H
 04c5  29 d9                             sub     ecx,ebx
 04c7  89 4c 24 10                       mov     +10H[esp],ecx
 04cb  8a 4c 24 10       L46             mov     cl,+10H[esp]
 04cf  8b 2e                             mov     ebp,[esi]
 04d1  d3 ed                             shr     ebp,cl
 04d3  89 6c 24 0c                       mov     +0cH[esp],ebp

                        *to=(*from<<b)|carrybits;
 04d7  88 d9                             mov     cl,bl
 04d9  8b 2e                             mov     ebp,[esi]

                        to++;
 04db  83 c0 04                          add     eax,00000004H
 04de  d3 e5                             shl     ebp,cl

                        from++;
 04e0  83 c6 04                          add     esi,00000004H
 04e3  89 e9                             mov     ecx,ebp

                        toi++;
 04e5  42                                inc     edx
 04e6  09 f9                             or      ecx,edi

                        carrybits=newcarrybits;
 04e8  8b 7c 24 0c                       mov     edi,+0cH[esp]
 04ec  89 48 fc                          mov     -4H[eax],ecx

                }
        }
 04ef  83 fa 02                          cmp     edx,00000002H
 04f2  72 d7                             jb      L46

        return result;
 04f4  8b 7c 24 08       L47             mov     edi,+8H[esp]
 04f8  89 e6                             mov     esi,esp
 04fa  a5                                movsd   
 04fb  a5                                movsd   

}

 04fc  8b 44 24 08                       mov     eax,+8H[esp]
 0500  83 c4 14                          add     esp,00000014H
 0503  5d                                pop     ebp
 0504  5f                                pop     edi
 0505  5e                                pop     esi
 0506  59                                pop     ecx
 0507  c3                                ret     

BigInt operator>>(const BigInt &a, unsigned int b) {
        BigInt result;
 0508                    BigInt near operator >>( BigInt const near &, int unsigned ):
 0508  51                                push    ecx
 0509  56                                push    esi
 050a  57                                push    edi
 050b  55                                push    ebp
 050c  83 ec 18                          sub     esp,00000018H
 050f  89 44 24 08                       mov     +8H[esp],eax
 0513  89 d6                             mov     esi,edx

        if(b>=bigint_bitprecis)
                //total loss of precision
 0515  83 fb 40                          cmp     ebx,00000040H
 0518  72 13                             jb      L48

                result.Zeroize();
 051a  bb 08 00 00 00                    mov     ebx,00000008H
 051f  89 e0                             mov     eax,esp
 0521  31 d2                             xor     edx,edx
 0523  e8 00 00 00 00                    call    memset_
 0528  e9 c7 00 00 00                    jmp     L54

        else if(b==0)
                //no shift at all
 052d  85 db             L48             test    ebx,ebx
 052f  75 18                             jne     L49

                result=a;
 0531  89 e7                             mov     edi,esp
 0533  a5                                movsd   
 0534  a5                                movsd   
 0535  8b 7c 24 08                       mov     edi,+8H[esp]
 0539  89 e6                             mov     esi,esp
 053b  a5                                movsd   
 053c  a5                                movsd   
 053d  8b 44 24 08                       mov     eax,+8H[esp]
 0541  83 c4 18                          add     esp,00000018H
 0544  5d                                pop     ebp
 0545  5f                                pop     edi
 0546  5e                                pop     esi
 0547  59                                pop     ecx
 0548  c3                                ret     

        else if(b%CHAR_BIT==0) {
                //byte move - fast!
 0549  f6 c3 07          L49             test    bl,07H
 054c  75 3e                             jne     L50
 054e  89 e0                             mov     eax,esp

                unsigned byteshift=b%CHAR_BIT;
 0550  89 d9                             mov     ecx,ebx
 0552  31 d2                             xor     edx,edx

                result.Zeroize();
 0554  bb 08 00 00 00                    mov     ebx,00000008H
 0559  83 e1 07                          and     ecx,00000007H
 055c  e8 00 00 00 00                    call    memset_

                memmove(result.bits,a.bits+byteshift,bigint_bytes-byteshift);
        } else {
                //hard one:
 0561  bb 08 00 00 00                    mov     ebx,00000008H
 0566  29 cb                             sub     ebx,ecx
 0568  8d 14 8d 00 00 00 
       00                                lea     edx,+0H[ecx*4]
 056f  89 e0                             mov     eax,esp
 0571  01 f2                             add     edx,esi
 0573  e8 00 00 00 00                    call    memmove_
 0578  8b 7c 24 08                       mov     edi,+8H[esp]
 057c  89 e6                             mov     esi,esp
 057e  a5                                movsd   
 057f  a5                                movsd   
 0580  8b 44 24 08                       mov     eax,+8H[esp]
 0584  83 c4 18                          add     esp,00000018H
 0587  5d                                pop     ebp
 0588  5f                                pop     edi
 0589  5e                                pop     esi
 058a  59                                pop     ecx
 058b  c3                                ret     

                const BigInt::UnitType        *from=(a.bits)+(bigint_unitprecis-1);
 058c  8d 72 04          L50             lea     esi,+4H[edx]

                BigInt::UnitType        *to=(result.bits)+(bigint_unitprecis-1);
 058f  8d 44 24 04                       lea     eax,+4H[esp]

                int toi=bigint_unitprecis-1;
                //do whole units first
                while(b>=bigint_unitbits) {
 0593  ba 01 00 00 00                    mov     edx,00000001H
 0598  83 fb 20                          cmp     ebx,00000020H
 059b  72 12                             jb      L52

                        b-=bigint_unitbits;
                        *to--=0;
 059d  83 eb 20          L51             sub     ebx,00000020H

 05a0  4a                                dec     edx

                        toi--;
 05a1  c7 00 00 00 00 00                 mov     dword ptr [eax],00000000H
 05a7  83 e8 04                          sub     eax,00000004H

                }

 05aa  83 fb 20                          cmp     ebx,00000020H
 05ad  73 ee                             jae     L51

                BigInt::UnitType carrybits=0;        /* depends wether og not BigInt is signed or not*/
 05af  31 c9             L52             xor     ecx,ecx
 05b1  89 4c 24 14                       mov     +14H[esp],ecx
 05b5  85 d2                             test    edx,edx
 05b7  7c 3b                             jl      L54

                while(toi>=0) {
 05b9  b9 20 00 00 00                    mov     ecx,00000020H
 05be  29 d9                             sub     ecx,ebx
 05c0  89 4c 24 10                       mov     +10H[esp],ecx

                        BigInt::UnitType newcarrybits=(*from);
                        *to=(*from>>b)|(carrybits<<(bigint_unitbits-b));
 05c4  8a 4c 24 10       L53             mov     cl,+10H[esp]
 05c8  8b 6c 24 14                       mov     ebp,+14H[esp]
 05cc  d3 e5                             shl     ebp,cl
 05ce  8b 3e                             mov     edi,[esi]
 05d0  89 6c 24 0c                       mov     +0cH[esp],ebp
 05d4  88 d9                             mov     cl,bl
 05d6  89 fd                             mov     ebp,edi

                        to--;
 05d8  83 e8 04                          sub     eax,00000004H
 05db  d3 ed                             shr     ebp,cl

                        from--;
 05dd  83 ee 04                          sub     esi,00000004H
 05e0  89 e9                             mov     ecx,ebp
 05e2  8b 6c 24 0c                       mov     ebp,+0cH[esp]

                        toi--;
 05e6  4a                                dec     edx
 05e7  09 cd                             or      ebp,ecx

                        carrybits=newcarrybits;
 05e9  89 7c 24 14                       mov     +14H[esp],edi
 05ed  89 68 04                          mov     +4H[eax],ebp

                }
        }
 05f0  85 d2                             test    edx,edx
 05f2  7d d0                             jge     L53

        return result;
 05f4  8b 7c 24 08       L54             mov     edi,+8H[esp]
 05f8  89 e6                             mov     esi,esp
 05fa  a5                                movsd   
 05fb  a5                                movsd   

}


/* the following three functions can one some systems be optimized with a bit
 * block function
 */
 05fc  8b 44 24 08                       mov     eax,+8H[esp]
 0600  83 c4 18                          add     esp,00000018H
 0603  5d                                pop     ebp
 0604  5f                                pop     edi
 0605  5e                                pop     esi
 0606  59                                pop     ecx
 0607  c3                                ret     

BigInt operator|(const BigInt &a, const BigInt &b) {
 0608                    BigInt near operator |( BigInt const near &, BigInt const near & ):
 0608  51                                push    ecx
 0609  56                                push    esi
 060a  57                                push    edi
 060b  83 ec 0c                          sub     esp,0000000cH
 060e  89 44 24 08                       mov     +8H[esp],eax
 0612  89 d9                             mov     ecx,ebx

        BigInt result=a;
        const BigInt::UnitType *ap=b.bits;
        const BigInt::UnitType *bp=b.bits;
        BigInt::UnitType *rp=result.bits;
 0614  89 e7                             mov     edi,esp
 0616  89 d6                             mov     esi,edx
 0618  a5                                movsd   
 0619  a5                                movsd   

 061a  31 d2                             xor     edx,edx

        for(int x=0; x<bigint_unitprecis; ap++,bp++,rp++,x++)
 061c  89 e6                             mov     esi,esp

                *rp=*ap|*bp;

 061e  8b 03             L55             mov     eax,[ebx]
 0620  83 c3 04                          add     ebx,00000004H
 0623  8b 39                             mov     edi,[ecx]
 0625  83 c1 04                          add     ecx,00000004H
 0628  83 c6 04                          add     esi,00000004H
 062b  09 f8                             or      eax,edi
 062d  42                                inc     edx
 062e  89 46 fc                          mov     -4H[esi],eax
 0631  83 fa 02                          cmp     edx,00000002H
 0634  72 e8                             jb      L55

        return result;
 0636  8b 7c 24 08                       mov     edi,+8H[esp]
 063a  89 e6                             mov     esi,esp
 063c  a5                                movsd   
 063d  a5                                movsd   

}

 063e  8b 44 24 08                       mov     eax,+8H[esp]
 0642  83 c4 0c                          add     esp,0000000cH
 0645  5f                                pop     edi
 0646  5e                                pop     esi
 0647  59                                pop     ecx
 0648  c3                                ret     
 0649  8d 40 00                          lea     eax,+0H[eax]

BigInt operator&(const BigInt &a, const BigInt &b) {
 064c                    BigInt near operator &( BigInt const near &, BigInt const near & ):
 064c  51                                push    ecx
 064d  56                                push    esi
 064e  57                                push    edi
 064f  83 ec 0c                          sub     esp,0000000cH
 0652  89 44 24 08                       mov     +8H[esp],eax

        BigInt result=a;
        const BigInt::UnitType *bp=b.bits;
 0656  89 e7                             mov     edi,esp
 0658  89 d6                             mov     esi,edx

        BigInt::UnitType *rp=result.bits;
 065a  89 e0                             mov     eax,esp

        for(int x=0; x<bigint_unitprecis; bp++,rp++,x++)
 065c  31 d2                             xor     edx,edx
 065e  a5                                movsd   
 065f  a5                                movsd   

                *rp&=*bp;

 0660  8b 0b             L56             mov     ecx,[ebx]
 0662  83 c3 04                          add     ebx,00000004H
 0665  8b 30                             mov     esi,[eax]
 0667  83 c0 04                          add     eax,00000004H
 066a  21 ce                             and     esi,ecx
 066c  42                                inc     edx
 066d  89 70 fc                          mov     -4H[eax],esi
 0670  83 fa 02                          cmp     edx,00000002H
 0673  72 eb                             jb      L56

        return result;
 0675  8b 7c 24 08                       mov     edi,+8H[esp]
 0679  89 e6                             mov     esi,esp
 067b  a5                                movsd   
 067c  a5                                movsd   

}

 067d  8b 44 24 08                       mov     eax,+8H[esp]
 0681  83 c4 0c                          add     esp,0000000cH
 0684  5f                                pop     edi
 0685  5e                                pop     esi
 0686  59                                pop     ecx
 0687  c3                                ret     

BigInt operator^(const BigInt &a, const BigInt &b) {
 0688                    BigInt near operator ^( BigInt const near &, BigInt const near & ):
 0688  51                                push    ecx
 0689  56                                push    esi
 068a  57                                push    edi
 068b  83 ec 0c                          sub     esp,0000000cH
 068e  89 44 24 08                       mov     +8H[esp],eax
 0692  89 d9                             mov     ecx,ebx

        BigInt result=a;
        const BigInt::UnitType *ap=b.bits;
        const BigInt::UnitType *bp=b.bits;
        BigInt::UnitType *rp=result.bits;
 0694  89 e7                             mov     edi,esp
 0696  89 d6                             mov     esi,edx
 0698  a5                                movsd   
 0699  a5                                movsd   

 069a  31 d2                             xor     edx,edx

        for(int x=0;x<bigint_unitprecis; ap++,bp++,rp++,x++)
 069c  89 e6                             mov     esi,esp

                *rp=*ap^*bp;

 069e  8b 03             L57             mov     eax,[ebx]
 06a0  83 c3 04                          add     ebx,00000004H
 06a3  8b 39                             mov     edi,[ecx]
 06a5  83 c1 04                          add     ecx,00000004H
 06a8  83 c6 04                          add     esi,00000004H
 06ab  31 f8                             xor     eax,edi
 06ad  42                                inc     edx
 06ae  89 46 fc                          mov     -4H[esi],eax
 06b1  83 fa 02                          cmp     edx,00000002H
 06b4  72 e8                             jb      L57

        return result;
 06b6  8b 7c 24 08                       mov     edi,+8H[esp]
 06ba  89 e6                             mov     esi,esp
 06bc  a5                                movsd   
 06bd  a5                                movsd   

}


/* the following six/seven function can on some systems be heavily optimized by
 * using assembler.
 * eg: the Intel i80x86 family can compare memory block backwards
 * the memory comparsion is isolated in the function memcmprvs()
 */
 06be  8b 44 24 08                       mov     eax,+8H[esp]
 06c2  83 c4 0c                          add     esp,0000000cH
 06c5  5f                                pop     edi
 06c6  5e                                pop     esi
 06c7  59                                pop     ecx
 06c8  c3                                ret     
 06c9  8d 40 00                          lea     eax,+0H[eax]

static int memcmprvs(const void *a, const void *b, size_t sz) {
 06cc                    int near memcmprvs( void const near *, void const near *, int unsigned ):
 06cc  51                                push    ecx

        const unsigned char *ap=(const unsigned char *)a+sz-1,
 06cd  01 d8                             add     eax,ebx

                            *bp=(const unsigned char *)b+sz-1;
 06cf  01 da                             add     edx,ebx
 06d1  48                L58             dec     eax
 06d2  4a                                dec     edx

        while(sz--) {
 06d3  4b                                dec     ebx
 06d4  83 fb ff                          cmp     ebx,0ffffffffH
 06d7  74 18                             je      L60

                if(*ap<*bp) return -1;
 06d9  8a 08                             mov     cl,[eax]
 06db  8a 2a                             mov     ch,[edx]
 06dd  38 e9                             cmp     cl,ch
 06df  73 07                             jae     L59
 06e1  b8 ff ff ff ff                    mov     eax,0ffffffffH
 06e6  59                                pop     ecx
 06e7  c3                                ret     

                if(*ap>*bp) return  1;
                ap--,bp--;
        }
 06e8  76 e7             L59             jbe     L58
 06ea  b8 01 00 00 00                    mov     eax,00000001H
 06ef  59                                pop     ecx
 06f0  c3                                ret     

        return 0;
 06f1  31 c0             L60             xor     eax,eax

}

 06f3  59                                pop     ecx
 06f4  c3                                ret     
 06f5  8d 40 00                          lea     eax,+0H[eax]

int operator==(const BigInt &a, const BigInt &b) {
 06f8                    int near operator ==( BigInt const near &, BigInt const near & ):
 06f8  53                                push    ebx
 06f9  51                                push    ecx
 06fa  89 c1                             mov     ecx,eax
 06fc  89 d0                             mov     eax,edx

        return memcmprvs(a.bits,b.bits,bigint_bytes)==0;
 06fe  bb 08 00 00 00                    mov     ebx,00000008H
 0703  8d 51 07                          lea     edx,+7H[ecx]
 0706  83 c0 07                          add     eax,00000007H
 0709  4b                L61             dec     ebx
 070a  83 fb ff                          cmp     ebx,0ffffffffH
 070d  74 1c                             je      L64
 070f  8a 0a                             mov     cl,[edx]
 0711  8a 28                             mov     ch,[eax]
 0713  38 e9                             cmp     cl,ch
 0715  73 07                             jae     L62
 0717  b9 ff ff ff ff                    mov     ecx,0ffffffffH
 071c  eb 0f                             jmp     L65
 071e  76 07             L62             jbe     L63
 0720  b9 01 00 00 00                    mov     ecx,00000001H
 0725  eb 06                             jmp     L65
 0727  4a                L63             dec     edx
 0728  48                                dec     eax
 0729  eb de                             jmp     L61
 072b  31 c9             L64             xor     ecx,ecx
 072d  85 c9             L65             test    ecx,ecx
 072f  0f 94 c0                          sete    al
 0732  25 ff 00 00 00                    and     eax,000000ffH

}
 0737  59                                pop     ecx
 0738  5b                                pop     ebx
 0739  c3                                ret     
 073a  8b c0                             mov     eax,eax

int operator!=(const BigInt &a, const BigInt &b) {
 073c                    int near operator !=( BigInt const near &, BigInt const near & ):
 073c  53                                push    ebx
 073d  51                                push    ecx
 073e  89 c1                             mov     ecx,eax
 0740  89 d0                             mov     eax,edx

        return memcmprvs(a.bits,b.bits,bigint_bytes)!=0;
 0742  bb 08 00 00 00                    mov     ebx,00000008H
 0747  8d 51 07                          lea     edx,+7H[ecx]
 074a  83 c0 07                          add     eax,00000007H
 074d  4b                L66             dec     ebx
 074e  83 fb ff                          cmp     ebx,0ffffffffH
 0751  74 1c                             je      L69
 0753  8a 0a                             mov     cl,[edx]
 0755  8a 28                             mov     ch,[eax]
 0757  38 e9                             cmp     cl,ch
 0759  73 07                             jae     L67
 075b  b9 ff ff ff ff                    mov     ecx,0ffffffffH
 0760  eb 0f                             jmp     L70
 0762  76 07             L67             jbe     L68
 0764  b9 01 00 00 00                    mov     ecx,00000001H
 0769  eb 06                             jmp     L70
 076b  4a                L68             dec     edx
 076c  48                                dec     eax
 076d  eb de                             jmp     L66
 076f  31 c9             L69             xor     ecx,ecx
 0771  85 c9             L70             test    ecx,ecx
 0773  0f 95 c0                          setne   al
 0776  25 ff 00 00 00                    and     eax,000000ffH

}
 077b  59                                pop     ecx
 077c  5b                                pop     ebx
 077d  c3                                ret     
 077e  8b c0                             mov     eax,eax

int operator<=(const BigInt &a, const BigInt &b) {
 0780                    int near operator <=( BigInt const near &, BigInt const near & ):
 0780  53                                push    ebx
 0781  51                                push    ecx
 0782  89 c1                             mov     ecx,eax
 0784  89 d0                             mov     eax,edx

        return memcmprvs(a.bits,b.bits,bigint_bytes)<=0;
 0786  bb 08 00 00 00                    mov     ebx,00000008H
 078b  8d 51 07                          lea     edx,+7H[ecx]
 078e  83 c0 07                          add     eax,00000007H
 0791  4b                L71             dec     ebx
 0792  83 fb ff                          cmp     ebx,0ffffffffH
 0795  74 1c                             je      L74
 0797  8a 0a                             mov     cl,[edx]
 0799  8a 28                             mov     ch,[eax]
 079b  38 e9                             cmp     cl,ch
 079d  73 07                             jae     L72
 079f  b9 ff ff ff ff                    mov     ecx,0ffffffffH
 07a4  eb 0f                             jmp     L75
 07a6  76 07             L72             jbe     L73
 07a8  b9 01 00 00 00                    mov     ecx,00000001H
 07ad  eb 06                             jmp     L75
 07af  4a                L73             dec     edx
 07b0  48                                dec     eax
 07b1  eb de                             jmp     L71
 07b3  31 c9             L74             xor     ecx,ecx
 07b5  85 c9             L75             test    ecx,ecx
 07b7  0f 9e c0                          setle   al
 07ba  25 ff 00 00 00                    and     eax,000000ffH

}
 07bf  59                                pop     ecx
 07c0  5b                                pop     ebx
 07c1  c3                                ret     
 07c2  8b c0                             mov     eax,eax

int operator>=(const BigInt &a, const BigInt &b) {
 07c4                    int near operator >=( BigInt const near &, BigInt const near & ):
 07c4  53                                push    ebx
 07c5  51                                push    ecx
 07c6  89 c1                             mov     ecx,eax
 07c8  89 d0                             mov     eax,edx

        return memcmprvs(a.bits,b.bits,bigint_bytes)>=0;
 07ca  bb 08 00 00 00                    mov     ebx,00000008H
 07cf  8d 51 07                          lea     edx,+7H[ecx]
 07d2  83 c0 07                          add     eax,00000007H
 07d5  4b                L76             dec     ebx
 07d6  83 fb ff                          cmp     ebx,0ffffffffH
 07d9  74 1c                             je      L79
 07db  8a 0a                             mov     cl,[edx]
 07dd  8a 28                             mov     ch,[eax]
 07df  38 e9                             cmp     cl,ch
 07e1  73 07                             jae     L77
 07e3  b9 ff ff ff ff                    mov     ecx,0ffffffffH
 07e8  eb 0f                             jmp     L80
 07ea  76 07             L77             jbe     L78
 07ec  b9 01 00 00 00                    mov     ecx,00000001H
 07f1  eb 06                             jmp     L80
 07f3  4a                L78             dec     edx
 07f4  48                                dec     eax
 07f5  eb de                             jmp     L76
 07f7  31 c9             L79             xor     ecx,ecx
 07f9  85 c9             L80             test    ecx,ecx
 07fb  0f 9d c0                          setge   al
 07fe  25 ff 00 00 00                    and     eax,000000ffH

}
 0803  59                                pop     ecx
 0804  5b                                pop     ebx
 0805  c3                                ret     
 0806  8b c0                             mov     eax,eax

int operator<(const BigInt &a, const BigInt &b) {
 0808                    int near operator <( BigInt const near &, BigInt const near & ):
 0808  53                                push    ebx
 0809  51                                push    ecx
 080a  89 c1                             mov     ecx,eax
 080c  89 d0                             mov     eax,edx

        return memcmprvs(a.bits,b.bits,bigint_bytes)<0;
 080e  bb 08 00 00 00                    mov     ebx,00000008H
 0813  8d 51 07                          lea     edx,+7H[ecx]
 0816  83 c0 07                          add     eax,00000007H
 0819  4b                L81             dec     ebx
 081a  83 fb ff                          cmp     ebx,0ffffffffH
 081d  74 1c                             je      L84
 081f  8a 0a                             mov     cl,[edx]
 0821  8a 28                             mov     ch,[eax]
 0823  38 e9                             cmp     cl,ch
 0825  73 07                             jae     L82
 0827  b9 ff ff ff ff                    mov     ecx,0ffffffffH
 082c  eb 0f                             jmp     L85
 082e  76 07             L82             jbe     L83
 0830  b9 01 00 00 00                    mov     ecx,00000001H
 0835  eb 06                             jmp     L85
 0837  4a                L83             dec     edx
 0838  48                                dec     eax
 0839  eb de                             jmp     L81
 083b  31 c9             L84             xor     ecx,ecx
 083d  85 c9             L85             test    ecx,ecx
 083f  0f 9c c0                          setl    al
 0842  25 ff 00 00 00                    and     eax,000000ffH

}
 0847  59                                pop     ecx
 0848  5b                                pop     ebx
 0849  c3                                ret     
 084a  8b c0                             mov     eax,eax

int operator>(const BigInt &a, const BigInt &b) {
 084c                    int near operator >( BigInt const near &, BigInt const near & ):
 084c  53                                push    ebx
 084d  51                                push    ecx
 084e  89 c1                             mov     ecx,eax
 0850  89 d0                             mov     eax,edx

        return memcmprvs(a.bits,b.bits,bigint_bytes)>0;
 0852  bb 08 00 00 00                    mov     ebx,00000008H
 0857  8d 51 07                          lea     edx,+7H[ecx]
 085a  83 c0 07                          add     eax,00000007H
 085d  4b                L86             dec     ebx
 085e  83 fb ff                          cmp     ebx,0ffffffffH
 0861  74 1c                             je      L89
 0863  8a 0a                             mov     cl,[edx]
 0865  8a 28                             mov     ch,[eax]
 0867  38 e9                             cmp     cl,ch
 0869  73 07                             jae     L87
 086b  b9 ff ff ff ff                    mov     ecx,0ffffffffH
 0870  eb 0f                             jmp     L90
 0872  76 07             L87             jbe     L88
 0874  b9 01 00 00 00                    mov     ecx,00000001H
 0879  eb 06                             jmp     L90
 087b  4a                L88             dec     edx
 087c  48                                dec     eax
 087d  eb de                             jmp     L86
 087f  31 c9             L89             xor     ecx,ecx
 0881  85 c9             L90             test    ecx,ecx
 0883  0f 9f c0                          setg    al
 0886  25 ff 00 00 00                    and     eax,000000ffH

}



 088b  59                                pop     ecx
 088c  5b                                pop     ebx
 088d  c3                                ret     
 088e  8b c0                             mov     eax,eax

BigInt& BigInt::operator+=(const BigInt &a) {
 0890                    BigInt near & near BigInt::operator +=( BigInt const near & ):
 0890  53                                push    ebx
 0891  51                                push    ecx
 0892  56                                push    esi
 0893  57                                push    edi
 0894  55                                push    ebp
 0895  89 c5                             mov     ebp,eax

        const UnitType *ap=a.bits;
        UnitType *bp=bits;
        UnitType carry=0;

 0897  89 d3                             mov     ebx,edx

        for(int x=0; x<bigint_unitprecis; x++,ap++,bp++) {
                UnitType result=*ap+*bp+carry;
 0899  31 f6                             xor     esi,esi
 089b  31 d2                             xor     edx,edx
 089d  eb 1c                             jmp     L94

                if(UnitType(*ap+*bp)<*ap) carry=1;
                else if(UnitType(*ap+*bp+carry)<*ap+*bp) carry=1;
 089f  39 cf             L91             cmp     edi,ecx
 08a1  73 07                             jae     L92
 08a3  ba 01 00 00 00                    mov     edx,00000001H
 08a8  eb 02                             jmp     L93

                else carry=0;
                *bp=result;
        }
        return *this;
 08aa  31 d2             L92             xor     edx,edx
 08ac  83 c0 04          L93             add     eax,00000004H
 08af  46                                inc     esi
 08b0  83 c3 04                          add     ebx,00000004H
 08b3  89 78 fc                          mov     -4H[eax],edi
 08b6  83 fe 02                          cmp     esi,00000002H
 08b9  73 12                             jae     L95
 08bb  8b 0b             L94             mov     ecx,[ebx]
 08bd  03 08                             add     ecx,[eax]
 08bf  8d 3c 11                          lea     edi,[ecx+edx]
 08c2  3b 0b                             cmp     ecx,[ebx]
 08c4  73 d9                             jae     L91
 08c6  ba 01 00 00 00                    mov     edx,00000001H
 08cb  eb df                             jmp     L93

}

 08cd  89 e8             L95             mov     eax,ebp
 08cf  5d                                pop     ebp
 08d0  5f                                pop     edi
 08d1  5e                                pop     esi
 08d2  59                                pop     ecx
 08d3  5b                                pop     ebx
 08d4  c3                                ret     
 08d5  8d 40 00                          lea     eax,+0H[eax]

BigInt& BigInt::operator-=(const BigInt &a) {
 08d8                    BigInt near & near BigInt::operator -=( BigInt const near & ):
 08d8  53                                push    ebx
 08d9  51                                push    ecx
 08da  56                                push    esi
 08db  57                                push    edi
 08dc  55                                push    ebp
 08dd  89 c5                             mov     ebp,eax

        const UnitType *ap=a.bits;
        UnitType *tp=bits;
        UnitType carry=0;

 08df  89 d1                             mov     ecx,edx

        for(int x=0; x<bigint_unitprecis; x++,ap++,tp++) {
                UnitType result=*tp-*ap-carry;
 08e1  31 f6                             xor     esi,esi
 08e3  31 d2                             xor     edx,edx
 08e5  eb 1c                             jmp     L99

                if(UnitType(*tp-*ap)>*tp) carry=1;
                else if(UnitType(*tp-*ap-carry)>*tp-*ap) carry=1;
 08e7  39 df             L96             cmp     edi,ebx
 08e9  76 07                             jbe     L97
 08eb  ba 01 00 00 00                    mov     edx,00000001H
 08f0  eb 02                             jmp     L98

                else carry=0;
                *tp=result;
        }
        return *this;
}

 08f2  31 d2             L97             xor     edx,edx
 08f4  83 c0 04          L98             add     eax,00000004H
 08f7  46                                inc     esi
 08f8  83 c1 04                          add     ecx,00000004H
 08fb  89 78 fc                          mov     -4H[eax],edi
 08fe  83 fe 02                          cmp     esi,00000002H
 0901  73 ca                             jae     L95
 0903  8b 18             L99             mov     ebx,[eax]
 0905  8b 39                             mov     edi,[ecx]
 0907  29 fb                             sub     ebx,edi
 0909  89 df                             mov     edi,ebx
 090b  29 d7                             sub     edi,edx
 090d  3b 18                             cmp     ebx,[eax]
 090f  76 d6                             jbe     L96
 0911  ba 01 00 00 00                    mov     edx,00000001H
 0916  eb dc                             jmp     L98

BigInt& BigInt::operator<<=(unsigned int a) {
 0918                    BigInt near & near BigInt::operator <<=( int unsigned ):
 0918  53                                push    ebx
 0919  51                                push    ecx
 091a  56                                push    esi
 091b  57                                push    edi
 091c  55                                push    ebp
 091d  83 ec 20                          sub     esp,00000020H
 0920  89 44 24 18                       mov     +18H[esp],eax
 0924  89 d1                             mov     ecx,edx

        return (*this)=(*this)<<a;
 0926  8d 44 24 08                       lea     eax,+8H[esp]
 092a  89 44 24 10                       mov     +10H[esp],eax
 092e  83 fa 40                          cmp     edx,00000040H
 0931  72 13                             jb      L100
 0933  bb 08 00 00 00                    mov     ebx,00000008H
 0938  89 e0                             mov     eax,esp
 093a  31 d2                             xor     edx,edx
 093c  e8 00 00 00 00                    call    memset_
 0941  e9 9e 00 00 00                    jmp     L106
 0946  85 d2             L100            test    edx,edx
 0948  75 0d                             jne     L101
 094a  89 e7                             mov     edi,esp
 094c  8b 74 24 18                       mov     esi,+18H[esp]
 0950  a5                                movsd   
 0951  a5                                movsd   
 0952  e9 8d 00 00 00                    jmp     L106
 0957  f6 c2 07          L101            test    dl,07H
 095a  75 2e                             jne     L102
 095c  bb 08 00 00 00                    mov     ebx,00000008H
 0961  89 e0                             mov     eax,esp
 0963  31 d2                             xor     edx,edx
 0965  83 e1 07                          and     ecx,00000007H
 0968  e8 00 00 00 00                    call    memset_
 096d  bb 08 00 00 00                    mov     ebx,00000008H
 0972  89 e2                             mov     edx,esp
 0974  29 cb                             sub     ebx,ecx
 0976  8d 04 8d 00 00 00 
       00                                lea     eax,+0H[ecx*4]
 097d  01 d0                             add     eax,edx
 097f  8b 54 24 18                       mov     edx,+18H[esp]
 0983  e8 00 00 00 00                    call    memmove_
 0988  eb 5a                             jmp     L106
 098a  8b 74 24 18       L102            mov     esi,+18H[esp]
 098e  89 e0                             mov     eax,esp
 0990  31 db                             xor     ebx,ebx
 0992  83 fa 20                          cmp     edx,00000020H
 0995  72 12                             jb      L104
 0997  83 ea 20          L103            sub     edx,00000020H
 099a  43                                inc     ebx
 099b  c7 00 00 00 00 00                 mov     dword ptr [eax],00000000H
 09a1  83 c0 04                          add     eax,00000004H
 09a4  83 fa 20                          cmp     edx,00000020H
 09a7  73 ee                             jae     L103
 09a9  31 ff             L104            xor     edi,edi
 09ab  83 fb 02                          cmp     ebx,00000002H
 09ae  73 34                             jae     L106
 09b0  b9 20 00 00 00                    mov     ecx,00000020H
 09b5  29 d1                             sub     ecx,edx
 09b7  89 4c 24 1c                       mov     +1cH[esp],ecx
 09bb  8a 4c 24 1c       L105            mov     cl,+1cH[esp]
 09bf  8b 2e                             mov     ebp,[esi]
 09c1  d3 ed                             shr     ebp,cl
 09c3  89 6c 24 14                       mov     +14H[esp],ebp
 09c7  88 d1                             mov     cl,dl
 09c9  8b 2e                             mov     ebp,[esi]
 09cb  83 c0 04                          add     eax,00000004H
 09ce  d3 e5                             shl     ebp,cl
 09d0  83 c6 04                          add     esi,00000004H
 09d3  89 e9                             mov     ecx,ebp
 09d5  43                                inc     ebx
 09d6  09 f9                             or      ecx,edi
 09d8  8b 7c 24 14                       mov     edi,+14H[esp]
 09dc  89 48 fc                          mov     -4H[eax],ecx
 09df  83 fb 02                          cmp     ebx,00000002H
 09e2  72 d7                             jb      L105
 09e4  8d 7c 24 08       L106            lea     edi,+8H[esp]
 09e8  89 e6                             mov     esi,esp
 09ea  a5                                movsd   
 09eb  a5                                movsd   
 09ec  8b 7c 24 18                       mov     edi,+18H[esp]
 09f0  8b 74 24 10                       mov     esi,+10H[esp]

}

 09f4  8b 44 24 18                       mov     eax,+18H[esp]
 09f8  a5                                movsd   
 09f9  a5                                movsd   
 09fa  83 c4 20                          add     esp,00000020H
 09fd  5d                                pop     ebp
 09fe  5f                                pop     edi
 09ff  5e                                pop     esi
 0a00  59                                pop     ecx
 0a01  5b                                pop     ebx
 0a02  c3                                ret     
 0a03  90                                nop     

BigInt& BigInt::operator>>=(unsigned int a) {
 0a04                    BigInt near & near BigInt::operator >>=( int unsigned ):
 0a04  53                                push    ebx
 0a05  51                                push    ecx
 0a06  56                                push    esi
 0a07  57                                push    edi
 0a08  55                                push    ebp
 0a09  83 ec 24                          sub     esp,00000024H
 0a0c  89 44 24 18                       mov     +18H[esp],eax
 0a10  89 d1                             mov     ecx,edx

        return (*this)=(*this)>>a;
 0a12  8d 44 24 08                       lea     eax,+8H[esp]
 0a16  89 44 24 10                       mov     +10H[esp],eax
 0a1a  83 fa 40                          cmp     edx,00000040H
 0a1d  72 13                             jb      L107
 0a1f  bb 08 00 00 00                    mov     ebx,00000008H
 0a24  89 e0                             mov     eax,esp
 0a26  31 d2                             xor     edx,edx
 0a28  e8 00 00 00 00                    call    memset_
 0a2d  e9 b0 00 00 00                    jmp     L113
 0a32  85 d2             L107            test    edx,edx
 0a34  75 0d                             jne     L108
 0a36  89 e7                             mov     edi,esp
 0a38  8b 74 24 18                       mov     esi,+18H[esp]
 0a3c  a5                                movsd   
 0a3d  a5                                movsd   
 0a3e  e9 9f 00 00 00                    jmp     L113
 0a43  f6 c2 07          L108            test    dl,07H
 0a46  75 2e                             jne     L109
 0a48  bb 08 00 00 00                    mov     ebx,00000008H
 0a4d  89 e0                             mov     eax,esp
 0a4f  31 d2                             xor     edx,edx
 0a51  83 e1 07                          and     ecx,00000007H
 0a54  e8 00 00 00 00                    call    memset_
 0a59  bb 08 00 00 00                    mov     ebx,00000008H
 0a5e  29 cb                             sub     ebx,ecx
 0a60  8d 14 8d 00 00 00 
       00                                lea     edx,+0H[ecx*4]
 0a67  8b 4c 24 18                       mov     ecx,+18H[esp]
 0a6b  89 e0                             mov     eax,esp
 0a6d  01 ca                             add     edx,ecx
 0a6f  e8 00 00 00 00                    call    memmove_
 0a74  eb 6c                             jmp     L113
 0a76  8b 74 24 18       L109            mov     esi,+18H[esp]
 0a7a  8d 44 24 04                       lea     eax,+4H[esp]
 0a7e  bb 01 00 00 00                    mov     ebx,00000001H
 0a83  83 c6 04                          add     esi,00000004H
 0a86  83 fa 20                          cmp     edx,00000020H
 0a89  72 12                             jb      L111
 0a8b  83 ea 20          L110            sub     edx,00000020H
 0a8e  4b                                dec     ebx
 0a8f  c7 00 00 00 00 00                 mov     dword ptr [eax],00000000H
 0a95  83 e8 04                          sub     eax,00000004H
 0a98  83 fa 20                          cmp     edx,00000020H
 0a9b  73 ee                             jae     L110
 0a9d  31 ff             L111            xor     edi,edi
 0a9f  89 7c 24 20                       mov     +20H[esp],edi
 0aa3  85 db                             test    ebx,ebx
 0aa5  7c 3b                             jl      L113
 0aa7  b9 20 00 00 00                    mov     ecx,00000020H
 0aac  29 d1                             sub     ecx,edx
 0aae  89 4c 24 1c                       mov     +1cH[esp],ecx
 0ab2  8a 4c 24 1c       L112            mov     cl,+1cH[esp]
 0ab6  8b 6c 24 20                       mov     ebp,+20H[esp]
 0aba  d3 e5                             shl     ebp,cl
 0abc  8b 3e                             mov     edi,[esi]
 0abe  89 6c 24 14                       mov     +14H[esp],ebp
 0ac2  88 d1                             mov     cl,dl
 0ac4  89 fd                             mov     ebp,edi
 0ac6  83 e8 04                          sub     eax,00000004H
 0ac9  d3 ed                             shr     ebp,cl
 0acb  83 ee 04                          sub     esi,00000004H
 0ace  89 e9                             mov     ecx,ebp
 0ad0  8b 6c 24 14                       mov     ebp,+14H[esp]
 0ad4  4b                                dec     ebx
 0ad5  09 cd                             or      ebp,ecx
 0ad7  89 7c 24 20                       mov     +20H[esp],edi
 0adb  89 68 04                          mov     +4H[eax],ebp
 0ade  85 db                             test    ebx,ebx
 0ae0  7d d0                             jge     L112
 0ae2  8d 7c 24 08       L113            lea     edi,+8H[esp]
 0ae6  89 e6                             mov     esi,esp
 0ae8  a5                                movsd   
 0ae9  a5                                movsd   
 0aea  8b 7c 24 18                       mov     edi,+18H[esp]
 0aee  8b 74 24 10                       mov     esi,+10H[esp]

}

 0af2  8b 44 24 18                       mov     eax,+18H[esp]
 0af6  a5                                movsd   
 0af7  a5                                movsd   
 0af8  83 c4 24                          add     esp,00000024H
 0afb  5d                                pop     ebp
 0afc  5f                                pop     edi
 0afd  5e                                pop     esi
 0afe  59                                pop     ecx
 0aff  5b                                pop     ebx
 0b00  c3                                ret     
 0b01  8d 40 00                          lea     eax,+0H[eax]

BigInt& BigInt::operator|=(const BigInt &a) {
        UnitType *tp=bits;
 0b04                    BigInt near & near BigInt::operator |=( BigInt const near & ):
 0b04  53                                push    ebx
 0b05  51                                push    ecx
 0b06  56                                push    esi
 0b07  57                                push    edi
 0b08  89 c6                             mov     esi,eax

        const UnitType *ap=a.bits;
 0b0a  89 d3                             mov     ebx,edx

        for(int x=0; x<bigint_unitprecis; ++x,*tp++|=*ap++);
        return *this;
 0b0c  31 d2                             xor     edx,edx
 0b0e  42                L114            inc     edx
 0b0f  8b 0b                             mov     ecx,[ebx]
 0b11  8b 38                             mov     edi,[eax]
 0b13  83 c0 04                          add     eax,00000004H
 0b16  09 cf                             or      edi,ecx
 0b18  83 c3 04                          add     ebx,00000004H
 0b1b  89 78 fc                          mov     -4H[eax],edi
 0b1e  83 fa 02                          cmp     edx,00000002H
 0b21  72 eb                             jb      L114

}

 0b23  89 f0                             mov     eax,esi
 0b25  5f                                pop     edi
 0b26  5e                                pop     esi
 0b27  59                                pop     ecx
 0b28  5b                                pop     ebx
 0b29  c3                                ret     
 0b2a  8b c0                             mov     eax,eax

BigInt& BigInt::operator&=(const BigInt &a) {
        UnitType *tp=bits;
 0b2c                    BigInt near & near BigInt::operator &=( BigInt const near & ):
 0b2c  53                                push    ebx
 0b2d  51                                push    ecx
 0b2e  56                                push    esi
 0b2f  57                                push    edi
 0b30  89 c6                             mov     esi,eax

        const UnitType *ap=a.bits;
 0b32  89 d3                             mov     ebx,edx

        for(int x=0; x<bigint_unitprecis; ++x,*tp++&=*ap++);
        return *this;
 0b34  31 d2                             xor     edx,edx
 0b36  42                L115            inc     edx
 0b37  8b 0b                             mov     ecx,[ebx]
 0b39  8b 38                             mov     edi,[eax]
 0b3b  83 c0 04                          add     eax,00000004H
 0b3e  21 cf                             and     edi,ecx
 0b40  83 c3 04                          add     ebx,00000004H
 0b43  89 78 fc                          mov     -4H[eax],edi
 0b46  83 fa 02                          cmp     edx,00000002H
 0b49  72 eb                             jb      L115

}

 0b4b  89 f0                             mov     eax,esi
 0b4d  5f                                pop     edi
 0b4e  5e                                pop     esi
 0b4f  59                                pop     ecx
 0b50  5b                                pop     ebx
 0b51  c3                                ret     
 0b52  8b c0                             mov     eax,eax

BigInt& BigInt::operator^=(const BigInt &a) {
        UnitType *tp=bits;
 0b54                    BigInt near & near BigInt::operator ^=( BigInt const near & ):
 0b54  53                                push    ebx
 0b55  51                                push    ecx
 0b56  56                                push    esi
 0b57  57                                push    edi
 0b58  89 c6                             mov     esi,eax

        const UnitType *ap=a.bits;
 0b5a  89 d3                             mov     ebx,edx

        for(int x=0; x<bigint_unitprecis; ++x,*tp++^=*ap++);
        return *this;
 0b5c  31 d2                             xor     edx,edx
 0b5e  42                L116            inc     edx
 0b5f  8b 0b                             mov     ecx,[ebx]
 0b61  8b 38                             mov     edi,[eax]
 0b63  83 c0 04                          add     eax,00000004H
 0b66  31 cf                             xor     edi,ecx
 0b68  83 c3 04                          add     ebx,00000004H
 0b6b  89 78 fc                          mov     -4H[eax],edi
 0b6e  83 fa 02                          cmp     edx,00000002H
 0b71  72 eb                             jb      L116

}

 0b73  89 f0                             mov     eax,esi
 0b75  5f                                pop     edi
 0b76  5e                                pop     esi
 0b77  59                                pop     ecx
 0b78  5b                                pop     ebx
 0b79  c3                                ret     
 0b7a  8b c0                             mov     eax,eax

BigInt BigInt::operator~() {
 0b7c                    BigInt near BigInt::operator ~():
 0b7c  53                                push    ebx
 0b7d  56                                push    esi
 0b7e  57                                push    edi
 0b7f  83 ec 0c                          sub     esp,0000000cH
 0b82  89 54 24 08                       mov     +8H[esp],edx

        BigInt result=*this;
 0b86  89 e7                             mov     edi,esp
 0b88  89 c6                             mov     esi,eax
 0b8a  31 d2                             xor     edx,edx

        result.OnesComplement();
 0b8c  89 e0                             mov     eax,esp
 0b8e  a5                                movsd   
 0b8f  a5                                movsd   
 0b90  8b 18             L117            mov     ebx,[eax]
 0b92  83 c0 04                          add     eax,00000004H
 0b95  f7 d3                             not     ebx
 0b97  42                                inc     edx
 0b98  89 58 fc                          mov     -4H[eax],ebx
 0b9b  83 fa 02                          cmp     edx,00000002H
 0b9e  72 f0                             jb      L117

        return result;
 0ba0  8b 7c 24 08                       mov     edi,+8H[esp]
 0ba4  89 e6                             mov     esi,esp
 0ba6  a5                                movsd   
 0ba7  a5                                movsd   

}

/* inline'd
BigInt& BigInt::operator++() {
        incr();
        return *this;
}
*/
 0ba8  8b 44 24 08                       mov     eax,+8H[esp]
 0bac  83 c4 0c                          add     esp,0000000cH
 0baf  5f                                pop     edi
 0bb0  5e                                pop     esi
 0bb1  5b                                pop     ebx
 0bb2  c3                                ret     
 0bb3  90                                nop     

BigInt  BigInt::operator++(int) {
 0bb4                    BigInt near BigInt::operator ++( int ):
 0bb4  51                                push    ecx
 0bb5  56                                push    esi
 0bb6  57                                push    edi
 0bb7  83 ec 0c                          sub     esp,0000000cH
 0bba  89 54 24 08                       mov     +8H[esp],edx
 0bbe  89 e7                             mov     edi,esp
 0bc0  89 c6                             mov     esi,eax
 0bc2  31 d2                             xor     edx,edx
 0bc4  a5                                movsd   
 0bc5  a5                                movsd   
 0bc6  8b 18             L118            mov     ebx,[eax]
 0bc8  83 fb ff                          cmp     ebx,0ffffffffH
 0bcb  74 18                             je      L119
 0bcd  8d 4b 01                          lea     ecx,+1H[ebx]
 0bd0  89 08                             mov     [eax],ecx
 0bd2  8b 7c 24 08                       mov     edi,+8H[esp]
 0bd6  89 e6                             mov     esi,esp
 0bd8  a5                                movsd   
 0bd9  a5                                movsd   
 0bda  8b 44 24 08                       mov     eax,+8H[esp]
 0bde  83 c4 0c                          add     esp,0000000cH
 0be1  5f                                pop     edi
 0be2  5e                                pop     esi
 0be3  59                                pop     ecx
 0be4  c3                                ret     

        BigInt result=*this;
        incr();
        return result;
}
/* inline'd too
BigInt& BigInt::operator--() {
        decr();
        return *this;
}
*/
 0be5  42                L119            inc     edx
 0be6  c7 00 00 00 00 00                 mov     dword ptr [eax],00000000H
 0bec  83 c0 04                          add     eax,00000004H
 0bef  83 fa 02                          cmp     edx,00000002H
 0bf2  72 d2                             jb      L118
 0bf4  8b 7c 24 08                       mov     edi,+8H[esp]
 0bf8  89 e6                             mov     esi,esp
 0bfa  a5                                movsd   
 0bfb  a5                                movsd   
 0bfc  8b 44 24 08                       mov     eax,+8H[esp]
 0c00  83 c4 0c                          add     esp,0000000cH
 0c03  5f                                pop     edi
 0c04  5e                                pop     esi
 0c05  59                                pop     ecx
 0c06  c3                                ret     
 0c07  90                                nop     

BigInt  BigInt::operator--(int) {
 0c08                    BigInt near BigInt::operator --( int ):
 0c08  51                                push    ecx
 0c09  56                                push    esi
 0c0a  57                                push    edi
 0c0b  83 ec 0c                          sub     esp,0000000cH
 0c0e  89 54 24 08                       mov     +8H[esp],edx
 0c12  89 e7                             mov     edi,esp
 0c14  89 c6                             mov     esi,eax
 0c16  31 d2                             xor     edx,edx
 0c18  a5                                movsd   
 0c19  a5                                movsd   
 0c1a  8b 18             L120            mov     ebx,[eax]
 0c1c  85 db                             test    ebx,ebx
 0c1e  74 18                             je      L121
 0c20  8d 4b ff                          lea     ecx,-1H[ebx]
 0c23  89 08                             mov     [eax],ecx
 0c25  8b 7c 24 08                       mov     edi,+8H[esp]
 0c29  89 e6                             mov     esi,esp
 0c2b  a5                                movsd   
 0c2c  a5                                movsd   
 0c2d  8b 44 24 08                       mov     eax,+8H[esp]
 0c31  83 c4 0c                          add     esp,0000000cH
 0c34  5f                                pop     edi
 0c35  5e                                pop     esi
 0c36  59                                pop     ecx
 0c37  c3                                ret     

        BigInt result=*this;
        decr();
        return result;
}

 0c38  42                L121            inc     edx
 0c39  c7 00 ff ff ff ff                 mov     dword ptr [eax],0ffffffffH
 0c3f  83 c0 04                          add     eax,00000004H
 0c42  83 fa 02                          cmp     edx,00000002H
 0c45  72 d3                             jb      L120
 0c47  8b 7c 24 08                       mov     edi,+8H[esp]
 0c4b  89 e6                             mov     esi,esp
 0c4d  a5                                movsd   
 0c4e  a5                                movsd   
 0c4f  8b 44 24 08                       mov     eax,+8H[esp]
 0c53  83 c4 0c                          add     esp,0000000cH
 0c56  5f                                pop     edi
 0c57  5e                                pop     esi
 0c58  59                                pop     ecx
 0c59  c3                                ret     
 0c5a  8b c0                             mov     eax,eax

BigInt BigInt::operator-() {
 0c5c                    BigInt near BigInt::operator -():
 0c5c  53                                push    ebx
 0c5d  51                                push    ecx
 0c5e  56                                push    esi
 0c5f  57                                push    edi
 0c60  83 ec 0c                          sub     esp,0000000cH
 0c63  89 54 24 08                       mov     +8H[esp],edx

        BigInt result=*this;
 0c67  89 e7                             mov     edi,esp
 0c69  89 c6                             mov     esi,eax
 0c6b  31 d2                             xor     edx,edx

        result.TwosComplement();
 0c6d  89 e0                             mov     eax,esp
 0c6f  a5                                movsd   
 0c70  a5                                movsd   
 0c71  8b 18             L122            mov     ebx,[eax]
 0c73  83 c0 04                          add     eax,00000004H
 0c76  f7 d3                             not     ebx
 0c78  42                                inc     edx
 0c79  89 58 fc                          mov     -4H[eax],ebx
 0c7c  83 fa 02                          cmp     edx,00000002H
 0c7f  73 13                             jae     L124
 0c81  eb ee                             jmp     L122
 0c83  42                L123            inc     edx
 0c84  c7 00 00 00 00 00                 mov     dword ptr [eax],00000000H
 0c8a  83 c0 04                          add     eax,00000004H
 0c8d  83 fa 02                          cmp     edx,00000002H
 0c90  72 06                             jb      L125
 0c92  eb 10                             jmp     L126
 0c94  89 e0             L124            mov     eax,esp
 0c96  31 d2                             xor     edx,edx
 0c98  8b 08             L125            mov     ecx,[eax]
 0c9a  83 f9 ff                          cmp     ecx,0ffffffffH
 0c9d  74 e4                             je      L123
 0c9f  8d 71 01                          lea     esi,+1H[ecx]
 0ca2  89 30                             mov     [eax],esi

        return result;
 0ca4  8b 7c 24 08       L126            mov     edi,+8H[esp]
 0ca8  89 e6                             mov     esi,esp
 0caa  a5                                movsd   
 0cab  a5                                movsd   

}


 0cac  8b 44 24 08                       mov     eax,+8H[esp]
 0cb0  83 c4 0c                          add     esp,0000000cH
 0cb3  5f                                pop     edi
 0cb4  5e                                pop     esi
 0cb5  59                                pop     ecx
 0cb6  5b                                pop     ebx
 0cb7  c3                                ret     

BigInt operator*(const BigInt& a,const BigInt& b) {
 0cb8                    BigInt near operator *( BigInt const near &, BigInt const near & ):
 0cb8  51                                push    ecx
 0cb9  56                                push    esi
 0cba  57                                push    edi
 0cbb  55                                push    ebp
 0cbc  83 ec 48                          sub     esp,00000048H
 0cbf  89 44 24 3c                       mov     +3cH[esp],eax

        BigInt result=a;
 0cc3  8d 7c 24 08                       lea     edi,+8H[esp]
 0cc7  89 d6                             mov     esi,edx
 0cc9  a5                                movsd   
 0cca  a5                                movsd   

        result*=b;
 0ccb  8d 7c 24 20                       lea     edi,+20H[esp]
 0ccf  8d 74 24 08                       lea     esi,+8H[esp]
 0cd3  a5                                movsd   
 0cd4  a5                                movsd   
 0cd5  8d 44 24 08                       lea     eax,+8H[esp]
 0cd9  89 e7                             mov     edi,esp
 0cdb  89 de                             mov     esi,ebx
 0cdd  31 d2                             xor     edx,edx
 0cdf  bb 08 00 00 00                    mov     ebx,00000008H
 0ce4  a5                                movsd   
 0ce5  a5                                movsd   
 0ce6  e8 00 00 00 00                    call    memset_
 0ceb  89 e0                             mov     eax,esp
 0ced  83 c0 04                          add     eax,00000004H
 0cf0  89 44 24 44                       mov     +44H[esp],eax
 0cf4  bd 01 00 00 00                    mov     ebp,00000001H
 0cf9  89 e0                             mov     eax,esp
 0cfb  31 d2                             xor     edx,edx
 0cfd  83 38 00          L127            cmp     dword ptr [eax],00000000H
 0d00  74 04                             je      L128
 0d02  31 c0                             xor     eax,eax
 0d04  eb 0b                             jmp     L129
 0d06  42                L128            inc     edx
 0d07  83 c0 04                          add     eax,00000004H
 0d0a  83 fa 02                          cmp     edx,00000002H
 0d0d  72 ee                             jb      L127
 0d0f  89 e8                             mov     eax,ebp
 0d11  85 c0             L129            test    eax,eax
 0d13  0f 85 f0 00 00 00                 jne     L137
 0d19  8b 04 24                          mov     eax,[esp]
 0d1c  21 e8                             and     eax,ebp
 0d1e  74 36                             je      L134
 0d20  8d 44 24 20                       lea     eax,+20H[esp]
 0d24  8d 54 24 08                       lea     edx,+8H[esp]
 0d28  31 db                             xor     ebx,ebx
 0d2a  31 f6                             xor     esi,esi
 0d2c  eb 19                             jmp     L133
 0d2e  39 cf             L130            cmp     edi,ecx
 0d30  73 04                             jae     L131
 0d32  89 eb                             mov     ebx,ebp
 0d34  eb 02                             jmp     L132
 0d36  31 db             L131            xor     ebx,ebx
 0d38  83 c2 04          L132            add     edx,00000004H
 0d3b  46                                inc     esi
 0d3c  83 c0 04                          add     eax,00000004H
 0d3f  89 7a fc                          mov     -4H[edx],edi
 0d42  83 fe 02                          cmp     esi,00000002H
 0d45  73 0f                             jae     L134
 0d47  8b 08             L133            mov     ecx,[eax]
 0d49  03 0a                             add     ecx,[edx]
 0d4b  8d 3c 19                          lea     edi,[ecx+ebx]
 0d4e  3b 08                             cmp     ecx,[eax]
 0d50  73 dc                             jae     L130
 0d52  89 eb                             mov     ebx,ebp
 0d54  eb e2                             jmp     L132
 0d56  8d 44 24 18       L134            lea     eax,+18H[esp]
 0d5a  8d 5c 24 2c                       lea     ebx,+2cH[esp]
 0d5e  89 ea                             mov     edx,ebp
 0d60  89 44 24 40                       mov     +40H[esp],eax
 0d64  8d 44 24 28                       lea     eax,+28H[esp]
 0d68  31 f6                             xor     esi,esi
 0d6a  e8 00 00 00 00                    call    near BigInt::BigInt()
 0d6f  8b 44 24 44                       mov     eax,+44H[esp]
 0d73  89 f7             L135            mov     edi,esi
 0d75  8b 08                             mov     ecx,[eax]
 0d77  83 eb 04                          sub     ebx,00000004H
 0d7a  89 ce                             mov     esi,ecx
 0d7c  c1 e7 1f                          shl     edi,1fH
 0d7f  d1 ee                             shr     esi,1
 0d81  83 e8 04                          sub     eax,00000004H
 0d84  09 fe                             or      esi,edi
 0d86  4a                                dec     edx
 0d87  89 73 04                          mov     +4H[ebx],esi
 0d8a  89 ce                             mov     esi,ecx
 0d8c  85 d2                             test    edx,edx
 0d8e  7d e3                             jge     L135
 0d90  8d 54 24 28                       lea     edx,+28H[esp]
 0d94  8d 44 24 18                       lea     eax,+18H[esp]
 0d98  89 e7                             mov     edi,esp
 0d9a  8d 5c 24 30                       lea     ebx,+30H[esp]
 0d9e  e8 00 00 00 00                    call    near BigInt::BigInt( BigInt const near & )
 0da3  8b 74 24 40                       mov     esi,+40H[esp]
 0da7  31 c9                             xor     ecx,ecx
 0da9  8d 44 24 10                       lea     eax,+10H[esp]
 0dad  a5                                movsd   
 0dae  a5                                movsd   
 0daf  89 44 24 38                       mov     +38H[esp],eax
 0db3  8d 44 24 30                       lea     eax,+30H[esp]
 0db7  31 d2                             xor     edx,edx
 0db9  e8 00 00 00 00                    call    near BigInt::BigInt()
 0dbe  8d 44 24 20                       lea     eax,+20H[esp]
 0dc2  83 c3 04          L136            add     ebx,00000004H
 0dc5  42                                inc     edx
 0dc6  8b 38                             mov     edi,[eax]
 0dc8  8b 30                             mov     esi,[eax]
 0dca  83 c0 04                          add     eax,00000004H
 0dcd  01 f6                             add     esi,esi
 0dcf  c1 ef 1f                          shr     edi,1fH
 0dd2  09 ce                             or      esi,ecx
 0dd4  89 f9                             mov     ecx,edi
 0dd6  89 73 fc                          mov     -4H[ebx],esi
 0dd9  83 fa 02                          cmp     edx,00000002H
 0ddc  72 e4                             jb      L136
 0dde  8d 54 24 30                       lea     edx,+30H[esp]
 0de2  8d 44 24 10                       lea     eax,+10H[esp]
 0de6  8d 7c 24 20                       lea     edi,+20H[esp]
 0dea  e8 00 00 00 00                    call    near BigInt::BigInt( BigInt const near & )
 0def  8b 74 24 38                       mov     esi,+38H[esp]
 0df3  a5                                movsd   
 0df4  a5                                movsd   
 0df5  89 e0                             mov     eax,esp
 0df7  31 d2                             xor     edx,edx
 0df9  83 38 00                          cmp     dword ptr [eax],00000000H
 0dfc  0f 84 04 ff ff ff                 je      L128
 0e02  31 c0                             xor     eax,eax
 0e04  e9 08 ff ff ff                    jmp     L129

        return result;
 0e09  8b 7c 24 3c       L137            mov     edi,+3cH[esp]
 0e0d  8d 74 24 08                       lea     esi,+8H[esp]
 0e11  a5                                movsd   
 0e12  a5                                movsd   

}


//time complexity: O(log(a div b))
 0e13  8b 44 24 3c                       mov     eax,+3cH[esp]
 0e17  83 c4 48                          add     esp,00000048H
 0e1a  5d                                pop     ebp
 0e1b  5f                                pop     edi
 0e1c  5e                                pop     esi
 0e1d  59                                pop     ecx
 0e1e  c3                                ret     
 0e1f  90                                nop     

void divmod(const BigInt &A, const BigInt &B, BigInt &q, BigInt &r) {
 0e20                    void near divmod( BigInt const near &, BigInt const near &, BigInt near &, BigInt near & ):
 0e20  56                                push    esi
 0e21  57                                push    edi
 0e22  55                                push    ebp
 0e23  81 ec 84 00 00 00                 sub     esp,00000084H
 0e29  89 c5                             mov     ebp,eax
 0e2b  89 54 24 5c                       mov     +5cH[esp],edx
 0e2f  89 9c 24 80 00 00 
       00                                mov     +80H[esp],ebx
 0e36  89 4c 24 74                       mov     +74H[esp],ecx

        if(B==BigInt(0)) return;        // #@%!

 0e3a  bb 08 00 00 00                    mov     ebx,00000008H
 0e3f  8d 44 24 38                       lea     eax,+38H[esp]
 0e43  31 d2                             xor     edx,edx
 0e45  e8 00 00 00 00                    call    memset_
 0e4a  bb 08 00 00 00                    mov     ebx,00000008H
 0e4f  8b 54 24 5c                       mov     edx,+5cH[esp]
 0e53  8d 44 24 38                       lea     eax,+38H[esp]
 0e57  83 c2 07                          add     edx,00000007H
 0e5a  83 c0 07                          add     eax,00000007H
 0e5d  4b                L138            dec     ebx
 0e5e  83 fb ff                          cmp     ebx,0ffffffffH
 0e61  74 1c                             je      L141
 0e63  8a 0a                             mov     cl,[edx]
 0e65  8a 28                             mov     ch,[eax]
 0e67  38 e9                             cmp     cl,ch
 0e69  73 07                             jae     L139
 0e6b  b9 ff ff ff ff                    mov     ecx,0ffffffffH
 0e70  eb 0f                             jmp     L142
 0e72  76 07             L139            jbe     L140
 0e74  b9 01 00 00 00                    mov     ecx,00000001H
 0e79  eb 06                             jmp     L142
 0e7b  4a                L140            dec     edx
 0e7c  48                                dec     eax
 0e7d  eb de                             jmp     L138
 0e7f  31 c9             L141            xor     ecx,ecx
 0e81  85 c9             L142            test    ecx,ecx
 0e83  0f 94 c0                          sete    al
 0e86  25 ff 00 00 00                    and     eax,000000ffH
 0e8b  0f 85 c5 02 00 00                 jne     L179

        q=0;
 0e91  bb 08 00 00 00                    mov     ebx,00000008H
 0e96  89 e0                             mov     eax,esp
 0e98  8b bc 24 80 00 00 
       00                                mov     edi,+80H[esp]
 0e9f  31 d2                             xor     edx,edx
 0ea1  89 e6                             mov     esi,esp
 0ea3  e8 00 00 00 00                    call    memset_
 0ea8  a5                                movsd   
 0ea9  a5                                movsd   

        r=A;
        BigInt b=B;
 0eaa  8b 7c 24 74                       mov     edi,+74H[esp]
 0eae  89 ee                             mov     esi,ebp
 0eb0  a5                                movsd   
 0eb1  a5                                movsd   

 0eb2  bb 08 00 00 00                    mov     ebx,00000008H

        BigInt k=0;

 0eb7  8d 7c 24 10                       lea     edi,+10H[esp]
 0ebb  8b 74 24 5c                       mov     esi,+5cH[esp]
 0ebf  8d 44 24 18                       lea     eax,+18H[esp]
 0ec3  31 d2                             xor     edx,edx
 0ec5  a5                                movsd   
 0ec6  a5                                movsd   
 0ec7  e8 00 00 00 00                    call    memset_

        while(r>=b) {
 0ecc  8b 44 24 74                       mov     eax,+74H[esp]
 0ed0  83 c0 07                          add     eax,00000007H
 0ed3  89 44 24 6c                       mov     +6cH[esp],eax
 0ed7  8d 44 24 10                       lea     eax,+10H[esp]
 0edb  83 c0 07                          add     eax,00000007H
 0ede  89 44 24 70                       mov     +70H[esp],eax
 0ee2  31 ed                             xor     ebp,ebp
 0ee4  bb 08 00 00 00    L143            mov     ebx,00000008H
 0ee9  8b 54 24 6c                       mov     edx,+6cH[esp]
 0eed  8b 44 24 70                       mov     eax,+70H[esp]
 0ef1  4b                L144            dec     ebx
 0ef2  83 fb ff                          cmp     ebx,0ffffffffH
 0ef5  74 1c                             je      L147
 0ef7  8a 0a                             mov     cl,[edx]
 0ef9  8a 28                             mov     ch,[eax]
 0efb  38 e9                             cmp     cl,ch
 0efd  73 07                             jae     L145
 0eff  b9 ff ff ff ff                    mov     ecx,0ffffffffH
 0f04  eb 0f                             jmp     L148
 0f06  76 07             L145            jbe     L146
 0f08  b9 01 00 00 00                    mov     ecx,00000001H
 0f0d  eb 06                             jmp     L148
 0f0f  4a                L146            dec     edx
 0f10  48                                dec     eax
 0f11  eb de                             jmp     L144
 0f13  89 e9             L147            mov     ecx,ebp
 0f15  85 c9             L148            test    ecx,ecx
 0f17  0f 9d c0                          setge   al
 0f1a  25 ff 00 00 00                    and     eax,000000ffH
 0f1f  74 6b                             je      L153

                b<<=1;
 0f21  8d 44 24 28                       lea     eax,+28H[esp]
 0f25  8d 54 24 20                       lea     edx,+20H[esp]
 0f29  89 eb                             mov     ebx,ebp
 0f2b  89 e9                             mov     ecx,ebp
 0f2d  89 44 24 50                       mov     +50H[esp],eax
 0f31  8d 44 24 10                       lea     eax,+10H[esp]
 0f35  83 c2 04          L149            add     edx,00000004H
 0f38  43                                inc     ebx
 0f39  8b 38                             mov     edi,[eax]
 0f3b  8b 30                             mov     esi,[eax]
 0f3d  83 c0 04                          add     eax,00000004H
 0f40  01 f6                             add     esi,esi
 0f42  c1 ef 1f                          shr     edi,1fH
 0f45  09 ce                             or      esi,ecx
 0f47  89 f9                             mov     ecx,edi
 0f49  89 72 fc                          mov     -4H[edx],esi
 0f4c  83 fb 02                          cmp     ebx,00000002H
 0f4f  73 10                             jae     L151
 0f51  eb e2                             jmp     L149
 0f53  83 c0 04          L150            add     eax,00000004H
 0f56  42                                inc     edx
 0f57  89 68 fc                          mov     -4H[eax],ebp
 0f5a  83 fa 02                          cmp     edx,00000002H
 0f5d  72 1c                             jb      L152
 0f5f  eb 83                             jmp     L143
 0f61  8d 7c 24 28       L151            lea     edi,+28H[esp]
 0f65  8d 74 24 20                       lea     esi,+20H[esp]
 0f69  a5                                movsd   
 0f6a  a5                                movsd   
 0f6b  8d 7c 24 10                       lea     edi,+10H[esp]
 0f6f  8b 74 24 50                       mov     esi,+50H[esp]

                ++k;
        }
 0f73  8d 44 24 18                       lea     eax,+18H[esp]
 0f77  89 ea                             mov     edx,ebp
 0f79  a5                                movsd   
 0f7a  a5                                movsd   
 0f7b  8b 18             L152            mov     ebx,[eax]
 0f7d  83 fb ff                          cmp     ebx,0ffffffffH
 0f80  74 d1                             je      L150
 0f82  8d 4b 01                          lea     ecx,+1H[ebx]
 0f85  89 08                             mov     [eax],ecx
 0f87  e9 58 ff ff ff                    jmp     L143

        while(b!=B) {
 0f8c  8b 44 24 74       L153            mov     eax,+74H[esp]
 0f90  83 c0 07                          add     eax,00000007H
 0f93  89 44 24 60                       mov     +60H[esp],eax
 0f97  8d 44 24 10                       lea     eax,+10H[esp]
 0f9b  83 c0 07                          add     eax,00000007H
 0f9e  89 44 24 7c                       mov     +7cH[esp],eax
 0fa2  8d 44 24 10                       lea     eax,+10H[esp]
 0fa6  83 c0 04                          add     eax,00000004H
 0fa9  89 44 24 68                       mov     +68H[esp],eax
 0fad  8b 44 24 5c                       mov     eax,+5cH[esp]
 0fb1  83 c0 07                          add     eax,00000007H
 0fb4  89 44 24 64                       mov     +64H[esp],eax
 0fb8  bd 01 00 00 00                    mov     ebp,00000001H
 0fbd  bb 08 00 00 00    L154            mov     ebx,00000008H
 0fc2  8b 54 24 7c                       mov     edx,+7cH[esp]
 0fc6  8b 44 24 64                       mov     eax,+64H[esp]
 0fca  4b                L155            dec     ebx
 0fcb  83 fb ff                          cmp     ebx,0ffffffffH
 0fce  74 19                             je      L158
 0fd0  8a 0a                             mov     cl,[edx]
 0fd2  8a 28                             mov     ch,[eax]
 0fd4  38 e9                             cmp     cl,ch
 0fd6  73 07                             jae     L156
 0fd8  b9 ff ff ff ff                    mov     ecx,0ffffffffH
 0fdd  eb 0c                             jmp     L159
 0fdf  76 04             L156            jbe     L157
 0fe1  89 e9                             mov     ecx,ebp
 0fe3  eb 06                             jmp     L159
 0fe5  4a                L157            dec     edx
 0fe6  48                                dec     eax
 0fe7  eb e1                             jmp     L155
 0fe9  31 c9             L158            xor     ecx,ecx
 0feb  85 c9             L159            test    ecx,ecx
 0fed  0f 95 c0                          setne   al
 0ff0  25 ff 00 00 00                    and     eax,000000ffH
 0ff5  0f 84 5b 01 00 00                 je      L179

                q<<=1;
 0ffb  8b 84 24 80 00 00 
       00                                mov     eax,+80H[esp]
 1002  8d 54 24 30                       lea     edx,+30H[esp]
 1006  31 db                             xor     ebx,ebx
 1008  89 44 24 78                       mov     +78H[esp],eax
 100c  8d 44 24 40                       lea     eax,+40H[esp]
 1010  31 c9                             xor     ecx,ecx
 1012  89 44 24 54                       mov     +54H[esp],eax
 1016  8b 84 24 80 00 00 
       00                                mov     eax,+80H[esp]
 101d  83 c2 04          L160            add     edx,00000004H
 1020  43                                inc     ebx
 1021  8b 30                             mov     esi,[eax]
 1023  8b 38                             mov     edi,[eax]
 1025  83 c0 04                          add     eax,00000004H
 1028  01 ff                             add     edi,edi
 102a  c1 ee 1f                          shr     esi,1fH
 102d  09 cf                             or      edi,ecx
 102f  89 f1                             mov     ecx,esi
 1031  89 7a fc                          mov     -4H[edx],edi
 1034  83 fb 02                          cmp     ebx,00000002H
 1037  72 e4                             jb      L160
 1039  8d 7c 24 40                       lea     edi,+40H[esp]
 103d  8d 74 24 30                       lea     esi,+30H[esp]
 1041  a5                                movsd   
 1042  a5                                movsd   
 1043  8b 7c 24 78                       mov     edi,+78H[esp]
 1047  8b 74 24 54                       mov     esi,+54H[esp]

                b>>=1;
 104b  8d 44 24 08                       lea     eax,+8H[esp]
 104f  8d 54 24 4c                       lea     edx,+4cH[esp]
 1053  a5                                movsd   
 1054  a5                                movsd   
 1055  89 eb                             mov     ebx,ebp
 1057  89 44 24 58                       mov     +58H[esp],eax
 105b  31 f6                             xor     esi,esi
 105d  8b 44 24 68                       mov     eax,+68H[esp]
 1061  c1 e6 1f          L161            shl     esi,1fH
 1064  8b 08                             mov     ecx,[eax]
 1066  83 ea 04                          sub     edx,00000004H
 1069  89 cf                             mov     edi,ecx
 106b  83 e8 04                          sub     eax,00000004H
 106e  d1 ef                             shr     edi,1
 1070  4b                                dec     ebx
 1071  09 f7                             or      edi,esi
 1073  89 ce                             mov     esi,ecx
 1075  89 7a 04                          mov     +4H[edx],edi
 1078  85 db                             test    ebx,ebx
 107a  7c 13                             jl      L163
 107c  eb e3                             jmp     L161
 107e  42                L162            inc     edx
 107f  c7 00 ff ff ff ff                 mov     dword ptr [eax],0ffffffffH
 1085  83 c0 04                          add     eax,00000004H
 1088  83 fa 02                          cmp     edx,00000002H
 108b  72 1c                             jb      L164
 108d  eb 25                             jmp     L165
 108f  8d 7c 24 08       L163            lea     edi,+8H[esp]
 1093  8d 74 24 48                       lea     esi,+48H[esp]
 1097  a5                                movsd   
 1098  a5                                movsd   
 1099  8d 7c 24 10                       lea     edi,+10H[esp]
 109d  8b 74 24 58                       mov     esi,+58H[esp]

                --k;
 10a1  8d 44 24 18                       lea     eax,+18H[esp]
 10a5  31 d2                             xor     edx,edx
 10a7  a5                                movsd   
 10a8  a5                                movsd   
 10a9  8b 30             L164            mov     esi,[eax]
 10ab  85 f6                             test    esi,esi
 10ad  74 cf                             je      L162
 10af  8d 7e ff                          lea     edi,-1H[esi]
 10b2  89 38                             mov     [eax],edi

                if(r>=b) {
 10b4  bb 08 00 00 00    L165            mov     ebx,00000008H
 10b9  8b 44 24 60                       mov     eax,+60H[esp]
 10bd  8b 54 24 7c                       mov     edx,+7cH[esp]
 10c1  4b                L166            dec     ebx
 10c2  83 fb ff                          cmp     ebx,0ffffffffH
 10c5  74 19                             je      L169
 10c7  8a 08                             mov     cl,[eax]
 10c9  8a 2a                             mov     ch,[edx]
 10cb  38 e9                             cmp     cl,ch
 10cd  73 07                             jae     L167
 10cf  b9 ff ff ff ff                    mov     ecx,0ffffffffH
 10d4  eb 0c                             jmp     L170
 10d6  76 04             L167            jbe     L168
 10d8  89 e9                             mov     ecx,ebp
 10da  eb 06                             jmp     L170
 10dc  48                L168            dec     eax
 10dd  4a                                dec     edx
 10de  eb e1                             jmp     L166
 10e0  31 c9             L169            xor     ecx,ecx
 10e2  85 c9             L170            test    ecx,ecx
 10e4  0f 9d c0                          setge   al
 10e7  25 ff 00 00 00                    and     eax,000000ffH
 10ec  75 16                             jne     L172
 10ee  e9 ca fe ff ff                    jmp     L154

                        ++q;
 10f3  42                L171            inc     edx
 10f4  c7 00 00 00 00 00                 mov     dword ptr [eax],00000000H
 10fa  83 c0 04                          add     eax,00000004H
 10fd  83 fa 02                          cmp     edx,00000002H
 1100  72 0b                             jb      L173
 1102  eb 15                             jmp     L174
 1104  8b 84 24 80 00 00 
       00                L172            mov     eax,+80H[esp]
 110b  31 d2                             xor     edx,edx
 110d  8b 18             L173            mov     ebx,[eax]
 110f  83 fb ff                          cmp     ebx,0ffffffffH
 1112  74 df                             je      L171
 1114  8d 4b 01                          lea     ecx,+1H[ebx]
 1117  89 08                             mov     [eax],ecx

                        r-=b;
                }
        }
 1119  8d 74 24 10       L174            lea     esi,+10H[esp]
 111d  8b 44 24 74                       mov     eax,+74H[esp]
 1121  31 d2                             xor     edx,edx
 1123  31 c9                             xor     ecx,ecx
 1125  eb 1d                             jmp     L178
 1127  39 df             L175            cmp     edi,ebx
 1129  76 04                             jbe     L176
 112b  89 ea                             mov     edx,ebp
 112d  eb 02                             jmp     L177
 112f  31 d2             L176            xor     edx,edx
 1131  83 c0 04          L177            add     eax,00000004H
 1134  41                                inc     ecx
 1135  83 c6 04                          add     esi,00000004H
 1138  89 78 fc                          mov     -4H[eax],edi
 113b  83 f9 02                          cmp     ecx,00000002H
 113e  0f 83 79 fe ff ff                 jae     L154
 1144  8b 18             L178            mov     ebx,[eax]
 1146  8b 3e                             mov     edi,[esi]
 1148  29 fb                             sub     ebx,edi
 114a  89 df                             mov     edi,ebx
 114c  29 d7                             sub     edi,edx
 114e  3b 18                             cmp     ebx,[eax]
 1150  76 d5                             jbe     L175
 1152  89 ea                             mov     edx,ebp
 1154  eb db                             jmp     L177

}


//pre-condition: a>=0 && b>=0         <-----------------------------!!!!!
//time complexity: O(log B)
 1156  81 c4 84 00 00 00 L179            add     esp,00000084H
 115c  5d                                pop     ebp
 115d  5f                                pop     edi
 115e  5e                                pop     esi
 115f  c3                                ret     

BigInt pow(const BigInt &A, const BigInt &B) {
 1160                    BigInt near pow( BigInt const near &, BigInt const near & ):
 1160  51                                push    ecx
 1161  56                                push    esi
 1162  57                                push    edi
 1163  55                                push    ebp
 1164  81 ec ac 00 00 00                 sub     esp,000000acH
 116a  89 84 24 88 00 00 
       00                                mov     +88H[esp],eax
 1171  89 d6                             mov     esi,edx
 1173  89 d9                             mov     ecx,ebx

        BigInt result=1,x=A,y=B;
 1175  bb 08 00 00 00                    mov     ebx,00000008H
 117a  8d 44 24 28                       lea     eax,+28H[esp]
 117e  31 d2                             xor     edx,edx
 1180  8d bc 24 80 00 00 
       00                                lea     edi,+80H[esp]
 1187  e8 00 00 00 00                    call    memset_
 118c  8d 44 24 10                       lea     eax,+10H[esp]
 1190  ba 01 00 00 00                    mov     edx,00000001H
 1195  83 c0 04                          add     eax,00000004H
 1198  89 54 24 28                       mov     +28H[esp],edx
 119c  89 84 24 a8 00 00 
       00                                mov     +0a8H[esp],eax
 11a3  8d 44 24 38                       lea     eax,+38H[esp]
 11a7  a5                                movsd   
 11a8  a5                                movsd   
 11a9  83 c0 04                          add     eax,00000004H
 11ac  8d 7c 24 38                       lea     edi,+38H[esp]
 11b0  89 84 24 a0 00 00 
       00                                mov     +0a0H[esp],eax
 11b7  8d 44 24 68                       lea     eax,+68H[esp]
 11bb  89 ce                             mov     esi,ecx
 11bd  83 c0 04                          add     eax,00000004H
 11c0  a5                                movsd   
 11c1  a5                                movsd   
 11c2  89 84 24 a4 00 00 
       00                                mov     +0a4H[esp],eax

        while(!y.IsZero()) {
 11c9  89 d5                             mov     ebp,edx
 11cb  8d 44 24 38       L180            lea     eax,+38H[esp]
 11cf  31 d2                             xor     edx,edx
 11d1  83 38 00          L181            cmp     dword ptr [eax],00000000H
 11d4  74 04                             je      L182
 11d6  31 c0                             xor     eax,eax
 11d8  eb 0b                             jmp     L183
 11da  42                L182            inc     edx
 11db  83 c0 04                          add     eax,00000004H
 11de  83 fa 02                          cmp     edx,00000002H
 11e1  72 ee                             jb      L181
 11e3  89 e8                             mov     eax,ebp
 11e5  85 c0             L183            test    eax,eax
 11e7  0f 85 0a 03 00 00                 jne     L212

                if(y.IsEven()) {
 11ed  8b 44 24 38                       mov     eax,+38H[esp]
 11f1  21 e8                             and     eax,ebp
 11f3  0f 94 c0                          sete    al
 11f6  25 ff 00 00 00                    and     eax,000000ffH
 11fb  0f 84 96 01 00 00                 je      L197

                        x*=x;
 1201  8d 7c 24 08                       lea     edi,+8H[esp]
 1205  8d b4 24 80 00 00 
       00                                lea     esi,+80H[esp]
 120c  a5                                movsd   
 120d  a5                                movsd   
 120e  bb 08 00 00 00                    mov     ebx,00000008H
 1213  8d 7c 24 10                       lea     edi,+10H[esp]
 1217  8d b4 24 80 00 00 
       00                                lea     esi,+80H[esp]
 121e  8d 84 24 80 00 00 
       00                                lea     eax,+80H[esp]
 1225  31 d2                             xor     edx,edx
 1227  a5                                movsd   
 1228  a5                                movsd   
 1229  e8 00 00 00 00                    call    memset_
 122e  8d 54 24 10       L184            lea     edx,+10H[esp]
 1232  31 c0                             xor     eax,eax
 1234  83 3a 00          L185            cmp     dword ptr [edx],00000000H
 1237  74 04                             je      L186
 1239  31 c0                             xor     eax,eax
 123b  eb 0b                             jmp     L187
 123d  40                L186            inc     eax
 123e  83 c2 04                          add     edx,00000004H
 1241  83 f8 02                          cmp     eax,00000002H
 1244  72 ee                             jb      L185
 1246  89 e8                             mov     eax,ebp
 1248  85 c0             L187            test    eax,eax
 124a  0f 85 f4 00 00 00                 jne     L195
 1250  8b 44 24 10                       mov     eax,+10H[esp]
 1254  21 e8                             and     eax,ebp
 1256  74 39                             je      L192
 1258  8d 44 24 08                       lea     eax,+8H[esp]
 125c  8d 94 24 80 00 00 
       00                                lea     edx,+80H[esp]
 1263  31 db                             xor     ebx,ebx
 1265  31 f6                             xor     esi,esi
 1267  eb 19                             jmp     L191
 1269  39 cf             L188            cmp     edi,ecx
 126b  73 04                             jae     L189
 126d  89 eb                             mov     ebx,ebp
 126f  eb 02                             jmp     L190
 1271  31 db             L189            xor     ebx,ebx
 1273  83 c2 04          L190            add     edx,00000004H
 1276  46                                inc     esi
 1277  83 c0 04                          add     eax,00000004H
 127a  89 7a fc                          mov     -4H[edx],edi
 127d  83 fe 02                          cmp     esi,00000002H
 1280  73 0f                             jae     L192
 1282  8b 08             L191            mov     ecx,[eax]
 1284  03 0a                             add     ecx,[edx]
 1286  8d 3c 19                          lea     edi,[ecx+ebx]
 1289  3b 08                             cmp     ecx,[eax]
 128b  73 dc                             jae     L188
 128d  89 eb                             mov     ebx,ebp
 128f  eb e2                             jmp     L190
 1291  8d 44 24 20       L192            lea     eax,+20H[esp]
 1295  8d 5c 24 44                       lea     ebx,+44H[esp]
 1299  89 ea                             mov     edx,ebp
 129b  89 84 24 8c 00 00 
       00                                mov     +8cH[esp],eax
 12a2  8d 44 24 40                       lea     eax,+40H[esp]
 12a6  31 f6                             xor     esi,esi
 12a8  e8 00 00 00 00                    call    near BigInt::BigInt()
 12ad  8b 84 24 a8 00 00 
       00                                mov     eax,+0a8H[esp]
 12b4  c1 e6 1f          L193            shl     esi,1fH
 12b7  8b 08                             mov     ecx,[eax]
 12b9  83 eb 04                          sub     ebx,00000004H
 12bc  89 cf                             mov     edi,ecx
 12be  83 e8 04                          sub     eax,00000004H
 12c1  d1 ef                             shr     edi,1
 12c3  4a                                dec     edx
 12c4  09 f7                             or      edi,esi
 12c6  89 ce                             mov     esi,ecx
 12c8  89 7b 04                          mov     +4H[ebx],edi
 12cb  85 d2                             test    edx,edx
 12cd  7d e5                             jge     L193
 12cf  8d 54 24 40                       lea     edx,+40H[esp]
 12d3  8d 44 24 20                       lea     eax,+20H[esp]
 12d7  8d 7c 24 10                       lea     edi,+10H[esp]
 12db  e8 00 00 00 00                    call    near BigInt::BigInt( BigInt const near & )
 12e0  31 db                             xor     ebx,ebx
 12e2  8b b4 24 8c 00 00 
       00                                mov     esi,+8cH[esp]
 12e9  31 c9                             xor     ecx,ecx
 12eb  8d 44 24 58                       lea     eax,+58H[esp]
 12ef  a5                                movsd   
 12f0  a5                                movsd   
 12f1  89 84 24 90 00 00 
       00                                mov     +90H[esp],eax
 12f8  8d 44 24 18                       lea     eax,+18H[esp]
 12fc  8d 54 24 18                       lea     edx,+18H[esp]
 1300  e8 00 00 00 00                    call    near BigInt::BigInt()
 1305  8d 44 24 08                       lea     eax,+8H[esp]
 1309  83 c2 04          L194            add     edx,00000004H
 130c  43                                inc     ebx
 130d  8b 30                             mov     esi,[eax]
 130f  8b 38                             mov     edi,[eax]
 1311  83 c0 04                          add     eax,00000004H
 1314  01 ff                             add     edi,edi
 1316  c1 ee 1f                          shr     esi,1fH
 1319  09 cf                             or      edi,ecx
 131b  89 f1                             mov     ecx,esi
 131d  89 7a fc                          mov     -4H[edx],edi
 1320  83 fb 02                          cmp     ebx,00000002H
 1323  72 e4                             jb      L194
 1325  8d 54 24 18                       lea     edx,+18H[esp]
 1329  8d 44 24 58                       lea     eax,+58H[esp]
 132d  8d 7c 24 08                       lea     edi,+8H[esp]
 1331  e8 00 00 00 00                    call    near BigInt::BigInt( BigInt const near & )
 1336  8b b4 24 90 00 00 
       00                                mov     esi,+90H[esp]
 133d  a5                                movsd   
 133e  a5                                movsd   
 133f  e9 ea fe ff ff                    jmp     L184

                        y>>=1;
 1344  8d 44 24 30       L195            lea     eax,+30H[esp]
 1348  8d 5c 24 7c                       lea     ebx,+7cH[esp]
 134c  89 ee                             mov     esi,ebp
 134e  31 c9                             xor     ecx,ecx
 1350  89 84 24 94 00 00 
       00                                mov     +94H[esp],eax
 1357  8b 84 24 a0 00 00 
       00                                mov     eax,+0a0H[esp]
 135e  89 cf             L196            mov     edi,ecx
 1360  8b 10                             mov     edx,[eax]
 1362  83 eb 04                          sub     ebx,00000004H
 1365  89 d1                             mov     ecx,edx
 1367  c1 e7 1f                          shl     edi,1fH
 136a  d1 e9                             shr     ecx,1
 136c  83 e8 04                          sub     eax,00000004H
 136f  09 f9                             or      ecx,edi
 1371  4e                                dec     esi
 1372  89 4b 04                          mov     +4H[ebx],ecx
 1375  89 d1                             mov     ecx,edx
 1377  85 f6                             test    esi,esi
 1379  7d e3                             jge     L196
 137b  8d 7c 24 30                       lea     edi,+30H[esp]
 137f  8d 74 24 78                       lea     esi,+78H[esp]
 1383  a5                                movsd   
 1384  a5                                movsd   
 1385  8d 7c 24 38                       lea     edi,+38H[esp]
 1389  8b b4 24 94 00 00 
       00                                mov     esi,+94H[esp]
 1390  a5                                movsd   
 1391  a5                                movsd   

                } else {
 1392  e9 34 fe ff ff                    jmp     L180

                        result*=x;
 1397  8d 7c 24 48       L197            lea     edi,+48H[esp]
 139b  8d 74 24 28                       lea     esi,+28H[esp]
 139f  a5                                movsd   
 13a0  a5                                movsd   
 13a1  bb 08 00 00 00                    mov     ebx,00000008H
 13a6  8d 7c 24 68                       lea     edi,+68H[esp]
 13aa  8d b4 24 80 00 00 
       00                                lea     esi,+80H[esp]
 13b1  8d 44 24 28                       lea     eax,+28H[esp]
 13b5  31 d2                             xor     edx,edx
 13b7  a5                                movsd   
 13b8  a5                                movsd   
 13b9  e8 00 00 00 00                    call    memset_
 13be  8d 44 24 68       L198            lea     eax,+68H[esp]
 13c2  31 d2                             xor     edx,edx
 13c4  83 38 00          L199            cmp     dword ptr [eax],00000000H
 13c7  74 04                             je      L200
 13c9  31 c0                             xor     eax,eax
 13cb  eb 0b                             jmp     L201
 13cd  42                L200            inc     edx
 13ce  83 c0 04                          add     eax,00000004H
 13d1  83 fa 02                          cmp     edx,00000002H
 13d4  72 ee                             jb      L199
 13d6  89 e8                             mov     eax,ebp
 13d8  85 c0             L201            test    eax,eax
 13da  0f 85 01 01 00 00                 jne     L210
 13e0  8b 44 24 68                       mov     eax,+68H[esp]
 13e4  21 e8                             and     eax,ebp
 13e6  74 36                             je      L206
 13e8  8d 54 24 48                       lea     edx,+48H[esp]
 13ec  8d 5c 24 28                       lea     ebx,+28H[esp]
 13f0  31 c0                             xor     eax,eax
 13f2  31 f6                             xor     esi,esi
 13f4  eb 19                             jmp     L205
 13f6  39 cf             L202            cmp     edi,ecx
 13f8  73 04                             jae     L203
 13fa  89 e8                             mov     eax,ebp
 13fc  eb 02                             jmp     L204
 13fe  31 c0             L203            xor     eax,eax
 1400  83 c3 04          L204            add     ebx,00000004H
 1403  46                                inc     esi
 1404  83 c2 04                          add     edx,00000004H
 1407  89 7b fc                          mov     -4H[ebx],edi
 140a  83 fe 02                          cmp     esi,00000002H
 140d  73 0f                             jae     L206
 140f  8b 0a             L205            mov     ecx,[edx]
 1411  03 0b                             add     ecx,[ebx]
 1413  8d 3c 01                          lea     edi,[ecx+eax]
 1416  3b 0a                             cmp     ecx,[edx]
 1418  73 dc                             jae     L202
 141a  89 e8                             mov     eax,ebp
 141c  eb e2                             jmp     L204
 141e  8d 44 24 50       L206            lea     eax,+50H[esp]
 1422  8d 54 24 64                       lea     edx,+64H[esp]
 1426  89 eb                             mov     ebx,ebp
 1428  89 84 24 98 00 00 
       00                                mov     +98H[esp],eax
 142f  8d 44 24 60                       lea     eax,+60H[esp]
 1433  31 f6                             xor     esi,esi
 1435  e8 00 00 00 00                    call    near BigInt::BigInt()
 143a  8b 84 24 a4 00 00 
       00                                mov     eax,+0a4H[esp]
 1441  89 f7             L207            mov     edi,esi
 1443  8b 08                             mov     ecx,[eax]
 1445  83 ea 04                          sub     edx,00000004H
 1448  89 ce                             mov     esi,ecx
 144a  c1 e7 1f                          shl     edi,1fH
 144d  d1 ee                             shr     esi,1
 144f  83 e8 04                          sub     eax,00000004H
 1452  09 fe                             or      esi,edi
 1454  4b                                dec     ebx
 1455  89 72 04                          mov     +4H[edx],esi
 1458  89 ce                             mov     esi,ecx
 145a  85 db                             test    ebx,ebx
 145c  7d e3                             jge     L207
 145e  8d 54 24 60                       lea     edx,+60H[esp]
 1462  8d 44 24 50                       lea     eax,+50H[esp]
 1466  8d 7c 24 68                       lea     edi,+68H[esp]
 146a  89 e3                             mov     ebx,esp
 146c  e8 00 00 00 00                    call    near BigInt::BigInt( BigInt const near & )
 1471  8b b4 24 98 00 00 
       00                                mov     esi,+98H[esp]
 1478  31 c9                             xor     ecx,ecx
 147a  8d 44 24 70                       lea     eax,+70H[esp]
 147e  a5                                movsd   
 147f  a5                                movsd   
 1480  89 84 24 9c 00 00 
       00                                mov     +9cH[esp],eax
 1487  89 e0                             mov     eax,esp
 1489  31 d2                             xor     edx,edx
 148b  e8 00 00 00 00                    call    near BigInt::BigInt()
 1490  8d 44 24 48                       lea     eax,+48H[esp]
 1494  83 c3 04          L208            add     ebx,00000004H
 1497  42                                inc     edx
 1498  8b 30                             mov     esi,[eax]
 149a  8b 38                             mov     edi,[eax]
 149c  83 c0 04                          add     eax,00000004H
 149f  01 ff                             add     edi,edi
 14a1  c1 ee 1f                          shr     esi,1fH
 14a4  09 cf                             or      edi,ecx
 14a6  89 f1                             mov     ecx,esi
 14a8  89 7b fc                          mov     -4H[ebx],edi
 14ab  83 fa 02                          cmp     edx,00000002H
 14ae  72 e4                             jb      L208
 14b0  89 e2                             mov     edx,esp
 14b2  8d 44 24 70                       lea     eax,+70H[esp]
 14b6  8d 7c 24 48                       lea     edi,+48H[esp]
 14ba  e8 00 00 00 00                    call    near BigInt::BigInt( BigInt const near & )
 14bf  8b b4 24 9c 00 00 
       00                                mov     esi,+9cH[esp]
 14c6  a5                                movsd   
 14c7  a5                                movsd   
 14c8  e9 f1 fe ff ff                    jmp     L198
 14cd  46                L209            inc     esi
 14ce  c7 00 ff ff ff ff                 mov     dword ptr [eax],0ffffffffH
 14d4  83 c0 04                          add     eax,00000004H
 14d7  83 fe 02                          cmp     esi,00000002H
 14da  72 0b                             jb      L211
 14dc  e9 ea fc ff ff                    jmp     L180

                        --y;
                }
        }
 14e1  8d 44 24 38       L210            lea     eax,+38H[esp]
 14e5  31 f6                             xor     esi,esi
 14e7  8b 10             L211            mov     edx,[eax]
 14e9  85 d2                             test    edx,edx
 14eb  74 e0                             je      L209
 14ed  8d 5a ff                          lea     ebx,-1H[edx]
 14f0  89 18                             mov     [eax],ebx
 14f2  e9 d4 fc ff ff                    jmp     L180

        return result;
 14f7  8b bc 24 88 00 00 
       00                L212            mov     edi,+88H[esp]
 14fe  8d 74 24 28                       lea     esi,+28H[esp]
 1502  a5                                movsd   
 1503  a5                                movsd   

}


 1504  8b 84 24 88 00 00 
       00                                mov     eax,+88H[esp]
 150b  81 c4 ac 00 00 00                 add     esp,000000acH
 1511  5d                                pop     ebp
 1512  5f                                pop     edi
 1513  5e                                pop     esi
 1514  59                                pop     ecx
 1515  c3                                ret     
 1516  8b c0                             mov     eax,eax

BigInt operator/(const BigInt &a, const BigInt &b) {
 1518                    BigInt near operator /( BigInt const near &, BigInt const near & ):
 1518  51                                push    ecx
 1519  56                                push    esi
 151a  57                                push    edi
 151b  55                                push    ebp
 151c  83 ec 5c                          sub     esp,0000005cH
 151f  89 44 24 50                       mov     +50H[esp],eax
 1523  89 dd                             mov     ebp,ebx

        BigInt result=a;
 1525  89 e7                             mov     edi,esp
 1527  89 d6                             mov     esi,edx
 1529  8d 44 24 48                       lea     eax,+48H[esp]
 152d  a5                                movsd   
 152e  a5                                movsd   
 152f  89 5c 24 54                       mov     +54H[esp],ebx

        result/=b;
 1533  8d 7c 24 30                       lea     edi,+30H[esp]
 1537  89 e6                             mov     esi,esp
 1539  bb 08 00 00 00                    mov     ebx,00000008H
 153e  31 d2                             xor     edx,edx
 1540  a5                                movsd   
 1541  a5                                movsd   
 1542  e8 00 00 00 00                    call    memset_
 1547  bb 08 00 00 00                    mov     ebx,00000008H
 154c  8d 54 24 48                       lea     edx,+48H[esp]
 1550  89 e8                             mov     eax,ebp
 1552  89 e1                             mov     ecx,esp
 1554  e8 00 00 00 00                    call    int near memcmprvs( void const near *, void const near *, int unsigned )
 1559  85 c0                             test    eax,eax
 155b  0f 94 c0                          sete    al
 155e  25 ff 00 00 00                    and     eax,000000ffH
 1563  0f 85 57 01 00 00                 jne     L219
 1569  bb 08 00 00 00                    mov     ebx,00000008H
 156e  8d 44 24 40                       lea     eax,+40H[esp]
 1572  89 e7                             mov     edi,esp
 1574  31 d2                             xor     edx,edx
 1576  8d 74 24 40                       lea     esi,+40H[esp]
 157a  e8 00 00 00 00                    call    memset_
 157f  a5                                movsd   
 1580  a5                                movsd   
 1581  8d 7c 24 20                       lea     edi,+20H[esp]
 1585  8d 74 24 30                       lea     esi,+30H[esp]
 1589  bb 08 00 00 00                    mov     ebx,00000008H
 158e  a5                                movsd   
 158f  a5                                movsd   
 1590  8d 44 24 10                       lea     eax,+10H[esp]
 1594  8d 7c 24 08                       lea     edi,+8H[esp]
 1598  89 ee                             mov     esi,ebp
 159a  31 d2                             xor     edx,edx
 159c  bd 01 00 00 00                    mov     ebp,00000001H
 15a1  a5                                movsd   
 15a2  a5                                movsd   
 15a3  e8 00 00 00 00                    call    memset_
 15a8  be 08 00 00 00                    mov     esi,00000008H
 15ad  8d 54 24 08       L213            lea     edx,+8H[esp]
 15b1  8d 44 24 20                       lea     eax,+20H[esp]
 15b5  89 f3                             mov     ebx,esi
 15b7  e8 00 00 00 00                    call    int near memcmprvs( void const near *, void const near *, int unsigned )
 15bc  85 c0                             test    eax,eax
 15be  0f 9d c0                          setge   al
 15c1  25 ff 00 00 00                    and     eax,000000ffH
 15c6  74 25                             je      L214
 15c8  8d 54 24 08                       lea     edx,+8H[esp]
 15cc  8d 44 24 38                       lea     eax,+38H[esp]
 15d0  89 eb                             mov     ebx,ebp
 15d2  e8 00 00 00 00                    call    BigInt near operator <<( BigInt const near &, int unsigned )
 15d7  89 c2                             mov     edx,eax
 15d9  8d 44 24 08                       lea     eax,+8H[esp]
 15dd  e8 00 00 00 00                    call    BigInt near & near BigInt::operator =( BigInt const near & )
 15e2  8d 44 24 10                       lea     eax,+10H[esp]
 15e6  e8 00 00 00 00                    call    void near BigInt::incr()
 15eb  eb c0                             jmp     L213
 15ed  bb 08 00 00 00    L214            mov     ebx,00000008H
 15f2  8b 54 24 54                       mov     edx,+54H[esp]
 15f6  8d 44 24 08                       lea     eax,+8H[esp]
 15fa  e8 00 00 00 00                    call    int near memcmprvs( void const near *, void const near *, int unsigned )
 15ff  85 c0                             test    eax,eax
 1601  0f 95 c0                          setne   al
 1604  25 ff 00 00 00                    and     eax,000000ffH
 1609  0f 84 b1 00 00 00                 je      L219
 160f  bb 01 00 00 00                    mov     ebx,00000001H
 1614  8d 44 24 28                       lea     eax,+28H[esp]
 1618  89 ca                             mov     edx,ecx
 161a  e8 00 00 00 00                    call    BigInt near operator <<( BigInt const near &, int unsigned )
 161f  89 c2                             mov     edx,eax
 1621  89 c8                             mov     eax,ecx
 1623  bb 01 00 00 00                    mov     ebx,00000001H
 1628  e8 00 00 00 00                    call    BigInt near & near BigInt::operator =( BigInt const near & )
 162d  8d 54 24 08                       lea     edx,+8H[esp]
 1631  8d 44 24 18                       lea     eax,+18H[esp]
 1635  e8 00 00 00 00                    call    BigInt near operator >>( BigInt const near &, int unsigned )
 163a  89 c2                             mov     edx,eax
 163c  8d 44 24 08                       lea     eax,+8H[esp]
 1640  bb 08 00 00 00                    mov     ebx,00000008H
 1645  e8 00 00 00 00                    call    BigInt near & near BigInt::operator =( BigInt const near & )
 164a  8d 44 24 10                       lea     eax,+10H[esp]
 164e  8d 54 24 08                       lea     edx,+8H[esp]
 1652  e8 00 00 00 00                    call    void near BigInt::decr()
 1657  8d 44 24 20                       lea     eax,+20H[esp]
 165b  e8 00 00 00 00                    call    int near memcmprvs( void const near *, void const near *, int unsigned )
 1660  85 c0                             test    eax,eax
 1662  0f 9d c0                          setge   al
 1665  25 ff 00 00 00                    and     eax,000000ffH
 166a  74 81                             je      L214
 166c  89 c8                             mov     eax,ecx
 166e  8d 7c 24 08                       lea     edi,+8H[esp]
 1672  e8 00 00 00 00                    call    void near BigInt::incr()
 1677  31 d2                             xor     edx,edx
 1679  31 f6                             xor     esi,esi
 167b  8d 44 24 20                       lea     eax,+20H[esp]
 167f  eb 24                             jmp     L218
 1681  39 eb             L215            cmp     ebx,ebp
 1683  73 07                             jae     L216
 1685  ba 01 00 00 00                    mov     edx,00000001H
 168a  eb 02                             jmp     L217
 168c  31 d2             L216            xor     edx,edx
 168e  8b 5c 24 58       L217            mov     ebx,+58H[esp]
 1692  83 c0 04                          add     eax,00000004H
 1695  46                                inc     esi
 1696  83 c7 04                          add     edi,00000004H
 1699  89 58 fc                          mov     -4H[eax],ebx
 169c  83 fe 02                          cmp     esi,00000002H
 169f  0f 83 48 ff ff ff                 jae     L214
 16a5  8b 18             L218            mov     ebx,[eax]
 16a7  8b 2f                             mov     ebp,[edi]
 16a9  29 eb                             sub     ebx,ebp
 16ab  89 dd                             mov     ebp,ebx
 16ad  29 d5                             sub     ebp,edx
 16af  8b 10                             mov     edx,[eax]
 16b1  89 6c 24 58                       mov     +58H[esp],ebp
 16b5  39 d3                             cmp     ebx,edx
 16b7  76 c8                             jbe     L215
 16b9  ba 01 00 00 00                    mov     edx,00000001H
 16be  eb ce                             jmp     L217

        return result;
 16c0  8b 7c 24 50       L219            mov     edi,+50H[esp]
 16c4  89 e6                             mov     esi,esp
 16c6  a5                                movsd   
 16c7  a5                                movsd   

}

 16c8  8b 44 24 50                       mov     eax,+50H[esp]
 16cc  83 c4 5c                          add     esp,0000005cH
 16cf  5d                                pop     ebp
 16d0  5f                                pop     edi
 16d1  5e                                pop     esi
 16d2  59                                pop     ecx
 16d3  c3                                ret     

BigInt operator%(const BigInt &a, const BigInt &b) {
 16d4                    BigInt near operator %( BigInt const near &, BigInt const near & ):
 16d4  51                                push    ecx
 16d5  56                                push    esi
 16d6  57                                push    edi
 16d7  55                                push    ebp
 16d8  83 ec 58                          sub     esp,00000058H
 16db  89 44 24 50                       mov     +50H[esp],eax
 16df  89 d9                             mov     ecx,ebx

        BigInt result=a;
 16e1  89 e7                             mov     edi,esp
 16e3  89 d6                             mov     esi,edx
 16e5  8d 44 24 48                       lea     eax,+48H[esp]
 16e9  a5                                movsd   
 16ea  a5                                movsd   
 16eb  89 5c 24 54                       mov     +54H[esp],ebx

        result%=b;
 16ef  8d 7c 24 30                       lea     edi,+30H[esp]
 16f3  89 e6                             mov     esi,esp
 16f5  bb 08 00 00 00                    mov     ebx,00000008H
 16fa  31 d2                             xor     edx,edx
 16fc  a5                                movsd   
 16fd  a5                                movsd   
 16fe  e8 00 00 00 00                    call    memset_
 1703  bb 08 00 00 00                    mov     ebx,00000008H
 1708  8d 54 24 48                       lea     edx,+48H[esp]
 170c  89 c8                             mov     eax,ecx
 170e  89 e5                             mov     ebp,esp
 1710  e8 00 00 00 00                    call    int near memcmprvs( void const near *, void const near *, int unsigned )
 1715  85 c0                             test    eax,eax
 1717  0f 94 c0                          sete    al
 171a  25 ff 00 00 00                    and     eax,000000ffH
 171f  0f 85 51 01 00 00                 jne     L226
 1725  bb 08 00 00 00                    mov     ebx,00000008H
 172a  8d 44 24 40                       lea     eax,+40H[esp]
 172e  8d 7c 24 20                       lea     edi,+20H[esp]
 1732  31 d2                             xor     edx,edx
 1734  8d 74 24 40                       lea     esi,+40H[esp]
 1738  e8 00 00 00 00                    call    memset_
 173d  a5                                movsd   
 173e  a5                                movsd   
 173f  89 e7                             mov     edi,esp
 1741  8d 74 24 30                       lea     esi,+30H[esp]
 1745  bb 08 00 00 00                    mov     ebx,00000008H
 174a  a5                                movsd   
 174b  a5                                movsd   
 174c  8d 44 24 10                       lea     eax,+10H[esp]
 1750  8d 7c 24 08                       lea     edi,+8H[esp]
 1754  89 ce                             mov     esi,ecx
 1756  31 d2                             xor     edx,edx
 1758  b9 08 00 00 00                    mov     ecx,00000008H
 175d  a5                                movsd   
 175e  a5                                movsd   
 175f  e8 00 00 00 00                    call    memset_
 1764  bf 01 00 00 00                    mov     edi,00000001H
 1769  8d 54 24 08       L220            lea     edx,+8H[esp]
 176d  89 cb                             mov     ebx,ecx
 176f  89 e8                             mov     eax,ebp
 1771  e8 00 00 00 00                    call    int near memcmprvs( void const near *, void const near *, int unsigned )
 1776  85 c0                             test    eax,eax
 1778  0f 9d c0                          setge   al
 177b  25 ff 00 00 00                    and     eax,000000ffH
 1780  74 25                             je      L221
 1782  8d 54 24 08                       lea     edx,+8H[esp]
 1786  8d 44 24 38                       lea     eax,+38H[esp]
 178a  89 fb                             mov     ebx,edi
 178c  e8 00 00 00 00                    call    BigInt near operator <<( BigInt const near &, int unsigned )
 1791  89 c2                             mov     edx,eax
 1793  8d 44 24 08                       lea     eax,+8H[esp]
 1797  e8 00 00 00 00                    call    BigInt near & near BigInt::operator =( BigInt const near & )
 179c  8d 44 24 10                       lea     eax,+10H[esp]
 17a0  e8 00 00 00 00                    call    void near BigInt::incr()
 17a5  eb c2                             jmp     L220
 17a7  bb 08 00 00 00    L221            mov     ebx,00000008H
 17ac  8b 54 24 54                       mov     edx,+54H[esp]
 17b0  8d 44 24 08                       lea     eax,+8H[esp]
 17b4  e8 00 00 00 00                    call    int near memcmprvs( void const near *, void const near *, int unsigned )
 17b9  85 c0                             test    eax,eax
 17bb  0f 95 c0                          setne   al
 17be  25 ff 00 00 00                    and     eax,000000ffH
 17c3  0f 84 ad 00 00 00                 je      L226
 17c9  bb 01 00 00 00                    mov     ebx,00000001H
 17ce  8d 54 24 20                       lea     edx,+20H[esp]
 17d2  8d 44 24 28                       lea     eax,+28H[esp]
 17d6  e8 00 00 00 00                    call    BigInt near operator <<( BigInt const near &, int unsigned )
 17db  89 c2                             mov     edx,eax
 17dd  8d 44 24 20                       lea     eax,+20H[esp]
 17e1  bb 01 00 00 00                    mov     ebx,00000001H
 17e6  e8 00 00 00 00                    call    BigInt near & near BigInt::operator =( BigInt const near & )
 17eb  8d 54 24 08                       lea     edx,+8H[esp]
 17ef  8d 44 24 18                       lea     eax,+18H[esp]
 17f3  e8 00 00 00 00                    call    BigInt near operator >>( BigInt const near &, int unsigned )
 17f8  89 c2                             mov     edx,eax
 17fa  8d 44 24 08                       lea     eax,+8H[esp]
 17fe  bb 08 00 00 00                    mov     ebx,00000008H
 1803  e8 00 00 00 00                    call    BigInt near & near BigInt::operator =( BigInt const near & )
 1808  8d 44 24 10                       lea     eax,+10H[esp]
 180c  8d 54 24 08                       lea     edx,+8H[esp]
 1810  e8 00 00 00 00                    call    void near BigInt::decr()
 1815  89 e8                             mov     eax,ebp
 1817  e8 00 00 00 00                    call    int near memcmprvs( void const near *, void const near *, int unsigned )
 181c  85 c0                             test    eax,eax
 181e  0f 9d c0                          setge   al
 1821  25 ff 00 00 00                    and     eax,000000ffH
 1826  0f 84 7b ff ff ff                 je      L221
 182c  8d 44 24 20                       lea     eax,+20H[esp]
 1830  8d 74 24 08                       lea     esi,+8H[esp]
 1834  e8 00 00 00 00                    call    void near BigInt::incr()
 1839  31 d2                             xor     edx,edx
 183b  31 c9                             xor     ecx,ecx
 183d  89 e8                             mov     eax,ebp
 183f  eb 20                             jmp     L225
 1841  39 df             L222            cmp     edi,ebx
 1843  76 07                             jbe     L223
 1845  ba 01 00 00 00                    mov     edx,00000001H
 184a  eb 02                             jmp     L224
 184c  31 d2             L223            xor     edx,edx
 184e  83 c0 04          L224            add     eax,00000004H
 1851  41                                inc     ecx
 1852  83 c6 04                          add     esi,00000004H
 1855  89 78 fc                          mov     -4H[eax],edi
 1858  83 f9 02                          cmp     ecx,00000002H
 185b  0f 83 46 ff ff ff                 jae     L221
 1861  8b 18             L225            mov     ebx,[eax]
 1863  8b 3e                             mov     edi,[esi]
 1865  29 fb                             sub     ebx,edi
 1867  89 df                             mov     edi,ebx
 1869  29 d7                             sub     edi,edx
 186b  3b 18                             cmp     ebx,[eax]
 186d  76 d2                             jbe     L222
 186f  ba 01 00 00 00                    mov     edx,00000001H
 1874  eb d8                             jmp     L224

        return result;
 1876  8b 7c 24 50       L226            mov     edi,+50H[esp]
 187a  89 e6                             mov     esi,esp
 187c  a5                                movsd   
 187d  a5                                movsd   

}


//time complexity: O(log(a))
//could be optimized to: O(log(a min This))
 187e  8b 44 24 50                       mov     eax,+50H[esp]
 1882  83 c4 58                          add     esp,00000058H
 1885  5d                                pop     ebp
 1886  5f                                pop     edi
 1887  5e                                pop     esi
 1888  59                                pop     ecx
 1889  c3                                ret     
 188a  8b c0                             mov     eax,eax

BigInt& BigInt::operator*=(const BigInt &a) {
 188c                    BigInt near & near BigInt::operator *=( BigInt const near & ):
 188c  53                                push    ebx
 188d  51                                push    ecx
 188e  56                                push    esi
 188f  57                                push    edi
 1890  55                                push    ebp
 1891  83 ec 40                          sub     esp,00000040H
 1894  89 44 24 3c                       mov     +3cH[esp],eax

        BigInt adder=*this;
 1898  8d 7c 24 20                       lea     edi,+20H[esp]
 189c  89 c6                             mov     esi,eax
 189e  a5                                movsd   
 189f  a5                                movsd   

        BigInt b=a;
 18a0  89 e7                             mov     edi,esp
 18a2  89 d6                             mov     esi,edx

        Zeroize();
 18a4  bb 08 00 00 00                    mov     ebx,00000008H
 18a9  31 d2                             xor     edx,edx
 18ab  a5                                movsd   
 18ac  a5                                movsd   
 18ad  e8 00 00 00 00                    call    memset_
 18b2  89 e0                             mov     eax,esp
 18b4  83 c0 04                          add     eax,00000004H
 18b7  89 44 24 38                       mov     +38H[esp],eax

        while(!b.IsZero()) {
 18bb  bd 01 00 00 00                    mov     ebp,00000001H
 18c0  89 e0                             mov     eax,esp
 18c2  31 d2                             xor     edx,edx
 18c4  83 38 00          L227            cmp     dword ptr [eax],00000000H
 18c7  74 04                             je      L228
 18c9  31 c0                             xor     eax,eax
 18cb  eb 0b                             jmp     L229
 18cd  42                L228            inc     edx
 18ce  83 c0 04                          add     eax,00000004H
 18d1  83 fa 02                          cmp     edx,00000002H
 18d4  72 ee                             jb      L227
 18d6  89 e8                             mov     eax,ebp
 18d8  85 c0             L229            test    eax,eax
 18da  0f 85 d6 00 00 00                 jne     L237

                if(b.IsOdd())
 18e0  8b 04 24                          mov     eax,[esp]
 18e3  21 e8                             and     eax,ebp
 18e5  74 36                             je      L234

                        (*this)+=adder;
 18e7  8d 54 24 20                       lea     edx,+20H[esp]
 18eb  8b 5c 24 3c                       mov     ebx,+3cH[esp]
 18ef  31 c0                             xor     eax,eax
 18f1  31 f6                             xor     esi,esi
 18f3  eb 19                             jmp     L233
 18f5  39 cf             L230            cmp     edi,ecx
 18f7  73 04                             jae     L231
 18f9  89 e8                             mov     eax,ebp
 18fb  eb 02                             jmp     L232
 18fd  31 c0             L231            xor     eax,eax
 18ff  83 c3 04          L232            add     ebx,00000004H
 1902  46                                inc     esi
 1903  83 c2 04                          add     edx,00000004H
 1906  89 7b fc                          mov     -4H[ebx],edi
 1909  83 fe 02                          cmp     esi,00000002H
 190c  73 0f                             jae     L234
 190e  8b 0a             L233            mov     ecx,[edx]
 1910  03 0b                             add     ecx,[ebx]
 1912  8d 3c 01                          lea     edi,[ecx+eax]
 1915  3b 0a                             cmp     ecx,[edx]
 1917  73 dc                             jae     L230
 1919  89 e8                             mov     eax,ebp
 191b  eb e2                             jmp     L232

                b>>=1;
 191d  8d 44 24 18       L234            lea     eax,+18H[esp]
 1921  8b 5c 24 38                       mov     ebx,+38H[esp]
 1925  8d 54 24 0c                       lea     edx,+0cH[esp]
 1929  31 f6                             xor     esi,esi
 192b  89 44 24 30                       mov     +30H[esp],eax
 192f  89 e8                             mov     eax,ebp
 1931  c1 e6 1f          L235            shl     esi,1fH
 1934  8b 0b                             mov     ecx,[ebx]
 1936  83 ea 04                          sub     edx,00000004H
 1939  89 cf                             mov     edi,ecx
 193b  83 eb 04                          sub     ebx,00000004H
 193e  d1 ef                             shr     edi,1
 1940  48                                dec     eax
 1941  09 f7                             or      edi,esi
 1943  89 ce                             mov     esi,ecx
 1945  89 7a 04                          mov     +4H[edx],edi
 1948  85 c0                             test    eax,eax
 194a  7d e5                             jge     L235
 194c  8d 7c 24 18                       lea     edi,+18H[esp]
 1950  8d 74 24 08                       lea     esi,+8H[esp]

                adder<<=1;
        }
        return *this;
 1954  8d 44 24 28                       lea     eax,+28H[esp]
 1958  a5                                movsd   
 1959  a5                                movsd   
 195a  8d 54 24 10                       lea     edx,+10H[esp]
 195e  89 e7                             mov     edi,esp
 1960  8b 74 24 30                       mov     esi,+30H[esp]
 1964  31 db                             xor     ebx,ebx
 1966  31 c9                             xor     ecx,ecx
 1968  a5                                movsd   
 1969  a5                                movsd   
 196a  89 44 24 34                       mov     +34H[esp],eax
 196e  8d 44 24 20                       lea     eax,+20H[esp]
 1972  83 c2 04          L236            add     edx,00000004H
 1975  43                                inc     ebx
 1976  8b 38                             mov     edi,[eax]
 1978  8b 30                             mov     esi,[eax]
 197a  83 c0 04                          add     eax,00000004H
 197d  01 f6                             add     esi,esi
 197f  c1 ef 1f                          shr     edi,1fH
 1982  09 ce                             or      esi,ecx
 1984  89 f9                             mov     ecx,edi
 1986  89 72 fc                          mov     -4H[edx],esi
 1989  83 fb 02                          cmp     ebx,00000002H
 198c  72 e4                             jb      L236
 198e  8d 7c 24 28                       lea     edi,+28H[esp]
 1992  8d 74 24 10                       lea     esi,+10H[esp]
 1996  a5                                movsd   
 1997  a5                                movsd   
 1998  8d 7c 24 20                       lea     edi,+20H[esp]
 199c  8b 74 24 34                       mov     esi,+34H[esp]
 19a0  a5                                movsd   
 19a1  a5                                movsd   
 19a2  89 e0                             mov     eax,esp
 19a4  31 d2                             xor     edx,edx
 19a6  83 38 00                          cmp     dword ptr [eax],00000000H
 19a9  0f 84 1e ff ff ff                 je      L228
 19af  31 c0                             xor     eax,eax
 19b1  e9 22 ff ff ff                    jmp     L229

}

 19b6  8b 44 24 3c       L237            mov     eax,+3cH[esp]
 19ba  83 c4 40                          add     esp,00000040H
 19bd  5d                                pop     ebp
 19be  5f                                pop     edi
 19bf  5e                                pop     esi
 19c0  59                                pop     ecx
 19c1  5b                                pop     ebx
 19c2  c3                                ret     
 19c3  90                                nop     

BigInt& BigInt::operator/=(const BigInt &a) {
 19c4                    BigInt near & near BigInt::operator /=( BigInt const near & ):
 19c4  53                                push    ebx
 19c5  51                                push    ecx
 19c6  56                                push    esi
 19c7  57                                push    edi
 19c8  55                                push    ebp
 19c9  81 ec 94 00 00 00                 sub     esp,00000094H
 19cf  89 44 24 78                       mov     +78H[esp],eax
 19d3  89 d1                             mov     ecx,edx

        BigInt tmp=*this;
        BigInt dummy;
 19d5  8d 7c 24 20                       lea     edi,+20H[esp]
 19d9  bb 08 00 00 00                    mov     ebx,00000008H
 19de  89 c6                             mov     esi,eax

        divmod(tmp,a,*this,dummy);
        return *this;
 19e0  89 54 24 74                       mov     +74H[esp],edx
 19e4  89 44 24 70                       mov     +70H[esp],eax
 19e8  8d 44 24 38                       lea     eax,+38H[esp]
 19ec  31 d2                             xor     edx,edx
 19ee  a5                                movsd   
 19ef  a5                                movsd   
 19f0  e8 00 00 00 00                    call    memset_
 19f5  bb 08 00 00 00                    mov     ebx,00000008H
 19fa  8d 44 24 38                       lea     eax,+38H[esp]
 19fe  8d 51 07                          lea     edx,+7H[ecx]
 1a01  83 c0 07                          add     eax,00000007H
 1a04  4b                L238            dec     ebx
 1a05  83 fb ff                          cmp     ebx,0ffffffffH
 1a08  74 1c                             je      L241
 1a0a  8a 0a                             mov     cl,[edx]
 1a0c  8a 28                             mov     ch,[eax]
 1a0e  38 e9                             cmp     cl,ch
 1a10  73 07                             jae     L239
 1a12  b9 ff ff ff ff                    mov     ecx,0ffffffffH
 1a17  eb 0f                             jmp     L242
 1a19  76 07             L239            jbe     L240
 1a1b  b9 01 00 00 00                    mov     ecx,00000001H
 1a20  eb 06                             jmp     L242
 1a22  4a                L240            dec     edx
 1a23  48                                dec     eax
 1a24  eb de                             jmp     L238
 1a26  31 c9             L241            xor     ecx,ecx
 1a28  85 c9             L242            test    ecx,ecx
 1a2a  0f 94 c0                          sete    al
 1a2d  25 ff 00 00 00                    and     eax,000000ffH
 1a32  0f 85 06 03 00 00                 jne     L279
 1a38  bb 08 00 00 00                    mov     ebx,00000008H
 1a3d  89 e0                             mov     eax,esp
 1a3f  8b 7c 24 70                       mov     edi,+70H[esp]
 1a43  31 d2                             xor     edx,edx
 1a45  89 e6                             mov     esi,esp
 1a47  e8 00 00 00 00                    call    memset_
 1a4c  a5                                movsd   
 1a4d  a5                                movsd   
 1a4e  8d 7c 24 50                       lea     edi,+50H[esp]
 1a52  8d 74 24 20                       lea     esi,+20H[esp]
 1a56  a5                                movsd   
 1a57  a5                                movsd   
 1a58  bb 08 00 00 00                    mov     ebx,00000008H
 1a5d  8d 7c 24 08                       lea     edi,+8H[esp]
 1a61  8b 74 24 74                       mov     esi,+74H[esp]
 1a65  8d 44 24 18                       lea     eax,+18H[esp]
 1a69  31 d2                             xor     edx,edx
 1a6b  a5                                movsd   
 1a6c  a5                                movsd   
 1a6d  e8 00 00 00 00                    call    memset_
 1a72  8d 44 24 50                       lea     eax,+50H[esp]
 1a76  83 c0 07                          add     eax,00000007H
 1a79  89 44 24 7c                       mov     +7cH[esp],eax
 1a7d  8d 44 24 08                       lea     eax,+8H[esp]
 1a81  83 c0 07                          add     eax,00000007H
 1a84  89 84 24 84 00 00 
       00                                mov     +84H[esp],eax
 1a8b  31 ed                             xor     ebp,ebp
 1a8d  bb 08 00 00 00    L243            mov     ebx,00000008H
 1a92  8b 54 24 7c                       mov     edx,+7cH[esp]
 1a96  8b 84 24 84 00 00 
       00                                mov     eax,+84H[esp]
 1a9d  4b                L244            dec     ebx
 1a9e  83 fb ff                          cmp     ebx,0ffffffffH
 1aa1  74 1c                             je      L247
 1aa3  8a 0a                             mov     cl,[edx]
 1aa5  8a 28                             mov     ch,[eax]
 1aa7  38 e9                             cmp     cl,ch
 1aa9  73 07                             jae     L245
 1aab  b9 ff ff ff ff                    mov     ecx,0ffffffffH
 1ab0  eb 0f                             jmp     L248
 1ab2  76 07             L245            jbe     L246
 1ab4  b9 01 00 00 00                    mov     ecx,00000001H
 1ab9  eb 06                             jmp     L248
 1abb  4a                L246            dec     edx
 1abc  48                                dec     eax
 1abd  eb de                             jmp     L244
 1abf  89 e9             L247            mov     ecx,ebp
 1ac1  85 c9             L248            test    ecx,ecx
 1ac3  0f 9d c0                          setge   al
 1ac6  25 ff 00 00 00                    and     eax,000000ffH
 1acb  0f 84 7a 00 00 00                 je      L253
 1ad1  8d 44 24 28                       lea     eax,+28H[esp]
 1ad5  8d 54 24 40                       lea     edx,+40H[esp]
 1ad9  89 eb                             mov     ebx,ebp
 1adb  89 44 24 60                       mov     +60H[esp],eax
 1adf  8d 44 24 40                       lea     eax,+40H[esp]
 1ae3  89 e9                             mov     ecx,ebp
 1ae5  e8 00 00 00 00                    call    near BigInt::BigInt()
 1aea  8d 44 24 08                       lea     eax,+8H[esp]
 1aee  83 c2 04          L249            add     edx,00000004H
 1af1  43                                inc     ebx
 1af2  8b 30                             mov     esi,[eax]
 1af4  8b 38                             mov     edi,[eax]
 1af6  83 c0 04                          add     eax,00000004H
 1af9  01 ff                             add     edi,edi
 1afb  c1 ee 1f                          shr     esi,1fH
 1afe  09 cf                             or      edi,ecx
 1b00  89 f1                             mov     ecx,esi
 1b02  89 7a fc                          mov     -4H[edx],edi
 1b05  83 fb 02                          cmp     ebx,00000002H
 1b08  73 13                             jae     L251
 1b0a  eb e2                             jmp     L249
 1b0c  83 c0 04          L250            add     eax,00000004H
 1b0f  42                                inc     edx
 1b10  89 68 fc                          mov     -4H[eax],ebp
 1b13  83 fa 02                          cmp     edx,00000002H
 1b16  72 22                             jb      L252
 1b18  e9 70 ff ff ff                    jmp     L243
 1b1d  8d 54 24 40       L251            lea     edx,+40H[esp]
 1b21  8d 44 24 28                       lea     eax,+28H[esp]
 1b25  8d 7c 24 08                       lea     edi,+8H[esp]
 1b29  e8 00 00 00 00                    call    near BigInt::BigInt( BigInt const near & )
 1b2e  8b 74 24 60                       mov     esi,+60H[esp]
 1b32  8d 44 24 18                       lea     eax,+18H[esp]
 1b36  89 ea                             mov     edx,ebp
 1b38  a5                                movsd   
 1b39  a5                                movsd   
 1b3a  8b 18             L252            mov     ebx,[eax]
 1b3c  83 fb ff                          cmp     ebx,0ffffffffH
 1b3f  74 cb                             je      L250
 1b41  8d 4b 01                          lea     ecx,+1H[ebx]
 1b44  89 08                             mov     [eax],ecx
 1b46  e9 42 ff ff ff                    jmp     L243
 1b4b  8d 44 24 50       L253            lea     eax,+50H[esp]
 1b4f  83 c0 07                          add     eax,00000007H
 1b52  89 84 24 8c 00 00 
       00                                mov     +8cH[esp],eax
 1b59  8d 44 24 08                       lea     eax,+8H[esp]
 1b5d  83 c0 07                          add     eax,00000007H
 1b60  89 44 24 6c                       mov     +6cH[esp],eax
 1b64  8d 44 24 08                       lea     eax,+8H[esp]
 1b68  83 c0 04                          add     eax,00000004H
 1b6b  89 84 24 80 00 00 
       00                                mov     +80H[esp],eax
 1b72  8b 44 24 74                       mov     eax,+74H[esp]
 1b76  83 c0 07                          add     eax,00000007H
 1b79  89 84 24 88 00 00 
       00                                mov     +88H[esp],eax
 1b80  bd 01 00 00 00                    mov     ebp,00000001H
 1b85  bb 08 00 00 00    L254            mov     ebx,00000008H
 1b8a  8b 44 24 6c                       mov     eax,+6cH[esp]
 1b8e  8b 94 24 88 00 00 
       00                                mov     edx,+88H[esp]
 1b95  4b                L255            dec     ebx
 1b96  83 fb ff                          cmp     ebx,0ffffffffH
 1b99  74 19                             je      L258
 1b9b  8a 08                             mov     cl,[eax]
 1b9d  8a 2a                             mov     ch,[edx]
 1b9f  38 e9                             cmp     cl,ch
 1ba1  73 07                             jae     L256
 1ba3  b9 ff ff ff ff                    mov     ecx,0ffffffffH
 1ba8  eb 0c                             jmp     L259
 1baa  76 04             L256            jbe     L257
 1bac  89 e9                             mov     ecx,ebp
 1bae  eb 06                             jmp     L259
 1bb0  48                L257            dec     eax
 1bb1  4a                                dec     edx
 1bb2  eb e1                             jmp     L255
 1bb4  31 c9             L258            xor     ecx,ecx
 1bb6  85 c9             L259            test    ecx,ecx
 1bb8  0f 95 c0                          setne   al
 1bbb  25 ff 00 00 00                    and     eax,000000ffH
 1bc0  0f 84 78 01 00 00                 je      L279
 1bc6  8b 44 24 70                       mov     eax,+70H[esp]
 1bca  8d 54 24 30                       lea     edx,+30H[esp]
 1bce  89 84 24 90 00 00 
       00                                mov     +90H[esp],eax
 1bd5  8d 44 24 10                       lea     eax,+10H[esp]
 1bd9  31 db                             xor     ebx,ebx
 1bdb  89 44 24 64                       mov     +64H[esp],eax
 1bdf  8d 44 24 30                       lea     eax,+30H[esp]
 1be3  31 c9                             xor     ecx,ecx
 1be5  e8 00 00 00 00                    call    near BigInt::BigInt()
 1bea  8b 44 24 70                       mov     eax,+70H[esp]
 1bee  83 c2 04          L260            add     edx,00000004H
 1bf1  43                                inc     ebx
 1bf2  8b 30                             mov     esi,[eax]
 1bf4  8b 38                             mov     edi,[eax]
 1bf6  83 c0 04                          add     eax,00000004H
 1bf9  01 ff                             add     edi,edi
 1bfb  c1 ee 1f                          shr     esi,1fH
 1bfe  09 cf                             or      edi,ecx
 1c00  89 f1                             mov     ecx,esi
 1c02  89 7a fc                          mov     -4H[edx],edi
 1c05  83 fb 02                          cmp     ebx,00000002H
 1c08  72 e4                             jb      L260
 1c0a  8d 54 24 30                       lea     edx,+30H[esp]
 1c0e  8d 44 24 10                       lea     eax,+10H[esp]
 1c12  8b bc 24 90 00 00 
       00                                mov     edi,+90H[esp]
 1c19  e8 00 00 00 00                    call    near BigInt::BigInt( BigInt const near & )
 1c1e  8b 74 24 64                       mov     esi,+64H[esp]
 1c22  89 eb                             mov     ebx,ebp
 1c24  8d 44 24 48                       lea     eax,+48H[esp]
 1c28  a5                                movsd   
 1c29  a5                                movsd   
 1c2a  8d 54 24 5c                       lea     edx,+5cH[esp]
 1c2e  89 44 24 68                       mov     +68H[esp],eax
 1c32  8d 44 24 58                       lea     eax,+58H[esp]
 1c36  31 f6                             xor     esi,esi
 1c38  e8 00 00 00 00                    call    near BigInt::BigInt()
 1c3d  8b 84 24 80 00 00 
       00                                mov     eax,+80H[esp]
 1c44  89 f7             L261            mov     edi,esi
 1c46  8b 08                             mov     ecx,[eax]
 1c48  83 ea 04                          sub     edx,00000004H
 1c4b  89 ce                             mov     esi,ecx
 1c4d  c1 e7 1f                          shl     edi,1fH
 1c50  d1 ee                             shr     esi,1
 1c52  83 e8 04                          sub     eax,00000004H
 1c55  09 fe                             or      esi,edi
 1c57  4b                                dec     ebx
 1c58  89 72 04                          mov     +4H[edx],esi
 1c5b  89 ce                             mov     esi,ecx
 1c5d  85 db                             test    ebx,ebx
 1c5f  7c 13                             jl      L263
 1c61  eb e1                             jmp     L261
 1c63  42                L262            inc     edx
 1c64  c7 00 ff ff ff ff                 mov     dword ptr [eax],0ffffffffH
 1c6a  83 c0 04                          add     eax,00000004H
 1c6d  83 fa 02                          cmp     edx,00000002H
 1c70  72 1f                             jb      L264
 1c72  eb 28                             jmp     L265
 1c74  8d 54 24 58       L263            lea     edx,+58H[esp]
 1c78  8d 44 24 48                       lea     eax,+48H[esp]
 1c7c  8d 7c 24 08                       lea     edi,+8H[esp]
 1c80  e8 00 00 00 00                    call    near BigInt::BigInt( BigInt const near & )
 1c85  8b 74 24 68                       mov     esi,+68H[esp]
 1c89  8d 44 24 18                       lea     eax,+18H[esp]
 1c8d  31 d2                             xor     edx,edx
 1c8f  a5                                movsd   
 1c90  a5                                movsd   
 1c91  8b 30             L264            mov     esi,[eax]
 1c93  85 f6                             test    esi,esi
 1c95  74 cc                             je      L262
 1c97  8d 7e ff                          lea     edi,-1H[esi]
 1c9a  89 38                             mov     [eax],edi
 1c9c  bb 08 00 00 00    L265            mov     ebx,00000008H
 1ca1  8b 84 24 8c 00 00 
       00                                mov     eax,+8cH[esp]
 1ca8  8b 54 24 6c                       mov     edx,+6cH[esp]
 1cac  4b                L266            dec     ebx
 1cad  83 fb ff                          cmp     ebx,0ffffffffH
 1cb0  74 19                             je      L269
 1cb2  8a 08                             mov     cl,[eax]
 1cb4  8a 2a                             mov     ch,[edx]
 1cb6  38 e9                             cmp     cl,ch
 1cb8  73 07                             jae     L267
 1cba  b9 ff ff ff ff                    mov     ecx,0ffffffffH
 1cbf  eb 0c                             jmp     L270
 1cc1  76 04             L267            jbe     L268
 1cc3  89 e9                             mov     ecx,ebp
 1cc5  eb 06                             jmp     L270
 1cc7  48                L268            dec     eax
 1cc8  4a                                dec     edx
 1cc9  eb e1                             jmp     L266
 1ccb  31 c9             L269            xor     ecx,ecx
 1ccd  85 c9             L270            test    ecx,ecx
 1ccf  0f 9d c0                          setge   al
 1cd2  25 ff 00 00 00                    and     eax,000000ffH
 1cd7  75 16                             jne     L272
 1cd9  e9 a7 fe ff ff                    jmp     L254
 1cde  42                L271            inc     edx
 1cdf  c7 00 00 00 00 00                 mov     dword ptr [eax],00000000H
 1ce5  83 c0 04                          add     eax,00000004H
 1ce8  83 fa 02                          cmp     edx,00000002H
 1ceb  72 08                             jb      L273
 1ced  eb 12                             jmp     L274
 1cef  8b 44 24 70       L272            mov     eax,+70H[esp]
 1cf3  31 d2                             xor     edx,edx
 1cf5  8b 18             L273            mov     ebx,[eax]
 1cf7  83 fb ff                          cmp     ebx,0ffffffffH
 1cfa  74 e2                             je      L271
 1cfc  8d 4b 01                          lea     ecx,+1H[ebx]
 1cff  89 08                             mov     [eax],ecx
 1d01  8d 4c 24 08       L274            lea     ecx,+8H[esp]
 1d05  8d 44 24 50                       lea     eax,+50H[esp]
 1d09  31 d2                             xor     edx,edx
 1d0b  31 f6                             xor     esi,esi
 1d0d  eb 1d                             jmp     L278
 1d0f  39 df             L275            cmp     edi,ebx
 1d11  76 04                             jbe     L276
 1d13  89 ea                             mov     edx,ebp
 1d15  eb 02                             jmp     L277
 1d17  31 d2             L276            xor     edx,edx
 1d19  83 c0 04          L277            add     eax,00000004H
 1d1c  46                                inc     esi
 1d1d  83 c1 04                          add     ecx,00000004H
 1d20  89 78 fc                          mov     -4H[eax],edi
 1d23  83 fe 02                          cmp     esi,00000002H
 1d26  0f 83 59 fe ff ff                 jae     L254
 1d2c  8b 18             L278            mov     ebx,[eax]
 1d2e  8b 39                             mov     edi,[ecx]
 1d30  29 fb                             sub     ebx,edi
 1d32  89 df                             mov     edi,ebx
 1d34  29 d7                             sub     edi,edx
 1d36  3b 18                             cmp     ebx,[eax]
 1d38  76 d5                             jbe     L275
 1d3a  89 ea                             mov     edx,ebp
 1d3c  eb db                             jmp     L277

}

 1d3e  8b 44 24 78       L279            mov     eax,+78H[esp]
 1d42  81 c4 94 00 00 00                 add     esp,00000094H
 1d48  5d                                pop     ebp
 1d49  5f                                pop     edi
 1d4a  5e                                pop     esi
 1d4b  59                                pop     ecx
 1d4c  5b                                pop     ebx
 1d4d  c3                                ret     
 1d4e  8b c0                             mov     eax,eax

BigInt& BigInt::operator%=(const BigInt &a) {
 1d50                    BigInt near & near BigInt::operator %=( BigInt const near & ):
 1d50  53                                push    ebx
 1d51  51                                push    ecx
 1d52  56                                push    esi
 1d53  57                                push    edi
 1d54  55                                push    ebp
 1d55  81 ec 90 00 00 00                 sub     esp,00000090H
 1d5b  89 44 24 78                       mov     +78H[esp],eax
 1d5f  89 d1                             mov     ecx,edx

        BigInt tmp=*this;
        BigInt dummy;
 1d61  8d 7c 24 40                       lea     edi,+40H[esp]
 1d65  bb 08 00 00 00                    mov     ebx,00000008H
 1d6a  89 c6                             mov     esi,eax

        divmod(tmp,a,dummy,*this);
        return *this;
 1d6c  89 54 24 74                       mov     +74H[esp],edx
 1d70  89 84 24 8c 00 00 
       00                                mov     +8cH[esp],eax
 1d77  8d 44 24 50                       lea     eax,+50H[esp]
 1d7b  31 d2                             xor     edx,edx
 1d7d  a5                                movsd   
 1d7e  a5                                movsd   
 1d7f  e8 00 00 00 00                    call    memset_
 1d84  bb 08 00 00 00                    mov     ebx,00000008H
 1d89  8d 54 24 50                       lea     edx,+50H[esp]
 1d8d  8d 41 07                          lea     eax,+7H[ecx]
 1d90  83 c2 07                          add     edx,00000007H
 1d93  4b                L280            dec     ebx
 1d94  83 fb ff                          cmp     ebx,0ffffffffH
 1d97  74 1c                             je      L283
 1d99  8a 08                             mov     cl,[eax]
 1d9b  8a 2a                             mov     ch,[edx]
 1d9d  38 e9                             cmp     cl,ch
 1d9f  73 07                             jae     L281
 1da1  b9 ff ff ff ff                    mov     ecx,0ffffffffH
 1da6  eb 0f                             jmp     L284
 1da8  76 07             L281            jbe     L282
 1daa  b9 01 00 00 00                    mov     ecx,00000001H
 1daf  eb 06                             jmp     L284
 1db1  48                L282            dec     eax
 1db2  4a                                dec     edx
 1db3  eb de                             jmp     L280
 1db5  31 c9             L283            xor     ecx,ecx
 1db7  85 c9             L284            test    ecx,ecx
 1db9  0f 94 c0                          sete    al
 1dbc  25 ff 00 00 00                    and     eax,000000ffH
 1dc1  0f 85 fc 02 00 00                 jne     L321
 1dc7  bb 08 00 00 00                    mov     ebx,00000008H
 1dcc  8d 44 24 08                       lea     eax,+8H[esp]
 1dd0  8d 7c 24 28                       lea     edi,+28H[esp]
 1dd4  31 d2                             xor     edx,edx
 1dd6  8d 74 24 08                       lea     esi,+8H[esp]
 1dda  e8 00 00 00 00                    call    memset_
 1ddf  a5                                movsd   
 1de0  a5                                movsd   
 1de1  8b bc 24 8c 00 00 
       00                                mov     edi,+8cH[esp]
 1de8  8d 74 24 40                       lea     esi,+40H[esp]
 1dec  a5                                movsd   
 1ded  a5                                movsd   
 1dee  bb 08 00 00 00                    mov     ebx,00000008H
 1df3  8d 7c 24 10                       lea     edi,+10H[esp]
 1df7  8b 74 24 74                       mov     esi,+74H[esp]
 1dfb  8d 44 24 18                       lea     eax,+18H[esp]
 1dff  31 d2                             xor     edx,edx
 1e01  a5                                movsd   
 1e02  a5                                movsd   
 1e03  e8 00 00 00 00                    call    memset_
 1e08  8b 84 24 8c 00 00 
       00                                mov     eax,+8cH[esp]
 1e0f  83 c0 07                          add     eax,00000007H
 1e12  89 84 24 88 00 00 
       00                                mov     +88H[esp],eax
 1e19  8d 44 24 10                       lea     eax,+10H[esp]
 1e1d  83 c0 07                          add     eax,00000007H
 1e20  89 84 24 84 00 00 
       00                                mov     +84H[esp],eax
 1e27  31 ed                             xor     ebp,ebp
 1e29  bb 08 00 00 00    L285            mov     ebx,00000008H
 1e2e  8b 94 24 88 00 00 
       00                                mov     edx,+88H[esp]
 1e35  8b 84 24 84 00 00 
       00                                mov     eax,+84H[esp]
 1e3c  4b                L286            dec     ebx
 1e3d  83 fb ff                          cmp     ebx,0ffffffffH
 1e40  74 1c                             je      L289
 1e42  8a 0a                             mov     cl,[edx]
 1e44  8a 28                             mov     ch,[eax]
 1e46  38 e9                             cmp     cl,ch
 1e48  73 07                             jae     L287
 1e4a  b9 ff ff ff ff                    mov     ecx,0ffffffffH
 1e4f  eb 0f                             jmp     L290
 1e51  76 07             L287            jbe     L288
 1e53  b9 01 00 00 00                    mov     ecx,00000001H
 1e58  eb 06                             jmp     L290
 1e5a  4a                L288            dec     edx
 1e5b  48                                dec     eax
 1e5c  eb de                             jmp     L286
 1e5e  89 e9             L289            mov     ecx,ebp
 1e60  85 c9             L290            test    ecx,ecx
 1e62  0f 9d c0                          setge   al
 1e65  25 ff 00 00 00                    and     eax,000000ffH
 1e6a  0f 84 76 00 00 00                 je      L295
 1e70  89 e0                             mov     eax,esp
 1e72  8d 54 24 38                       lea     edx,+38H[esp]
 1e76  89 eb                             mov     ebx,ebp
 1e78  89 44 24 60                       mov     +60H[esp],eax
 1e7c  8d 44 24 38                       lea     eax,+38H[esp]
 1e80  89 e9                             mov     ecx,ebp
 1e82  e8 00 00 00 00                    call    near BigInt::BigInt()
 1e87  8d 44 24 10                       lea     eax,+10H[esp]
 1e8b  83 c2 04          L291            add     edx,00000004H
 1e8e  43                                inc     ebx
 1e8f  8b 38                             mov     edi,[eax]
 1e91  8b 30                             mov     esi,[eax]
 1e93  83 c0 04                          add     eax,00000004H
 1e96  01 f6                             add     esi,esi
 1e98  c1 ef 1f                          shr     edi,1fH
 1e9b  09 ce                             or      esi,ecx
 1e9d  89 f9                             mov     ecx,edi
 1e9f  89 72 fc                          mov     -4H[edx],esi
 1ea2  83 fb 02                          cmp     ebx,00000002H
 1ea5  73 13                             jae     L293
 1ea7  eb e2                             jmp     L291
 1ea9  83 c0 04          L292            add     eax,00000004H
 1eac  42                                inc     edx
 1ead  89 68 fc                          mov     -4H[eax],ebp
 1eb0  83 fa 02                          cmp     edx,00000002H
 1eb3  72 20                             jb      L294
 1eb5  e9 6f ff ff ff                    jmp     L285
 1eba  8d 54 24 38       L293            lea     edx,+38H[esp]
 1ebe  89 e0                             mov     eax,esp
 1ec0  8d 7c 24 10                       lea     edi,+10H[esp]
 1ec4  e8 00 00 00 00                    call    near BigInt::BigInt( BigInt const near & )
 1ec9  8b 74 24 60                       mov     esi,+60H[esp]
 1ecd  8d 44 24 18                       lea     eax,+18H[esp]
 1ed1  89 ea                             mov     edx,ebp
 1ed3  a5                                movsd   
 1ed4  a5                                movsd   
 1ed5  8b 18             L294            mov     ebx,[eax]
 1ed7  83 fb ff                          cmp     ebx,0ffffffffH
 1eda  74 cd                             je      L292
 1edc  8d 4b 01                          lea     ecx,+1H[ebx]
 1edf  89 08                             mov     [eax],ecx
 1ee1  e9 43 ff ff ff                    jmp     L285
 1ee6  8b 84 24 8c 00 00 
       00                L295            mov     eax,+8cH[esp]
 1eed  83 c0 07                          add     eax,00000007H
 1ef0  89 84 24 80 00 00 
       00                                mov     +80H[esp],eax
 1ef7  8d 44 24 10                       lea     eax,+10H[esp]
 1efb  83 c0 07                          add     eax,00000007H
 1efe  89 44 24 70                       mov     +70H[esp],eax
 1f02  8d 44 24 10                       lea     eax,+10H[esp]
 1f06  83 c0 04                          add     eax,00000004H
 1f09  89 44 24 7c                       mov     +7cH[esp],eax
 1f0d  8b 44 24 74                       mov     eax,+74H[esp]
 1f11  83 c0 07                          add     eax,00000007H
 1f14  89 44 24 6c                       mov     +6cH[esp],eax
 1f18  bd 01 00 00 00                    mov     ebp,00000001H
 1f1d  bb 08 00 00 00    L296            mov     ebx,00000008H
 1f22  8b 54 24 70                       mov     edx,+70H[esp]
 1f26  8b 44 24 6c                       mov     eax,+6cH[esp]
 1f2a  4b                L297            dec     ebx
 1f2b  83 fb ff                          cmp     ebx,0ffffffffH
 1f2e  74 19                             je      L300
 1f30  8a 0a                             mov     cl,[edx]
 1f32  8a 28                             mov     ch,[eax]
 1f34  38 e9                             cmp     cl,ch
 1f36  73 07                             jae     L298
 1f38  b9 ff ff ff ff                    mov     ecx,0ffffffffH
 1f3d  eb 0c                             jmp     L301
 1f3f  76 04             L298            jbe     L299
 1f41  89 e9                             mov     ecx,ebp
 1f43  eb 06                             jmp     L301
 1f45  4a                L299            dec     edx
 1f46  48                                dec     eax
 1f47  eb e1                             jmp     L297
 1f49  31 c9             L300            xor     ecx,ecx
 1f4b  85 c9             L301            test    ecx,ecx
 1f4d  0f 95 c0                          setne   al
 1f50  25 ff 00 00 00                    and     eax,000000ffH
 1f55  0f 84 68 01 00 00                 je      L321
 1f5b  8d 44 24 30                       lea     eax,+30H[esp]
 1f5f  8d 5c 24 20                       lea     ebx,+20H[esp]
 1f63  31 d2                             xor     edx,edx
 1f65  89 44 24 64                       mov     +64H[esp],eax
 1f69  8d 44 24 20                       lea     eax,+20H[esp]
 1f6d  31 c9                             xor     ecx,ecx
 1f6f  e8 00 00 00 00                    call    near BigInt::BigInt()
 1f74  8d 44 24 28                       lea     eax,+28H[esp]
 1f78  83 c3 04          L302            add     ebx,00000004H
 1f7b  42                                inc     edx
 1f7c  8b 30                             mov     esi,[eax]
 1f7e  8b 38                             mov     edi,[eax]
 1f80  83 c0 04                          add     eax,00000004H
 1f83  01 ff                             add     edi,edi
 1f85  c1 ee 1f                          shr     esi,1fH
 1f88  09 cf                             or      edi,ecx
 1f8a  89 f1                             mov     ecx,esi
 1f8c  89 7b fc                          mov     -4H[ebx],edi
 1f8f  83 fa 02                          cmp     edx,00000002H
 1f92  72 e4                             jb      L302
 1f94  8d 54 24 20                       lea     edx,+20H[esp]
 1f98  8d 44 24 30                       lea     eax,+30H[esp]
 1f9c  8d 7c 24 28                       lea     edi,+28H[esp]
 1fa0  e8 00 00 00 00                    call    near BigInt::BigInt( BigInt const near & )
 1fa5  89 eb                             mov     ebx,ebp
 1fa7  8b 74 24 64                       mov     esi,+64H[esp]
 1fab  8d 44 24 58                       lea     eax,+58H[esp]
 1faf  8d 54 24 4c                       lea     edx,+4cH[esp]
 1fb3  a5                                movsd   
 1fb4  a5                                movsd   
 1fb5  89 44 24 68                       mov     +68H[esp],eax
 1fb9  8d 44 24 48                       lea     eax,+48H[esp]
 1fbd  31 f6                             xor     esi,esi
 1fbf  e8 00 00 00 00                    call    near BigInt::BigInt()
 1fc4  8b 44 24 7c                       mov     eax,+7cH[esp]
 1fc8  c1 e6 1f          L303            shl     esi,1fH
 1fcb  8b 08                             mov     ecx,[eax]
 1fcd  83 ea 04                          sub     edx,00000004H
 1fd0  89 cf                             mov     edi,ecx
 1fd2  83 e8 04                          sub     eax,00000004H
 1fd5  d1 ef                             shr     edi,1
 1fd7  4b                                dec     ebx
 1fd8  09 f7                             or      edi,esi
 1fda  89 ce                             mov     esi,ecx
 1fdc  89 7a 04                          mov     +4H[edx],edi
 1fdf  85 db                             test    ebx,ebx
 1fe1  7c 13                             jl      L305
 1fe3  eb e3                             jmp     L303
 1fe5  42                L304            inc     edx
 1fe6  c7 00 ff ff ff ff                 mov     dword ptr [eax],0ffffffffH
 1fec  83 c0 04                          add     eax,00000004H
 1fef  83 fa 02                          cmp     edx,00000002H
 1ff2  72 1f                             jb      L306
 1ff4  eb 28                             jmp     L307
 1ff6  8d 54 24 48       L305            lea     edx,+48H[esp]
 1ffa  8d 44 24 58                       lea     eax,+58H[esp]
 1ffe  8d 7c 24 10                       lea     edi,+10H[esp]
 2002  e8 00 00 00 00                    call    near BigInt::BigInt( BigInt const near & )
 2007  8b 74 24 68                       mov     esi,+68H[esp]
 200b  8d 44 24 18                       lea     eax,+18H[esp]
 200f  31 d2                             xor     edx,edx
 2011  a5                                movsd   
 2012  a5                                movsd   
 2013  8b 30             L306            mov     esi,[eax]
 2015  85 f6                             test    esi,esi
 2017  74 cc                             je      L304
 2019  8d 7e ff                          lea     edi,-1H[esi]
 201c  89 38                             mov     [eax],edi
 201e  bb 08 00 00 00    L307            mov     ebx,00000008H
 2023  8b 84 24 80 00 00 
       00                                mov     eax,+80H[esp]
 202a  8b 54 24 70                       mov     edx,+70H[esp]
 202e  4b                L308            dec     ebx
 202f  83 fb ff                          cmp     ebx,0ffffffffH
 2032  74 19                             je      L311
 2034  8a 08                             mov     cl,[eax]
 2036  8a 2a                             mov     ch,[edx]
 2038  38 e9                             cmp     cl,ch
 203a  73 07                             jae     L309
 203c  b9 ff ff ff ff                    mov     ecx,0ffffffffH
 2041  eb 0c                             jmp     L312
 2043  76 04             L309            jbe     L310
 2045  89 e9                             mov     ecx,ebp
 2047  eb 06                             jmp     L312
 2049  48                L310            dec     eax
 204a  4a                                dec     edx
 204b  eb e1                             jmp     L308
 204d  31 c9             L311            xor     ecx,ecx
 204f  85 c9             L312            test    ecx,ecx
 2051  0f 9d c0                          setge   al
 2054  25 ff 00 00 00                    and     eax,000000ffH
 2059  75 16                             jne     L314
 205b  e9 bd fe ff ff                    jmp     L296
 2060  42                L313            inc     edx
 2061  c7 00 00 00 00 00                 mov     dword ptr [eax],00000000H
 2067  83 c0 04                          add     eax,00000004H
 206a  83 fa 02                          cmp     edx,00000002H
 206d  72 08                             jb      L315
 206f  eb 12                             jmp     L316
 2071  8d 44 24 28       L314            lea     eax,+28H[esp]
 2075  31 d2                             xor     edx,edx
 2077  8b 18             L315            mov     ebx,[eax]
 2079  83 fb ff                          cmp     ebx,0ffffffffH
 207c  74 e2                             je      L313
 207e  8d 4b 01                          lea     ecx,+1H[ebx]
 2081  89 08                             mov     [eax],ecx
 2083  8d 4c 24 10       L316            lea     ecx,+10H[esp]
 2087  8b 84 24 8c 00 00 
       00                                mov     eax,+8cH[esp]
 208e  31 d2                             xor     edx,edx
 2090  31 f6                             xor     esi,esi
 2092  eb 1d                             jmp     L320
 2094  39 df             L317            cmp     edi,ebx
 2096  76 04                             jbe     L318
 2098  89 ea                             mov     edx,ebp
 209a  eb 02                             jmp     L319
 209c  31 d2             L318            xor     edx,edx
 209e  83 c0 04          L319            add     eax,00000004H
 20a1  46                                inc     esi
 20a2  83 c1 04                          add     ecx,00000004H
 20a5  89 78 fc                          mov     -4H[eax],edi
 20a8  83 fe 02                          cmp     esi,00000002H
 20ab  0f 83 6c fe ff ff                 jae     L296
 20b1  8b 18             L320            mov     ebx,[eax]
 20b3  8b 39                             mov     edi,[ecx]
 20b5  29 fb                             sub     ebx,edi
 20b7  89 df                             mov     edi,ebx
 20b9  29 d7                             sub     edi,edx
 20bb  3b 18                             cmp     ebx,[eax]
 20bd  76 d5                             jbe     L317
 20bf  89 ea                             mov     edx,ebp
 20c1  eb db                             jmp     L319

}


inline char digit(int x) {
        if(x<10) return char('0'+x);
        else return char('a'+x-10);
}

 20c3  8b 44 24 78       L321            mov     eax,+78H[esp]
 20c7  81 c4 90 00 00 00                 add     esp,00000090H
 20cd  5d                                pop     ebp
 20ce  5f                                pop     edi
 20cf  5e                                pop     esi
 20d0  59                                pop     ecx
 20d1  5b                                pop     ebx
 20d2  c3                                ret     
 20d3  90                                nop     

unsigned char *btoa(const BigInt &value,unsigned char *string, int radix) {
 20d4                    char unsigned near * near btoa( BigInt const near &, char unsigned near *, int ):
 20d4  51                                push    ecx
 20d5  56                                push    esi
 20d6  57                                push    edi
 20d7  55                                push    ebp
 20d8  81 ec 9c 00 00 00                 sub     esp,0000009cH
 20de  89 94 24 84 00 00 
       00                                mov     +84H[esp],edx
 20e5  8d 7c 24 60                       lea     edi,+60H[esp]
 20e9  89 c6                             mov     esi,eax
 20eb  31 d2                             xor     edx,edx
 20ed  8d 44 24 60                       lea     eax,+60H[esp]
 20f1  a5                                movsd   
 20f2  a5                                movsd   
 20f3  83 38 00          L322            cmp     dword ptr [eax],00000000H
 20f6  74 04                             je      L323
 20f8  31 c0                             xor     eax,eax
 20fa  eb 0e                             jmp     L324

        BigInt q=value,r;
 20fc  42                L323            inc     edx
 20fd  83 c0 04                          add     eax,00000004H
 2100  83 fa 02                          cmp     edx,00000002H
 2103  72 ee                             jb      L322

        if(!q.IsZero()) {
 2105  b8 01 00 00 00                    mov     eax,00000001H
 210a  85 c0             L324            test    eax,eax
 210c  0f 85 5e 04 00 00                 jne     L377

                BigInt bRadix=radix;        //avoid more than one conversion int->BigInt
 2112  89 d9                             mov     ecx,ebx
 2114  85 db                             test    ebx,ebx
 2116  7d 10                             jge     L325
 2118  bb 08 00 00 00                    mov     ebx,00000008H
 211d  ba ff ff ff ff                    mov     edx,0ffffffffH
 2122  8d 44 24 18                       lea     eax,+18H[esp]
 2126  eb 0b                             jmp     L326
 2128  bb 08 00 00 00    L325            mov     ebx,00000008H
 212d  8d 44 24 18                       lea     eax,+18H[esp]
 2131  31 d2                             xor     edx,edx
 2133  e8 00 00 00 00    L326            call    memset_
 2138  85 c9                             test    ecx,ecx
 213a  74 04                             je      L327
 213c  89 4c 24 18                       mov     +18H[esp],ecx

                unsigned char *p1=string;
 2140  8b 84 24 84 00 00 
       00                L327            mov     eax,+84H[esp]
 2147  89 84 24 88 00 00 
       00                                mov     +88H[esp],eax
 214e  89 e0                             mov     eax,esp
 2150  83 c0 07                          add     eax,00000007H
 2153  89 84 24 94 00 00 
       00                                mov     +94H[esp],eax
 215a  8d 44 24 50                       lea     eax,+50H[esp]
 215e  83 c0 07                          add     eax,00000007H
 2161  89 84 24 98 00 00 
       00                                mov     +98H[esp],eax
 2168  8d 44 24 50                       lea     eax,+50H[esp]
 216c  83 c0 04                          add     eax,00000004H
 216f  89 84 24 8c 00 00 
       00                                mov     +8cH[esp],eax
 2176  8d 44 24 18                       lea     eax,+18H[esp]
 217a  83 c0 07                          add     eax,00000007H
 217d  89 84 24 90 00 00 
       00                                mov     +90H[esp],eax
 2184  8d 44 24 38                       lea     eax,+38H[esp]
 2188  83 c0 07                          add     eax,00000007H
 218b  89 84 24 80 00 00 
       00                                mov     +80H[esp],eax

                while(!q.IsZero()) {
 2192  bd 04 00 00 00                    mov     ebp,00000004H
 2197  8d 44 24 60       L328            lea     eax,+60H[esp]
 219b  31 d2                             xor     edx,edx
 219d  83 38 00          L329            cmp     dword ptr [eax],00000000H
 21a0  74 04                             je      L330
 21a2  31 c0                             xor     eax,eax
 21a4  eb 0e                             jmp     L331
 21a6  42                L330            inc     edx
 21a7  83 c0 04                          add     eax,00000004H
 21aa  83 fa 02                          cmp     edx,00000002H
 21ad  72 ee                             jb      L329
 21af  b8 01 00 00 00                    mov     eax,00000001H
 21b4  85 c0             L331            test    eax,eax
 21b6  0f 85 69 03 00 00                 jne     L375

                        BigInt tmp=q;
 21bc  8d 7c 24 20                       lea     edi,+20H[esp]
 21c0  8d 74 24 60                       lea     esi,+60H[esp]

                        divmod(tmp,bRadix,q,r);
 21c4  bb 08 00 00 00                    mov     ebx,00000008H
 21c9  8d 44 24 38                       lea     eax,+38H[esp]
 21cd  31 d2                             xor     edx,edx
 21cf  a5                                movsd   
 21d0  a5                                movsd   
 21d1  e8 00 00 00 00                    call    memset_
 21d6  bb 08 00 00 00                    mov     ebx,00000008H
 21db  8b 84 24 90 00 00 
       00                                mov     eax,+90H[esp]
 21e2  8b 94 24 80 00 00 
       00                                mov     edx,+80H[esp]
 21e9  4b                L332            dec     ebx
 21ea  83 fb ff                          cmp     ebx,0ffffffffH
 21ed  74 1c                             je      L335
 21ef  8a 08                             mov     cl,[eax]
 21f1  8a 2a                             mov     ch,[edx]
 21f3  38 e9                             cmp     cl,ch
 21f5  73 07                             jae     L333
 21f7  b9 ff ff ff ff                    mov     ecx,0ffffffffH
 21fc  eb 0f                             jmp     L336
 21fe  76 07             L333            jbe     L334
 2200  b9 01 00 00 00                    mov     ecx,00000001H
 2205  eb 06                             jmp     L336
 2207  48                L334            dec     eax
 2208  4a                                dec     edx
 2209  eb de                             jmp     L332
 220b  31 c9             L335            xor     ecx,ecx
 220d  85 c9             L336            test    ecx,ecx
 220f  0f 94 c0                          sete    al
 2212  25 ff 00 00 00                    and     eax,000000ffH
 2217  0f 85 c3 02 00 00                 jne     L372
 221d  bb 08 00 00 00                    mov     ebx,00000008H
 2222  8d 44 24 08                       lea     eax,+8H[esp]
 2226  8d 7c 24 60                       lea     edi,+60H[esp]
 222a  31 d2                             xor     edx,edx
 222c  8d 74 24 08                       lea     esi,+8H[esp]
 2230  e8 00 00 00 00                    call    memset_
 2235  a5                                movsd   
 2236  a5                                movsd   
 2237  89 e7                             mov     edi,esp
 2239  8d 74 24 20                       lea     esi,+20H[esp]
 223d  a5                                movsd   
 223e  a5                                movsd   
 223f  bb 08 00 00 00                    mov     ebx,00000008H
 2244  8d 7c 24 50                       lea     edi,+50H[esp]
 2248  8d 74 24 18                       lea     esi,+18H[esp]
 224c  8d 44 24 28                       lea     eax,+28H[esp]
 2250  31 d2                             xor     edx,edx
 2252  a5                                movsd   
 2253  a5                                movsd   
 2254  e8 00 00 00 00                    call    memset_
 2259  bb 08 00 00 00    L337            mov     ebx,00000008H
 225e  8b 84 24 94 00 00 
       00                                mov     eax,+94H[esp]
 2265  8b 94 24 98 00 00 
       00                                mov     edx,+98H[esp]
 226c  4b                L338            dec     ebx
 226d  83 fb ff                          cmp     ebx,0ffffffffH
 2270  74 1c                             je      L341
 2272  8a 08                             mov     cl,[eax]
 2274  8a 2a                             mov     ch,[edx]
 2276  38 e9                             cmp     cl,ch
 2278  73 07                             jae     L339
 227a  b9 ff ff ff ff                    mov     ecx,0ffffffffH
 227f  eb 0f                             jmp     L342
 2281  76 07             L339            jbe     L340
 2283  b9 01 00 00 00                    mov     ecx,00000001H
 2288  eb 06                             jmp     L342
 228a  48                L340            dec     eax
 228b  4a                                dec     edx
 228c  eb de                             jmp     L338
 228e  31 c9             L341            xor     ecx,ecx
 2290  85 c9             L342            test    ecx,ecx
 2292  0f 9d c0                          setge   al
 2295  25 ff 00 00 00                    and     eax,000000ffH
 229a  0f 84 ad 01 00 00                 je      L362
 22a0  8d 44 24 68                       lea     eax,+68H[esp]
 22a4  8d 54 24 40                       lea     edx,+40H[esp]
 22a8  31 db                             xor     ebx,ebx
 22aa  89 44 24 70                       mov     +70H[esp],eax
 22ae  8d 44 24 40                       lea     eax,+40H[esp]
 22b2  31 c9                             xor     ecx,ecx
 22b4  e8 00 00 00 00                    call    near BigInt::BigInt()
 22b9  8d 44 24 50                       lea     eax,+50H[esp]
 22bd  83 c2 04          L343            add     edx,00000004H
 22c0  43                                inc     ebx
 22c1  8b 30                             mov     esi,[eax]
 22c3  8b 38                             mov     edi,[eax]
 22c5  83 c0 04                          add     eax,00000004H
 22c8  01 ff                             add     edi,edi
 22ca  c1 ee 1f                          shr     esi,1fH
 22cd  09 cf                             or      edi,ecx
 22cf  89 f1                             mov     ecx,esi
 22d1  89 7a fc                          mov     -4H[edx],edi
 22d4  83 fb 02                          cmp     ebx,00000002H
 22d7  73 16                             jae     L345
 22d9  eb e2                             jmp     L343
 22db  42                L344            inc     edx
 22dc  c7 00 00 00 00 00                 mov     dword ptr [eax],00000000H
 22e2  83 c0 04                          add     eax,00000004H
 22e5  83 fa 02                          cmp     edx,00000002H
 22e8  72 22                             jb      L346
 22ea  e9 6a ff ff ff                    jmp     L337
 22ef  8d 54 24 40       L345            lea     edx,+40H[esp]
 22f3  8d 44 24 68                       lea     eax,+68H[esp]
 22f7  8d 7c 24 50                       lea     edi,+50H[esp]
 22fb  e8 00 00 00 00                    call    near BigInt::BigInt( BigInt const near & )
 2300  8b 74 24 70                       mov     esi,+70H[esp]
 2304  8d 44 24 28                       lea     eax,+28H[esp]
 2308  31 d2                             xor     edx,edx
 230a  a5                                movsd   
 230b  a5                                movsd   
 230c  8b 08             L346            mov     ecx,[eax]
 230e  83 f9 ff                          cmp     ecx,0ffffffffH
 2311  74 c8                             je      L344
 2313  8d 71 01                          lea     esi,+1H[ecx]
 2316  89 30                             mov     [eax],esi
 2318  e9 3c ff ff ff                    jmp     L337
 231d  76 07             L347            jbe     L348
 231f  b9 01 00 00 00                    mov     ecx,00000001H
 2324  eb 09                             jmp     L350
 2326  4a                L348            dec     edx
 2327  48                                dec     eax
 2328  e9 33 01 00 00                    jmp     L363
 232d  31 c9             L349            xor     ecx,ecx
 232f  85 c9             L350            test    ecx,ecx
 2331  0f 95 c0                          setne   al
 2334  25 ff 00 00 00                    and     eax,000000ffH
 2339  0f 84 a1 01 00 00                 je      L372
 233f  8d 44 24 48                       lea     eax,+48H[esp]
 2343  8d 5c 24 58                       lea     ebx,+58H[esp]
 2347  31 d2                             xor     edx,edx
 2349  89 44 24 74                       mov     +74H[esp],eax
 234d  8d 44 24 58                       lea     eax,+58H[esp]
 2351  31 c9                             xor     ecx,ecx
 2353  e8 00 00 00 00                    call    near BigInt::BigInt()
 2358  8d 44 24 60                       lea     eax,+60H[esp]
 235c  83 c3 04          L351            add     ebx,00000004H
 235f  42                                inc     edx
 2360  8b 38                             mov     edi,[eax]
 2362  8b 30                             mov     esi,[eax]
 2364  83 c0 04                          add     eax,00000004H
 2367  01 f6                             add     esi,esi
 2369  c1 ef 1f                          shr     edi,1fH
 236c  09 ce                             or      esi,ecx
 236e  89 f9                             mov     ecx,edi
 2370  89 73 fc                          mov     -4H[ebx],esi
 2373  83 fa 02                          cmp     edx,00000002H
 2376  72 e4                             jb      L351
 2378  8d 54 24 58                       lea     edx,+58H[esp]
 237c  8d 44 24 48                       lea     eax,+48H[esp]
 2380  8d 7c 24 60                       lea     edi,+60H[esp]
 2384  8d 5c 24 34                       lea     ebx,+34H[esp]
 2388  e8 00 00 00 00                    call    near BigInt::BigInt( BigInt const near & )
 238d  8b 74 24 74                       mov     esi,+74H[esp]
 2391  8d 44 24 10                       lea     eax,+10H[esp]
 2395  8b 94 24 8c 00 00 
       00                                mov     edx,+8cH[esp]
 239c  a5                                movsd   
 239d  a5                                movsd   
 239e  89 44 24 78                       mov     +78H[esp],eax
 23a2  8d 44 24 30                       lea     eax,+30H[esp]
 23a6  31 f6                             xor     esi,esi
 23a8  e8 00 00 00 00                    call    near BigInt::BigInt()
 23ad  b8 01 00 00 00                    mov     eax,00000001H
 23b2  89 f7             L352            mov     edi,esi
 23b4  8b 0a                             mov     ecx,[edx]
 23b6  83 eb 04                          sub     ebx,00000004H
 23b9  89 ce                             mov     esi,ecx
 23bb  c1 e7 1f                          shl     edi,1fH
 23be  d1 ee                             shr     esi,1
 23c0  83 ea 04                          sub     edx,00000004H
 23c3  09 fe                             or      esi,edi
 23c5  48                                dec     eax
 23c6  89 73 04                          mov     +4H[ebx],esi
 23c9  89 ce                             mov     esi,ecx
 23cb  85 c0                             test    eax,eax
 23cd  7c 13                             jl      L354
 23cf  eb e1                             jmp     L352
 23d1  42                L353            inc     edx
 23d2  c7 00 ff ff ff ff                 mov     dword ptr [eax],0ffffffffH
 23d8  83 c0 04                          add     eax,00000004H
 23db  83 fa 02                          cmp     edx,00000002H
 23de  72 1f                             jb      L355
 23e0  eb 28                             jmp     L356
 23e2  8d 54 24 30       L354            lea     edx,+30H[esp]
 23e6  8d 44 24 10                       lea     eax,+10H[esp]
 23ea  8d 7c 24 50                       lea     edi,+50H[esp]
 23ee  e8 00 00 00 00                    call    near BigInt::BigInt( BigInt const near & )
 23f3  8b 74 24 78                       mov     esi,+78H[esp]
 23f7  8d 44 24 28                       lea     eax,+28H[esp]
 23fb  31 d2                             xor     edx,edx
 23fd  a5                                movsd   
 23fe  a5                                movsd   
 23ff  8b 38             L355            mov     edi,[eax]
 2401  85 ff                             test    edi,edi
 2403  74 cc                             je      L353
 2405  8d 57 ff                          lea     edx,-1H[edi]
 2408  89 10                             mov     [eax],edx
 240a  bb 08 00 00 00    L356            mov     ebx,00000008H
 240f  8b 94 24 94 00 00 
       00                                mov     edx,+94H[esp]
 2416  8b 84 24 98 00 00 
       00                                mov     eax,+98H[esp]
 241d  4b                L357            dec     ebx
 241e  83 fb ff                          cmp     ebx,0ffffffffH
 2421  74 1c                             je      L360
 2423  8a 0a                             mov     cl,[edx]
 2425  8a 28                             mov     ch,[eax]
 2427  38 e9                             cmp     cl,ch
 2429  73 07                             jae     L358
 242b  b9 ff ff ff ff                    mov     ecx,0ffffffffH
 2430  eb 0f                             jmp     L361
 2432  76 07             L358            jbe     L359
 2434  b9 01 00 00 00                    mov     ecx,00000001H
 2439  eb 06                             jmp     L361
 243b  4a                L359            dec     edx
 243c  48                                dec     eax
 243d  eb de                             jmp     L357
 243f  31 c9             L360            xor     ecx,ecx
 2441  85 c9             L361            test    ecx,ecx
 2443  0f 9d c0                          setge   al
 2446  25 ff 00 00 00                    and     eax,000000ffH
 244b  75 44                             jne     L365
 244d  bb 08 00 00 00    L362            mov     ebx,00000008H
 2452  8b 94 24 98 00 00 
       00                                mov     edx,+98H[esp]
 2459  8b 84 24 90 00 00 
       00                                mov     eax,+90H[esp]
 2460  4b                L363            dec     ebx
 2461  83 fb ff                          cmp     ebx,0ffffffffH
 2464  0f 84 c3 fe ff ff                 je      L349
 246a  8a 0a                             mov     cl,[edx]
 246c  8a 28                             mov     ch,[eax]
 246e  38 e9                             cmp     cl,ch
 2470  0f 83 a7 fe ff ff                 jae     L347
 2476  b9 ff ff ff ff                    mov     ecx,0ffffffffH
 247b  e9 af fe ff ff                    jmp     L350
 2480  42                L364            inc     edx
 2481  c7 00 00 00 00 00                 mov     dword ptr [eax],00000000H
 2487  83 c0 04                          add     eax,00000004H
 248a  83 fa 02                          cmp     edx,00000002H
 248d  72 08                             jb      L366
 248f  eb 12                             jmp     L367
 2491  8d 44 24 60       L365            lea     eax,+60H[esp]
 2495  31 d2                             xor     edx,edx
 2497  8b 18             L366            mov     ebx,[eax]
 2499  83 fb ff                          cmp     ebx,0ffffffffH
 249c  74 e2                             je      L364
 249e  8d 4b 01                          lea     ecx,+1H[ebx]
 24a1  89 08                             mov     [eax],ecx
 24a3  8d 74 24 50       L367            lea     esi,+50H[esp]
 24a7  89 e0                             mov     eax,esp
 24a9  31 d2                             xor     edx,edx
 24ab  31 c9                             xor     ecx,ecx
 24ad  eb 1c                             jmp     L371
 24af  39 df             L368            cmp     edi,ebx
 24b1  76 07                             jbe     L369
 24b3  ba 01 00 00 00                    mov     edx,00000001H
 24b8  eb 02                             jmp     L370
 24ba  31 d2             L369            xor     edx,edx
 24bc  83 c0 04          L370            add     eax,00000004H
 24bf  41                                inc     ecx
 24c0  83 c6 04                          add     esi,00000004H
 24c3  89 78 fc                          mov     -4H[eax],edi
 24c6  83 f9 02                          cmp     ecx,00000002H
 24c9  73 82                             jae     L362
 24cb  8b 18             L371            mov     ebx,[eax]
 24cd  8b 3e                             mov     edi,[esi]
 24cf  29 fb                             sub     ebx,edi
 24d1  89 df                             mov     edi,ebx
 24d3  29 d7                             sub     edi,edx
 24d5  3b 18                             cmp     ebx,[eax]
 24d7  76 d6                             jbe     L368
 24d9  ba 01 00 00 00                    mov     edx,00000001H
 24de  eb dc                             jmp     L370

                        *p1++=digit(r);
 24e0  89 e6             L372            mov     esi,esp
 24e2  8d 7c 24 7c                       lea     edi,+7cH[esp]
 24e6  31 db                             xor     ebx,ebx
 24e8  89 e9                             mov     ecx,ebp
 24ea  89 5c 24 7c                       mov     +7cH[esp],ebx
 24ee  57                                push    edi
 24ef  89 c8                             mov     eax,ecx
 24f1  c1 e9 02                          shr     ecx,02H
 24f4  f2 a5                             repne   movsd    
 24f6  8a c8                             mov     cl,al
 24f8  80 e1 03                          and     cl,03H
 24fb  f2 a4                             repne   movsb    
 24fd  5f                                pop     edi
 24fe  8b 44 24 7c                       mov     eax,+7cH[esp]
 2502  83 f8 0a                          cmp     eax,0000000aH
 2505  7d 04                             jge     L373
 2507  04 30                             add     al,30H
 2509  eb 02                             jmp     L374
 250b  04 57             L373            add     al,57H
 250d  8b 94 24 88 00 00 
       00                L374            mov     edx,+88H[esp]
 2514  8d 72 01                          lea     esi,+1H[edx]
 2517  88 02                             mov     [edx],al
 2519  89 b4 24 88 00 00 
       00                                mov     +88H[esp],esi

                }
 2520  e9 72 fc ff ff                    jmp     L328
 2525  8b bc 24 88 00 00 
       00                L375            mov     edi,+88H[esp]

                *p1--='\0';

                //reverse the string
 252c  8b 84 24 88 00 00 
       00                                mov     eax,+88H[esp]
 2533  4f                                dec     edi
 2534  c6 00 00                          mov     byte ptr [eax],00H

                unsigned char *p2=string;
                while(p1>p2) {
 2537  8b 84 24 84 00 00 
       00                                mov     eax,+84H[esp]
 253e  89 bc 24 88 00 00 
       00                                mov     +88H[esp],edi
 2545  39 c7                             cmp     edi,eax
 2547  76 35                             jbe     L378

                        char tmp=*p1;
 2549  8b 94 24 88 00 00 
       00                L376            mov     edx,+88H[esp]
 2550  8a 12                             mov     dl,[edx]
 2552  8b 9c 24 88 00 00 
       00                                mov     ebx,+88H[esp]

                        *p1=*p2;
 2559  8a 30                             mov     dh,[eax]
 255b  88 33                             mov     [ebx],dh

                        *p2=tmp;
 255d  88 10                             mov     [eax],dl

                        --p1;
 255f  8d 53 ff                          lea     edx,-1H[ebx]

                        ++p2;
 2562  40                                inc     eax
 2563  89 94 24 88 00 00 
       00                                mov     +88H[esp],edx

                }
 256a  39 d0                             cmp     eax,edx
 256c  72 db                             jb      L376

                return string;
        } else {
                unsigned char *p=string;
 256e  eb 0e                             jmp     L378

                *p++='0';
 2570  8b 84 24 84 00 00 
       00                L377            mov     eax,+84H[esp]
 2577  c6 00 30                          mov     byte ptr [eax],30H
 257a  40                                inc     eax

                *p='\0';
 257b  c6 00 00                          mov     byte ptr [eax],00H

                return string;
        }
 257e  8b 84 24 84 00 00 
       00                L378            mov     eax,+84H[esp]

}

 2585  81 c4 9c 00 00 00                 add     esp,0000009cH
 258b  5d                                pop     ebp
 258c  5f                                pop     edi
 258d  5e                                pop     esi
 258e  59                                pop     ecx
 258f  c3                                ret     

BigInt atob(const unsigned char *s) {
 2590                    BigInt near atob( char unsigned const near * ):
 2590  53                                push    ebx
 2591  51                                push    ecx
 2592  56                                push    esi
 2593  57                                push    edi
 2594  55                                push    ebp
 2595  83 ec 74                          sub     esp,00000074H
 2598  89 44 24 58                       mov     +58H[esp],eax
 259c  89 54 24 6c                       mov     +6cH[esp],edx

        BigInt result=0;
 25a0  bb 08 00 00 00                    mov     ebx,00000008H
 25a5  8d 44 24 48                       lea     eax,+48H[esp]
 25a9  31 d2                             xor     edx,edx
 25ab  e8 00 00 00 00                    call    memset_

        int isNegative=0;
 25b0  31 d2                             xor     edx,edx
 25b2  89 54 24 68                       mov     +68H[esp],edx

        while(isspace(*s)) ++s;

 25b6  8b 44 24 6c       L379            mov     eax,+6cH[esp]
 25ba  8a 00                             mov     al,[eax]
 25bc  fe c0                             inc     al
 25be  25 ff 00 00 00                    and     eax,000000ffH
 25c3  8a 80 00 00 00 00                 mov     al,__IsTable[eax]
 25c9  31 d2                             xor     edx,edx
 25cb  24 02                             and     al,02H
 25cd  88 c2                             mov     dl,al
 25cf  8b 44 24 6c                       mov     eax,+6cH[esp]
 25d3  40                                inc     eax
 25d4  85 d2                             test    edx,edx
 25d6  74 06                             je      L380
 25d8  89 44 24 6c                       mov     +6cH[esp],eax
 25dc  eb d8                             jmp     L379

        if(*s=='-') {
 25de  8b 5c 24 6c       L380            mov     ebx,+6cH[esp]
 25e2  8a 13                             mov     dl,[ebx]
 25e4  83 fa 2d                          cmp     edx,0000002dH
 25e7  75 0d                             jne     L381

                isNegative=1;
 25e9  bb 01 00 00 00                    mov     ebx,00000001H

                ++s;
        }

 25ee  89 44 24 6c                       mov     +6cH[esp],eax
 25f2  89 5c 24 68                       mov     +68H[esp],ebx

        while(isdigit(*s)) {
 25f6  8d 44 24 10       L381            lea     eax,+10H[esp]
 25fa  83 c0 04                          add     eax,00000004H
 25fd  89 44 24 70                       mov     +70H[esp],eax
 2601  8b 44 24 6c       L382            mov     eax,+6cH[esp]
 2605  8a 00                             mov     al,[eax]
 2607  fe c0                             inc     al
 2609  25 ff 00 00 00                    and     eax,000000ffH
 260e  8a 80 00 00 00 00                 mov     al,__IsTable[eax]
 2614  24 20                             and     al,20H
 2616  25 ff 00 00 00                    and     eax,000000ffH
 261b  0f 84 c3 01 00 00                 je      L403

                result*=10;
 2621  bb 08 00 00 00                    mov     ebx,00000008H
 2626  8d 44 24 38                       lea     eax,+38H[esp]
 262a  be 0a 00 00 00                    mov     esi,0000000aH
 262f  31 d2                             xor     edx,edx
 2631  8d 7c 24 30                       lea     edi,+30H[esp]
 2635  e8 00 00 00 00                    call    memset_
 263a  89 74 24 38                       mov     +38H[esp],esi
 263e  8d 74 24 48                       lea     esi,+48H[esp]
 2642  a5                                movsd   
 2643  a5                                movsd   
 2644  bb 08 00 00 00                    mov     ebx,00000008H
 2649  8d 7c 24 10                       lea     edi,+10H[esp]
 264d  8d 74 24 38                       lea     esi,+38H[esp]
 2651  8d 44 24 48                       lea     eax,+48H[esp]
 2655  31 d2                             xor     edx,edx
 2657  a5                                movsd   
 2658  a5                                movsd   
 2659  e8 00 00 00 00                    call    memset_
 265e  bd 01 00 00 00                    mov     ebp,00000001H
 2663  8d 44 24 10       L383            lea     eax,+10H[esp]
 2667  31 d2                             xor     edx,edx
 2669  83 38 00          L384            cmp     dword ptr [eax],00000000H
 266c  74 04                             je      L385
 266e  31 c0                             xor     eax,eax
 2670  eb 0b                             jmp     L386
 2672  42                L385            inc     edx
 2673  83 c0 04                          add     eax,00000004H
 2676  83 fa 02                          cmp     edx,00000002H
 2679  72 ee                             jb      L384
 267b  89 e8                             mov     eax,ebp
 267d  85 c0             L386            test    eax,eax
 267f  0f 85 e2 00 00 00                 jne     L394
 2685  8b 44 24 10                       mov     eax,+10H[esp]
 2689  21 e8                             and     eax,ebp
 268b  74 36                             je      L391
 268d  8d 5c 24 30                       lea     ebx,+30H[esp]
 2691  8d 44 24 48                       lea     eax,+48H[esp]
 2695  31 d2                             xor     edx,edx
 2697  31 f6                             xor     esi,esi
 2699  eb 19                             jmp     L390
 269b  39 cf             L387            cmp     edi,ecx
 269d  73 04                             jae     L388
 269f  89 ea                             mov     edx,ebp
 26a1  eb 02                             jmp     L389
 26a3  31 d2             L388            xor     edx,edx
 26a5  83 c0 04          L389            add     eax,00000004H
 26a8  46                                inc     esi
 26a9  83 c3 04                          add     ebx,00000004H
 26ac  89 78 fc                          mov     -4H[eax],edi
 26af  83 fe 02                          cmp     esi,00000002H
 26b2  73 0f                             jae     L391
 26b4  8b 0b             L390            mov     ecx,[ebx]
 26b6  03 08                             add     ecx,[eax]
 26b8  8d 3c 11                          lea     edi,[ecx+edx]
 26bb  3b 0b                             cmp     ecx,[ebx]
 26bd  73 dc                             jae     L387
 26bf  89 ea                             mov     edx,ebp
 26c1  eb e2                             jmp     L389
 26c3  8d 44 24 08       L391            lea     eax,+8H[esp]
 26c7  8b 54 24 70                       mov     edx,+70H[esp]
 26cb  89 eb                             mov     ebx,ebp
 26cd  89 44 24 5c                       mov     +5cH[esp],eax
 26d1  8d 44 24 40                       lea     eax,+40H[esp]
 26d5  31 f6                             xor     esi,esi
 26d7  e8 00 00 00 00                    call    near BigInt::BigInt()
 26dc  8d 44 24 44                       lea     eax,+44H[esp]
 26e0  c1 e6 1f          L392            shl     esi,1fH
 26e3  8b 0a                             mov     ecx,[edx]
 26e5  83 e8 04                          sub     eax,00000004H
 26e8  89 cf                             mov     edi,ecx
 26ea  83 ea 04                          sub     edx,00000004H
 26ed  d1 ef                             shr     edi,1
 26ef  4b                                dec     ebx
 26f0  09 f7                             or      edi,esi
 26f2  89 ce                             mov     esi,ecx
 26f4  89 78 04                          mov     +4H[eax],edi
 26f7  85 db                             test    ebx,ebx
 26f9  7d e5                             jge     L392
 26fb  8d 54 24 40                       lea     edx,+40H[esp]
 26ff  8d 44 24 08                       lea     eax,+8H[esp]
 2703  8d 7c 24 10                       lea     edi,+10H[esp]
 2707  8d 5c 24 50                       lea     ebx,+50H[esp]
 270b  e8 00 00 00 00                    call    near BigInt::BigInt( BigInt const near & )
 2710  8b 74 24 5c                       mov     esi,+5cH[esp]
 2714  31 c9                             xor     ecx,ecx
 2716  8d 44 24 28                       lea     eax,+28H[esp]
 271a  a5                                movsd   
 271b  a5                                movsd   
 271c  89 44 24 60                       mov     +60H[esp],eax
 2720  8d 44 24 50                       lea     eax,+50H[esp]
 2724  31 d2                             xor     edx,edx
 2726  e8 00 00 00 00                    call    near BigInt::BigInt()
 272b  8d 44 24 30                       lea     eax,+30H[esp]
 272f  83 c3 04          L393            add     ebx,00000004H
 2732  42                                inc     edx
 2733  8b 30                             mov     esi,[eax]
 2735  8b 38                             mov     edi,[eax]
 2737  83 c0 04                          add     eax,00000004H
 273a  01 ff                             add     edi,edi
 273c  c1 ee 1f                          shr     esi,1fH
 273f  09 cf                             or      edi,ecx
 2741  89 f1                             mov     ecx,esi
 2743  89 7b fc                          mov     -4H[ebx],edi
 2746  83 fa 02                          cmp     edx,00000002H
 2749  72 e4                             jb      L393
 274b  8d 54 24 50                       lea     edx,+50H[esp]
 274f  8d 44 24 28                       lea     eax,+28H[esp]
 2753  8d 7c 24 30                       lea     edi,+30H[esp]
 2757  e8 00 00 00 00                    call    near BigInt::BigInt( BigInt const near & )
 275c  8b 74 24 60                       mov     esi,+60H[esp]
 2760  a5                                movsd   
 2761  a5                                movsd   
 2762  e9 fc fe ff ff                    jmp     L383
 2767  8b 54 24 6c       L394            mov     edx,+6cH[esp]

                result+=(*s-'0');
 276b  31 c0                             xor     eax,eax
 276d  8a 02                             mov     al,[edx]
 276f  83 e8 30                          sub     eax,00000030H
 2772  89 c1                             mov     ecx,eax
 2774  85 c0                             test    eax,eax
 2776  7d 10                             jge     L395
 2778  bb 08 00 00 00                    mov     ebx,00000008H
 277d  ba ff ff ff ff                    mov     edx,0ffffffffH
 2782  8d 44 24 20                       lea     eax,+20H[esp]
 2786  eb 0b                             jmp     L396
 2788  bb 08 00 00 00    L395            mov     ebx,00000008H
 278d  8d 44 24 20                       lea     eax,+20H[esp]
 2791  31 d2                             xor     edx,edx
 2793  e8 00 00 00 00    L396            call    memset_
 2798  85 c9                             test    ecx,ecx
 279a  74 04                             je      L397
 279c  89 4c 24 20                       mov     +20H[esp],ecx
 27a0  8d 74 24 20       L397            lea     esi,+20H[esp]
 27a4  8d 54 24 48                       lea     edx,+48H[esp]
 27a8  31 c0                             xor     eax,eax
 27aa  31 c9                             xor     ecx,ecx
 27ac  bd 01 00 00 00                    mov     ebp,00000001H
 27b1  eb 19                             jmp     L401
 27b3  39 df             L398            cmp     edi,ebx
 27b5  73 04                             jae     L399
 27b7  89 e8                             mov     eax,ebp
 27b9  eb 02                             jmp     L400
 27bb  31 c0             L399            xor     eax,eax
 27bd  83 c2 04          L400            add     edx,00000004H
 27c0  41                                inc     ecx
 27c1  83 c6 04                          add     esi,00000004H
 27c4  89 7a fc                          mov     -4H[edx],edi
 27c7  83 f9 02                          cmp     ecx,00000002H
 27ca  73 0f                             jae     L402
 27cc  8b 1e             L401            mov     ebx,[esi]
 27ce  03 1a                             add     ebx,[edx]
 27d0  8d 3c 03                          lea     edi,[ebx+eax]
 27d3  3b 1e                             cmp     ebx,[esi]
 27d5  73 dc                             jae     L398
 27d7  89 e8                             mov     eax,ebp
 27d9  eb e2                             jmp     L400

                ++s;
 27db  ff 44 24 6c       L402            inc     dword ptr +6cH[esp]

        }
 27df  e9 1d fe ff ff                    jmp     L382

        if(isNegative) result=-result;

 27e4  83 7c 24 68 00    L403            cmp     dword ptr +68H[esp],00000000H
 27e9  74 5d                             je      L409
 27eb  89 e0                             mov     eax,esp
 27ed  8d 7c 24 18                       lea     edi,+18H[esp]
 27f1  8d 74 24 48                       lea     esi,+48H[esp]
 27f5  31 d2                             xor     edx,edx
 27f7  89 44 24 64                       mov     +64H[esp],eax
 27fb  a5                                movsd   
 27fc  a5                                movsd   
 27fd  8d 44 24 18                       lea     eax,+18H[esp]
 2801  8b 38             L404            mov     edi,[eax]
 2803  83 c0 04                          add     eax,00000004H
 2806  f7 d7                             not     edi
 2808  42                                inc     edx
 2809  89 78 fc                          mov     -4H[eax],edi
 280c  83 fa 02                          cmp     edx,00000002H
 280f  73 13                             jae     L406
 2811  eb ee                             jmp     L404
 2813  42                L405            inc     edx
 2814  c7 00 00 00 00 00                 mov     dword ptr [eax],00000000H
 281a  83 c0 04                          add     eax,00000004H
 281d  83 fa 02                          cmp     edx,00000002H
 2820  72 08                             jb      L407
 2822  eb 12                             jmp     L408
 2824  8d 44 24 18       L406            lea     eax,+18H[esp]
 2828  31 d2                             xor     edx,edx
 282a  8b 28             L407            mov     ebp,[eax]
 282c  83 fd ff                          cmp     ebp,0ffffffffH
 282f  74 e2                             je      L405
 2831  8d 55 01                          lea     edx,+1H[ebp]
 2834  89 10                             mov     [eax],edx
 2836  89 e7             L408            mov     edi,esp
 2838  8d 74 24 18                       lea     esi,+18H[esp]
 283c  a5                                movsd   
 283d  a5                                movsd   
 283e  8d 7c 24 48                       lea     edi,+48H[esp]
 2842  8b 74 24 64                       mov     esi,+64H[esp]
 2846  a5                                movsd   
 2847  a5                                movsd   

        return result;
 2848  8b 7c 24 58       L409            mov     edi,+58H[esp]
 284c  8d 74 24 48                       lea     esi,+48H[esp]
 2850  a5                                movsd   
 2851  a5                                movsd   

}


 2852  8b 44 24 58                       mov     eax,+58H[esp]
 2856  83 c4 74                          add     esp,00000074H
 2859  5d                                pop     ebp
 285a  5f                                pop     edi
 285b  5e                                pop     esi
 285c  59                                pop     ecx
 285d  5b                                pop     ebx
 285e  c3                                ret     
 285f  90                                nop     

ostream& operator<<(ostream &os, const BigInt &b) {
        char *cp=new char[bigint_bytes*3];
 2860                    ostream near & near operator <<( ostream near &, BigInt const near & ):
 2860  53                                push    ebx
 2861  51                                push    ecx
 2862  56                                push    esi
 2863  57                                push    edi
 2864  55                                push    ebp
 2865  83 ec 68                          sub     esp,00000068H
 2868  89 44 24 60                       mov     +60H[esp],eax
 286c  b8 18 00 00 00                    mov     eax,00000018H
 2871  bb 0a 00 00 00                    mov     ebx,0000000aH
 2876  8d 7c 24 30                       lea     edi,+30H[esp]
 287a  e8 00 00 00 00                    call    void near * near operator new []( int unsigned )
 287f  89 d6                             mov     esi,edx
 2881  89 44 24 5c                       mov     +5cH[esp],eax
 2885  89 44 24 64                       mov     +64H[esp],eax
 2889  31 d2                             xor     edx,edx
 288b  a5                                movsd   
 288c  a5                                movsd   
 288d  8d 44 24 30                       lea     eax,+30H[esp]
 2891  83 38 00          L410            cmp     dword ptr [eax],00000000H
 2894  74 04                             je      L411
 2896  31 c0                             xor     eax,eax
 2898  eb 0e                             jmp     L412
 289a  42                L411            inc     edx
 289b  83 c0 04                          add     eax,00000004H
 289e  83 fa 02                          cmp     edx,00000002H
 28a1  72 ee                             jb      L410

        btoa(b,(unsigned char*)cp,10);
 28a3  b8 01 00 00 00                    mov     eax,00000001H
 28a8  85 c0             L412            test    eax,eax
 28aa  0f 85 45 02 00 00                 jne     L431
 28b0  89 d9                             mov     ecx,ebx
 28b2  85 db                             test    ebx,ebx
 28b4  7d 10                             jge     L413
 28b6  bb 08 00 00 00                    mov     ebx,00000008H
 28bb  ba ff ff ff ff                    mov     edx,0ffffffffH
 28c0  8d 44 24 48                       lea     eax,+48H[esp]
 28c4  eb 0b                             jmp     L414
 28c6  bb 08 00 00 00    L413            mov     ebx,00000008H
 28cb  8d 44 24 48                       lea     eax,+48H[esp]
 28cf  31 d2                             xor     edx,edx
 28d1  e8 00 00 00 00    L414            call    memset_
 28d6  85 c9                             test    ecx,ecx
 28d8  74 04                             je      L415
 28da  89 4c 24 48                       mov     +48H[esp],ecx
 28de  8b 6c 24 64       L415            mov     ebp,+64H[esp]
 28e2  8d 44 24 30       L416            lea     eax,+30H[esp]
 28e6  31 d2                             xor     edx,edx
 28e8  83 38 00          L417            cmp     dword ptr [eax],00000000H
 28eb  74 04                             je      L418
 28ed  31 c0                             xor     eax,eax
 28ef  eb 0e                             jmp     L419
 28f1  42                L418            inc     edx
 28f2  83 c0 04                          add     eax,00000004H
 28f5  83 fa 02                          cmp     edx,00000002H
 28f8  72 ee                             jb      L417
 28fa  b8 01 00 00 00                    mov     eax,00000001H
 28ff  85 c0             L419            test    eax,eax
 2901  0f 85 ce 01 00 00                 jne     L429
 2907  89 e7                             mov     edi,esp
 2909  8d 74 24 30                       lea     esi,+30H[esp]
 290d  bb 08 00 00 00                    mov     ebx,00000008H
 2912  8d 44 24 10                       lea     eax,+10H[esp]
 2916  31 d2                             xor     edx,edx
 2918  a5                                movsd   
 2919  a5                                movsd   
 291a  e8 00 00 00 00                    call    memset_
 291f  bb 08 00 00 00                    mov     ebx,00000008H
 2924  8d 54 24 10                       lea     edx,+10H[esp]
 2928  8d 44 24 48                       lea     eax,+48H[esp]
 292c  e8 00 00 00 00                    call    int near memcmprvs( void const near *, void const near *, int unsigned )
 2931  85 c0                             test    eax,eax
 2933  0f 94 c0                          sete    al
 2936  25 ff 00 00 00                    and     eax,000000ffH
 293b  0f 85 59 01 00 00                 jne     L426
 2941  bb 08 00 00 00                    mov     ebx,00000008H
 2946  8d 44 24 20                       lea     eax,+20H[esp]
 294a  8d 7c 24 30                       lea     edi,+30H[esp]
 294e  31 d2                             xor     edx,edx
 2950  8d 74 24 20                       lea     esi,+20H[esp]
 2954  e8 00 00 00 00                    call    memset_
 2959  a5                                movsd   
 295a  a5                                movsd   
 295b  8d 7c 24 18                       lea     edi,+18H[esp]
 295f  89 e6                             mov     esi,esp
 2961  b9 08 00 00 00                    mov     ecx,00000008H
 2966  a5                                movsd   
 2967  a5                                movsd   
 2968  bb 08 00 00 00                    mov     ebx,00000008H
 296d  8d 7c 24 28                       lea     edi,+28H[esp]
 2971  8d 74 24 48                       lea     esi,+48H[esp]
 2975  8d 44 24 40                       lea     eax,+40H[esp]
 2979  31 d2                             xor     edx,edx
 297b  a5                                movsd   
 297c  a5                                movsd   
 297d  e8 00 00 00 00                    call    memset_
 2982  be 01 00 00 00                    mov     esi,00000001H
 2987  8d 54 24 28       L420            lea     edx,+28H[esp]
 298b  8d 44 24 18                       lea     eax,+18H[esp]
 298f  89 cb                             mov     ebx,ecx
 2991  e8 00 00 00 00                    call    int near memcmprvs( void const near *, void const near *, int unsigned )
 2996  85 c0                             test    eax,eax
 2998  0f 9d c0                          setge   al
 299b  25 ff 00 00 00                    and     eax,000000ffH
 29a0  74 25                             je      L421
 29a2  8d 54 24 28                       lea     edx,+28H[esp]
 29a6  8d 44 24 50                       lea     eax,+50H[esp]
 29aa  89 f3                             mov     ebx,esi
 29ac  e8 00 00 00 00                    call    BigInt near operator <<( BigInt const near &, int unsigned )
 29b1  89 c2                             mov     edx,eax
 29b3  8d 44 24 28                       lea     eax,+28H[esp]
 29b7  e8 00 00 00 00                    call    BigInt near & near BigInt::operator =( BigInt const near & )
 29bc  8d 44 24 40                       lea     eax,+40H[esp]
 29c0  e8 00 00 00 00                    call    void near BigInt::incr()
 29c5  eb c0                             jmp     L420
 29c7  bb 08 00 00 00    L421            mov     ebx,00000008H
 29cc  8d 54 24 48                       lea     edx,+48H[esp]
 29d0  8d 44 24 28                       lea     eax,+28H[esp]
 29d4  e8 00 00 00 00                    call    int near memcmprvs( void const near *, void const near *, int unsigned )
 29d9  85 c0                             test    eax,eax
 29db  0f 95 c0                          setne   al
 29de  25 ff 00 00 00                    and     eax,000000ffH
 29e3  0f 84 b1 00 00 00                 je      L426
 29e9  bb 01 00 00 00                    mov     ebx,00000001H
 29ee  8d 54 24 30                       lea     edx,+30H[esp]
 29f2  8d 44 24 08                       lea     eax,+8H[esp]
 29f6  e8 00 00 00 00                    call    BigInt near operator <<( BigInt const near &, int unsigned )
 29fb  89 c2                             mov     edx,eax
 29fd  8d 44 24 30                       lea     eax,+30H[esp]
 2a01  bb 01 00 00 00                    mov     ebx,00000001H
 2a06  e8 00 00 00 00                    call    BigInt near & near BigInt::operator =( BigInt const near & )
 2a0b  8d 54 24 28                       lea     edx,+28H[esp]
 2a0f  8d 44 24 38                       lea     eax,+38H[esp]
 2a13  e8 00 00 00 00                    call    BigInt near operator >>( BigInt const near &, int unsigned )
 2a18  89 c2                             mov     edx,eax
 2a1a  8d 44 24 28                       lea     eax,+28H[esp]
 2a1e  bb 08 00 00 00                    mov     ebx,00000008H
 2a23  e8 00 00 00 00                    call    BigInt near & near BigInt::operator =( BigInt const near & )
 2a28  8d 44 24 40                       lea     eax,+40H[esp]
 2a2c  8d 54 24 28                       lea     edx,+28H[esp]
 2a30  e8 00 00 00 00                    call    void near BigInt::decr()
 2a35  8d 44 24 18                       lea     eax,+18H[esp]
 2a39  e8 00 00 00 00                    call    int near memcmprvs( void const near *, void const near *, int unsigned )
 2a3e  85 c0                             test    eax,eax
 2a40  0f 9d c0                          setge   al
 2a43  25 ff 00 00 00                    and     eax,000000ffH
 2a48  0f 84 79 ff ff ff                 je      L421
 2a4e  8d 44 24 30                       lea     eax,+30H[esp]
 2a52  8d 4c 24 28                       lea     ecx,+28H[esp]
 2a56  e8 00 00 00 00                    call    void near BigInt::incr()
 2a5b  31 d2                             xor     edx,edx
 2a5d  31 f6                             xor     esi,esi
 2a5f  8d 44 24 18                       lea     eax,+18H[esp]
 2a63  eb 20                             jmp     L425
 2a65  39 df             L422            cmp     edi,ebx
 2a67  76 07                             jbe     L423
 2a69  ba 01 00 00 00                    mov     edx,00000001H
 2a6e  eb 02                             jmp     L424
 2a70  31 d2             L423            xor     edx,edx
 2a72  83 c0 04          L424            add     eax,00000004H
 2a75  46                                inc     esi
 2a76  83 c1 04                          add     ecx,00000004H
 2a79  89 78 fc                          mov     -4H[eax],edi
 2a7c  83 fe 02                          cmp     esi,00000002H
 2a7f  0f 83 42 ff ff ff                 jae     L421
 2a85  8b 18             L425            mov     ebx,[eax]
 2a87  8b 39                             mov     edi,[ecx]
 2a89  29 fb                             sub     ebx,edi
 2a8b  89 df                             mov     edi,ebx
 2a8d  29 d7                             sub     edi,edx
 2a8f  3b 18                             cmp     ebx,[eax]
 2a91  76 d2                             jbe     L422
 2a93  ba 01 00 00 00                    mov     edx,00000001H
 2a98  eb d8                             jmp     L424
 2a9a  b9 04 00 00 00    L426            mov     ecx,00000004H
 2a9f  8d 74 24 18                       lea     esi,+18H[esp]
 2aa3  31 db                             xor     ebx,ebx
 2aa5  8d 7c 24 58                       lea     edi,+58H[esp]
 2aa9  89 5c 24 58                       mov     +58H[esp],ebx
 2aad  57                                push    edi
 2aae  89 c8                             mov     eax,ecx
 2ab0  c1 e9 02                          shr     ecx,02H
 2ab3  f2 a5                             repne   movsd    
 2ab5  8a c8                             mov     cl,al
 2ab7  80 e1 03                          and     cl,03H
 2aba  f2 a4                             repne   movsb    
 2abc  5f                                pop     edi
 2abd  8b 44 24 58                       mov     eax,+58H[esp]
 2ac1  83 f8 0a                          cmp     eax,0000000aH
 2ac4  7d 04                             jge     L427
 2ac6  04 30                             add     al,30H
 2ac8  eb 02                             jmp     L428
 2aca  04 57             L427            add     al,57H
 2acc  45                L428            inc     ebp
 2acd  88 45 ff                          mov     -1H[ebp],al
 2ad0  e9 0d fe ff ff                    jmp     L416
 2ad5  8b 44 24 64       L429            mov     eax,+64H[esp]
 2ad9  c6 45 00 00                       mov     byte ptr +0H[ebp],00H
 2add  4d                                dec     ebp
 2ade  39 c5                             cmp     ebp,eax
 2ae0  76 1e                             jbe     L432
 2ae2  8a 55 00          L430            mov     dl,+0H[ebp]
 2ae5  8a 30                             mov     dh,[eax]
 2ae7  40                                inc     eax
 2ae8  88 75 00                          mov     +0H[ebp],dh
 2aeb  4d                                dec     ebp
 2aec  88 50 ff                          mov     -1H[eax],dl
 2aef  39 c5                             cmp     ebp,eax
 2af1  76 0d                             jbe     L432
 2af3  eb ed                             jmp     L430
 2af5  8b 44 24 64       L431            mov     eax,+64H[esp]
 2af9  c6 00 30                          mov     byte ptr [eax],30H
 2afc  40                                inc     eax
 2afd  c6 00 00                          mov     byte ptr [eax],00H

        os << cp;
 2b00  8b 54 24 5c       L432            mov     edx,+5cH[esp]
 2b04  8b 44 24 60                       mov     eax,+60H[esp]
 2b08  e8 00 00 00 00                    call    ostream near & near ostream::operator <<( char const near * )

        delete[] cp;
        return os;
 2b0d  8b 44 24 5c                       mov     eax,+5cH[esp]
 2b11  e8 00 00 00 00                    call    void near operator delete []( void near * )

}

 2b16  8b 44 24 60                       mov     eax,+60H[esp]
 2b1a  83 c4 68                          add     esp,00000068H
 2b1d  5d                                pop     ebp
 2b1e  5f                                pop     edi
 2b1f  5e                                pop     esi
 2b20  59                                pop     ecx
 2b21  5b                                pop     ebx
 2b22  c3                                ret     
 2b23  90                                nop     

istream& operator>>(istream &is, BigInt &b) {
 2b24                    istream near & near operator >>( istream near &, BigInt near & ):
 2b24  53                                push    ebx
 2b25  51                                push    ecx
 2b26  56                                push    esi
 2b27  57                                push    edi
 2b28  55                                push    ebp
 2b29  83 ec 64                          sub     esp,00000064H
 2b2c  89 44 24 50                       mov     +50H[esp],eax
 2b30  89 54 24 54                       mov     +54H[esp],edx

        b=BigInt(0);
        char c;
 2b34  bb 08 00 00 00                    mov     ebx,00000008H
 2b39  8d 44 24 30                       lea     eax,+30H[esp]
 2b3d  31 d2                             xor     edx,edx
 2b3f  8b 7c 24 54                       mov     edi,+54H[esp]
 2b43  e8 00 00 00 00                    call    memset_
 2b48  8d 44 24 08                       lea     eax,+8H[esp]
 2b4c  8d 74 24 30                       lea     esi,+30H[esp]
 2b50  83 c0 04                          add     eax,00000004H
 2b53  a5                                movsd   
 2b54  a5                                movsd   
 2b55  89 44 24 58                       mov     +58H[esp],eax

        while(is>>c && c>='0' && c<='9') {
 2b59  8d 54 24 60       L433            lea     edx,+60H[esp]
 2b5d  8b 44 24 50                       mov     eax,+50H[esp]
 2b61  e8 00 00 00 00                    call    istream near & near istream::operator >>( char near & )
 2b66  8b 10                             mov     edx,[eax]
 2b68  03 42 04                          add     eax,+4H[edx]
 2b6b  8b 40 10                          mov     eax,+10H[eax]
 2b6e  83 e0 03                          and     eax,00000003H
 2b71  0f 94 c0                          sete    al
 2b74  25 ff 00 00 00                    and     eax,000000ffH
 2b79  0f 84 cc 01 00 00                 je      L453
 2b7f  8a 64 24 60                       mov     ah,+60H[esp]
 2b83  80 fc 30                          cmp     ah,30H
 2b86  0f 82 bf 01 00 00                 jb      L453
 2b8c  80 fc 39                          cmp     ah,39H
 2b8f  0f 87 b6 01 00 00                 ja      L453

                b*=10;
 2b95  bb 08 00 00 00                    mov     ebx,00000008H
 2b9a  8d 44 24 28                       lea     eax,+28H[esp]
 2b9e  31 d2                             xor     edx,edx
 2ba0  b9 0a 00 00 00                    mov     ecx,0000000aH
 2ba5  e8 00 00 00 00                    call    memset_
 2baa  8b 44 24 54                       mov     eax,+54H[esp]
 2bae  89 e7                             mov     edi,esp
 2bb0  89 c6                             mov     esi,eax
 2bb2  89 4c 24 28                       mov     +28H[esp],ecx
 2bb6  a5                                movsd   
 2bb7  a5                                movsd   
 2bb8  bb 08 00 00 00                    mov     ebx,00000008H
 2bbd  8d 7c 24 08                       lea     edi,+8H[esp]
 2bc1  8d 74 24 28                       lea     esi,+28H[esp]
 2bc5  31 d2                             xor     edx,edx
 2bc7  89 44 24 5c                       mov     +5cH[esp],eax
 2bcb  a5                                movsd   
 2bcc  a5                                movsd   
 2bcd  e8 00 00 00 00                    call    memset_
 2bd2  bd 01 00 00 00                    mov     ebp,00000001H
 2bd7  8d 54 24 08       L434            lea     edx,+8H[esp]
 2bdb  31 c0                             xor     eax,eax
 2bdd  83 3a 00          L435            cmp     dword ptr [edx],00000000H
 2be0  74 04                             je      L436
 2be2  31 c0                             xor     eax,eax
 2be4  eb 0b                             jmp     L437
 2be6  40                L436            inc     eax
 2be7  83 c2 04                          add     edx,00000004H
 2bea  83 f8 02                          cmp     eax,00000002H
 2bed  72 ee                             jb      L435
 2bef  89 e8                             mov     eax,ebp
 2bf1  85 c0             L437            test    eax,eax
 2bf3  0f 85 dc 00 00 00                 jne     L445
 2bf9  8b 44 24 08                       mov     eax,+8H[esp]
 2bfd  21 e8                             and     eax,ebp
 2bff  74 34                             je      L442
 2c01  89 e0                             mov     eax,esp
 2c03  8b 54 24 5c                       mov     edx,+5cH[esp]
 2c07  31 db                             xor     ebx,ebx
 2c09  31 f6                             xor     esi,esi
 2c0b  eb 19                             jmp     L441
 2c0d  39 cf             L438            cmp     edi,ecx
 2c0f  73 04                             jae     L439
 2c11  89 eb                             mov     ebx,ebp
 2c13  eb 02                             jmp     L440
 2c15  31 db             L439            xor     ebx,ebx
 2c17  83 c2 04          L440            add     edx,00000004H
 2c1a  46                                inc     esi
 2c1b  83 c0 04                          add     eax,00000004H
 2c1e  89 7a fc                          mov     -4H[edx],edi
 2c21  83 fe 02                          cmp     esi,00000002H
 2c24  73 0f                             jae     L442
 2c26  8b 08             L441            mov     ecx,[eax]
 2c28  03 0a                             add     ecx,[edx]
 2c2a  8d 3c 19                          lea     edi,[ecx+ebx]
 2c2d  3b 08                             cmp     ecx,[eax]
 2c2f  73 dc                             jae     L438
 2c31  89 eb                             mov     ebx,ebp
 2c33  eb e2                             jmp     L440
 2c35  8d 44 24 20       L442            lea     eax,+20H[esp]
 2c39  8b 5c 24 58                       mov     ebx,+58H[esp]
 2c3d  8d 54 24 14                       lea     edx,+14H[esp]
 2c41  89 44 24 48                       mov     +48H[esp],eax
 2c45  8d 44 24 10                       lea     eax,+10H[esp]
 2c49  31 f6                             xor     esi,esi
 2c4b  e8 00 00 00 00                    call    near BigInt::BigInt()
 2c50  89 e8                             mov     eax,ebp
 2c52  c1 e6 1f          L443            shl     esi,1fH
 2c55  8b 0b                             mov     ecx,[ebx]
 2c57  83 ea 04                          sub     edx,00000004H
 2c5a  89 cf                             mov     edi,ecx
 2c5c  83 eb 04                          sub     ebx,00000004H
 2c5f  d1 ef                             shr     edi,1
 2c61  48                                dec     eax
 2c62  09 f7                             or      edi,esi
 2c64  89 ce                             mov     esi,ecx
 2c66  89 7a 04                          mov     +4H[edx],edi
 2c69  85 c0                             test    eax,eax
 2c6b  7d e5                             jge     L443
 2c6d  8d 54 24 10                       lea     edx,+10H[esp]
 2c71  8d 44 24 20                       lea     eax,+20H[esp]
 2c75  8d 7c 24 08                       lea     edi,+8H[esp]
 2c79  e8 00 00 00 00                    call    near BigInt::BigInt( BigInt const near & )
 2c7e  31 db                             xor     ebx,ebx
 2c80  8b 74 24 48                       mov     esi,+48H[esp]
 2c84  31 c9                             xor     ecx,ecx
 2c86  8d 44 24 40                       lea     eax,+40H[esp]
 2c8a  a5                                movsd   
 2c8b  a5                                movsd   
 2c8c  89 44 24 4c                       mov     +4cH[esp],eax
 2c90  8d 44 24 18                       lea     eax,+18H[esp]
 2c94  8d 54 24 18                       lea     edx,+18H[esp]
 2c98  e8 00 00 00 00                    call    near BigInt::BigInt()
 2c9d  89 e0                             mov     eax,esp
 2c9f  83 c2 04          L444            add     edx,00000004H
 2ca2  43                                inc     ebx
 2ca3  8b 30                             mov     esi,[eax]
 2ca5  8b 38                             mov     edi,[eax]
 2ca7  83 c0 04                          add     eax,00000004H
 2caa  01 ff                             add     edi,edi
 2cac  c1 ee 1f                          shr     esi,1fH
 2caf  09 cf                             or      edi,ecx
 2cb1  89 f1                             mov     ecx,esi
 2cb3  89 7a fc                          mov     -4H[edx],edi
 2cb6  83 fb 02                          cmp     ebx,00000002H
 2cb9  72 e4                             jb      L444
 2cbb  8d 54 24 18                       lea     edx,+18H[esp]
 2cbf  8d 44 24 40                       lea     eax,+40H[esp]
 2cc3  89 e7                             mov     edi,esp
 2cc5  e8 00 00 00 00                    call    near BigInt::BigInt( BigInt const near & )
 2cca  8b 74 24 4c                       mov     esi,+4cH[esp]
 2cce  a5                                movsd   
 2ccf  a5                                movsd   
 2cd0  e9 02 ff ff ff                    jmp     L434

                b+=c-'0';
        }
 2cd5  31 c0             L445            xor     eax,eax
 2cd7  8a 44 24 60                       mov     al,+60H[esp]
 2cdb  83 e8 30                          sub     eax,00000030H
 2cde  89 c1                             mov     ecx,eax
 2ce0  85 c0                             test    eax,eax
 2ce2  7d 10                             jge     L446
 2ce4  bb 08 00 00 00                    mov     ebx,00000008H
 2ce9  ba ff ff ff ff                    mov     edx,0ffffffffH
 2cee  8d 44 24 38                       lea     eax,+38H[esp]
 2cf2  eb 0b                             jmp     L447
 2cf4  bb 08 00 00 00    L446            mov     ebx,00000008H
 2cf9  8d 44 24 38                       lea     eax,+38H[esp]
 2cfd  31 d2                             xor     edx,edx
 2cff  e8 00 00 00 00    L447            call    memset_
 2d04  85 c9                             test    ecx,ecx
 2d06  74 04                             je      L448
 2d08  89 4c 24 38                       mov     +38H[esp],ecx
 2d0c  8d 74 24 38       L448            lea     esi,+38H[esp]
 2d10  8b 44 24 54                       mov     eax,+54H[esp]
 2d14  31 db                             xor     ebx,ebx
 2d16  31 c9                             xor     ecx,ecx
 2d18  bd 01 00 00 00                    mov     ebp,00000001H
 2d1d  eb 1d                             jmp     L452
 2d1f  39 d7             L449            cmp     edi,edx
 2d21  73 04                             jae     L450
 2d23  89 eb                             mov     ebx,ebp
 2d25  eb 02                             jmp     L451
 2d27  31 db             L450            xor     ebx,ebx
 2d29  83 c0 04          L451            add     eax,00000004H
 2d2c  41                                inc     ecx
 2d2d  83 c6 04                          add     esi,00000004H
 2d30  89 78 fc                          mov     -4H[eax],edi
 2d33  83 f9 02                          cmp     ecx,00000002H
 2d36  0f 83 1d fe ff ff                 jae     L433
 2d3c  8b 16             L452            mov     edx,[esi]
 2d3e  03 10                             add     edx,[eax]
 2d40  8d 3c 1a                          lea     edi,[edx+ebx]
 2d43  3b 16                             cmp     edx,[esi]
 2d45  73 d8                             jae     L449
 2d47  89 eb                             mov     ebx,ebp
 2d49  eb de                             jmp     L451

        is.putback(c);
        return is;
 2d4b  31 d2             L453            xor     edx,edx
 2d4d  8b 44 24 50                       mov     eax,+50H[esp]
 2d51  8a 54 24 60                       mov     dl,+60H[esp]
 2d55  e8 00 00 00 00                    call    istream near & near istream::putback( char )

}


 2d5a  8b 44 24 50                       mov     eax,+50H[esp]
 2d5e  83 c4 64                          add     esp,00000064H
 2d61  5d                                pop     ebp
 2d62  5f                                pop     edi
 2d63  5e                                pop     esi
 2d64  59                                pop     ecx
 2d65  5b                                pop     ebx
 2d66  c3                                ret     
 2d67  90                                nop     

BigInt sqrt(const BigInt &a) {
 2d68                    BigInt near sqrt( BigInt const near & ):
 2d68  53                                push    ebx
 2d69  51                                push    ecx
 2d6a  56                                push    esi
 2d6b  57                                push    edi
 2d6c  55                                push    ebp
 2d6d  81 ec 9c 00 00 00                 sub     esp,0000009cH
 2d73  89 44 24 78                       mov     +78H[esp],eax
 2d77  89 d1                             mov     ecx,edx

        BigInt x=0,y=a;
 2d79  bb 08 00 00 00                    mov     ebx,00000008H
 2d7e  8d 44 24 20                       lea     eax,+20H[esp]
 2d82  31 d2                             xor     edx,edx
 2d84  e8 00 00 00 00                    call    memset_
 2d89  8d 44 24 30                       lea     eax,+30H[esp]
 2d8d  83 c0 07                          add     eax,00000007H
 2d90  8d 7c 24 60                       lea     edi,+60H[esp]
 2d94  89 84 24 8c 00 00 
       00                                mov     +8cH[esp],eax
 2d9b  8d 44 24 28                       lea     eax,+28H[esp]
 2d9f  89 ce                             mov     esi,ecx
 2da1  83 c0 04                          add     eax,00000004H
 2da4  83 c1 07                          add     ecx,00000007H
 2da7  89 84 24 98 00 00 
       00                                mov     +98H[esp],eax
 2dae  8d 44 24 60                       lea     eax,+60H[esp]
 2db2  a5                                movsd   
 2db3  a5                                movsd   
 2db4  83 c0 07                          add     eax,00000007H
 2db7  89 8c 24 90 00 00 
       00                                mov     +90H[esp],ecx
 2dbe  89 84 24 94 00 00 
       00                                mov     +94H[esp],eax

        while(x+BigInt(1)!=y) {
 2dc5  bd 01 00 00 00                    mov     ebp,00000001H
 2dca  bb 08 00 00 00    L454            mov     ebx,00000008H
 2dcf  8d 44 24 58                       lea     eax,+58H[esp]
 2dd3  8d 7c 24 18                       lea     edi,+18H[esp]
 2dd7  31 d2                             xor     edx,edx
 2dd9  8d 74 24 20                       lea     esi,+20H[esp]
 2ddd  e8 00 00 00 00                    call    memset_
 2de2  8d 44 24 08                       lea     eax,+8H[esp]
 2de6  8d 5c 24 58                       lea     ebx,+58H[esp]
 2dea  8d 54 24 18                       lea     edx,+18H[esp]
 2dee  89 6c 24 58                       mov     +58H[esp],ebp
 2df2  a5                                movsd   
 2df3  a5                                movsd   
 2df4  89 44 24 7c                       mov     +7cH[esp],eax
 2df8  31 f6                             xor     esi,esi
 2dfa  31 c0                             xor     eax,eax
 2dfc  eb 19                             jmp     L458
 2dfe  39 cf             L455            cmp     edi,ecx
 2e00  73 04                             jae     L456
 2e02  89 e8                             mov     eax,ebp
 2e04  eb 02                             jmp     L457
 2e06  31 c0             L456            xor     eax,eax
 2e08  83 c2 04          L457            add     edx,00000004H
 2e0b  46                                inc     esi
 2e0c  83 c3 04                          add     ebx,00000004H
 2e0f  89 7a fc                          mov     -4H[edx],edi
 2e12  83 fe 02                          cmp     esi,00000002H
 2e15  73 0f                             jae     L459
 2e17  8b 0b             L458            mov     ecx,[ebx]
 2e19  03 0a                             add     ecx,[edx]
 2e1b  8d 3c 01                          lea     edi,[ecx+eax]
 2e1e  3b 0b                             cmp     ecx,[ebx]
 2e20  73 dc                             jae     L455
 2e22  89 e8                             mov     eax,ebp
 2e24  eb e2                             jmp     L457
 2e26  8d 7c 24 08       L459            lea     edi,+8H[esp]
 2e2a  8d 74 24 18                       lea     esi,+18H[esp]
 2e2e  bb 08 00 00 00                    mov     ebx,00000008H
 2e33  8b 44 24 7c                       mov     eax,+7cH[esp]
 2e37  8b 94 24 94 00 00 
       00                                mov     edx,+94H[esp]
 2e3e  83 c0 07                          add     eax,00000007H
 2e41  a5                                movsd   
 2e42  a5                                movsd   
 2e43  4b                L460            dec     ebx
 2e44  83 fb ff                          cmp     ebx,0ffffffffH
 2e47  74 19                             je      L463
 2e49  8a 08                             mov     cl,[eax]
 2e4b  8a 2a                             mov     ch,[edx]
 2e4d  38 e9                             cmp     cl,ch
 2e4f  73 07                             jae     L461
 2e51  b9 ff ff ff ff                    mov     ecx,0ffffffffH
 2e56  eb 0c                             jmp     L464
 2e58  76 04             L461            jbe     L462
 2e5a  89 e9                             mov     ecx,ebp
 2e5c  eb 06                             jmp     L464
 2e5e  48                L462            dec     eax
 2e5f  4a                                dec     edx
 2e60  eb e1                             jmp     L460
 2e62  31 c9             L463            xor     ecx,ecx
 2e64  85 c9             L464            test    ecx,ecx
 2e66  0f 95 c0                          setne   al
 2e69  25 ff 00 00 00                    and     eax,000000ffH
 2e6e  0f 84 d9 01 00 00                 je      L487

                BigInt h=(x+y);
 2e74  8d 44 24 28                       lea     eax,+28H[esp]
 2e78  8d 7c 24 10                       lea     edi,+10H[esp]
 2e7c  8d 74 24 20                       lea     esi,+20H[esp]
 2e80  8d 54 24 60                       lea     edx,+60H[esp]
 2e84  8d 5c 24 10                       lea     ebx,+10H[esp]
 2e88  89 84 24 80 00 00 
       00                                mov     +80H[esp],eax
 2e8f  a5                                movsd   
 2e90  a5                                movsd   
 2e91  31 c0                             xor     eax,eax
 2e93  31 f6                             xor     esi,esi
 2e95  eb 19                             jmp     L468
 2e97  39 cf             L465            cmp     edi,ecx
 2e99  73 04                             jae     L466
 2e9b  89 e8                             mov     eax,ebp
 2e9d  eb 02                             jmp     L467
 2e9f  31 c0             L466            xor     eax,eax
 2ea1  83 c3 04          L467            add     ebx,00000004H
 2ea4  46                                inc     esi
 2ea5  83 c2 04                          add     edx,00000004H
 2ea8  89 7b fc                          mov     -4H[ebx],edi
 2eab  83 fe 02                          cmp     esi,00000002H
 2eae  73 0f                             jae     L469
 2eb0  8b 0a             L468            mov     ecx,[edx]
 2eb2  03 0b                             add     ecx,[ebx]
 2eb4  8d 3c 01                          lea     edi,[ecx+eax]
 2eb7  3b 0a                             cmp     ecx,[edx]
 2eb9  73 dc                             jae     L465
 2ebb  89 e8                             mov     eax,ebp
 2ebd  eb e2                             jmp     L467
 2ebf  8d 7c 24 28       L469            lea     edi,+28H[esp]
 2ec3  8d 74 24 10                       lea     esi,+10H[esp]

                h>>=1;
 2ec7  8d 44 24 50                       lea     eax,+50H[esp]
 2ecb  8b 9c 24 98 00 00 
       00                                mov     ebx,+98H[esp]
 2ed2  8d 54 24 04                       lea     edx,+4H[esp]
 2ed6  89 84 24 84 00 00 
       00                                mov     +84H[esp],eax
 2edd  a5                                movsd   
 2ede  a5                                movsd   
 2edf  89 e8                             mov     eax,ebp
 2ee1  31 f6                             xor     esi,esi
 2ee3  c1 e6 1f          L470            shl     esi,1fH
 2ee6  8b 0b                             mov     ecx,[ebx]
 2ee8  83 ea 04                          sub     edx,00000004H
 2eeb  89 cf                             mov     edi,ecx
 2eed  83 eb 04                          sub     ebx,00000004H
 2ef0  d1 ef                             shr     edi,1
 2ef2  48                                dec     eax
 2ef3  09 f7                             or      edi,esi
 2ef5  89 ce                             mov     esi,ecx
 2ef7  89 7a 04                          mov     +4H[edx],edi
 2efa  85 c0                             test    eax,eax
 2efc  7d e5                             jge     L470
 2efe  8d 7c 24 50                       lea     edi,+50H[esp]
 2f02  89 e6                             mov     esi,esp
 2f04  a5                                movsd   
 2f05  a5                                movsd   
 2f06  8d 7c 24 28                       lea     edi,+28H[esp]
 2f0a  8b b4 24 84 00 00 
       00                                mov     esi,+84H[esp]
 2f11  a5                                movsd   
 2f12  a5                                movsd   
 2f13  8d 7c 24 70                       lea     edi,+70H[esp]
 2f17  8d 74 24 28                       lea     esi,+28H[esp]
 2f1b  a5                                movsd   
 2f1c  a5                                movsd   
 2f1d  8d 7c 24 38                       lea     edi,+38H[esp]
 2f21  8d 74 24 28                       lea     esi,+28H[esp]

                BigInt sqr=h*h;
 2f25  8d 44 24 30                       lea     eax,+30H[esp]
 2f29  bb 08 00 00 00                    mov     ebx,00000008H
 2f2e  a5                                movsd   
 2f2f  a5                                movsd   
 2f30  31 d2                             xor     edx,edx
 2f32  8d 7c 24 40                       lea     edi,+40H[esp]
 2f36  8d 74 24 28                       lea     esi,+28H[esp]
 2f3a  89 84 24 88 00 00 
       00                                mov     +88H[esp],eax
 2f41  8d 44 24 70                       lea     eax,+70H[esp]
 2f45  a5                                movsd   
 2f46  a5                                movsd   
 2f47  e8 00 00 00 00                    call    memset_
 2f4c  8d 54 24 40       L471            lea     edx,+40H[esp]
 2f50  31 c0                             xor     eax,eax
 2f52  83 3a 00          L472            cmp     dword ptr [edx],00000000H
 2f55  74 04                             je      L473
 2f57  31 c0                             xor     eax,eax
 2f59  eb 0b                             jmp     L474
 2f5b  40                L473            inc     eax
 2f5c  83 c2 04                          add     edx,00000004H
 2f5f  83 f8 02                          cmp     eax,00000002H
 2f62  72 ee                             jb      L472
 2f64  89 e8                             mov     eax,ebp
 2f66  85 c0             L474            test    eax,eax
 2f68  0f 85 77 00 00 00                 jne     L480
 2f6e  8b 44 24 40                       mov     eax,+40H[esp]
 2f72  21 e8                             and     eax,ebp
 2f74  74 36                             je      L479
 2f76  8d 74 24 38                       lea     esi,+38H[esp]
 2f7a  8d 7c 24 70                       lea     edi,+70H[esp]
 2f7e  31 c0                             xor     eax,eax
 2f80  31 db                             xor     ebx,ebx
 2f82  eb 19                             jmp     L478
 2f84  39 d1             L475            cmp     ecx,edx
 2f86  73 04                             jae     L476
 2f88  89 e8                             mov     eax,ebp
 2f8a  eb 02                             jmp     L477
 2f8c  31 c0             L476            xor     eax,eax
 2f8e  83 c7 04          L477            add     edi,00000004H
 2f91  43                                inc     ebx
 2f92  83 c6 04                          add     esi,00000004H
 2f95  89 4f fc                          mov     -4H[edi],ecx
 2f98  83 fb 02                          cmp     ebx,00000002H
 2f9b  73 0f                             jae     L479
 2f9d  8b 16             L478            mov     edx,[esi]
 2f9f  03 17                             add     edx,[edi]
 2fa1  8d 0c 02                          lea     ecx,[edx+eax]
 2fa4  3b 16                             cmp     edx,[esi]
 2fa6  73 dc                             jae     L475
 2fa8  89 e8                             mov     eax,ebp
 2faa  eb e2                             jmp     L477
 2fac  8d 54 24 40       L479            lea     edx,+40H[esp]
 2fb0  8d 44 24 48                       lea     eax,+48H[esp]
 2fb4  89 eb                             mov     ebx,ebp
 2fb6  e8 00 00 00 00                    call    BigInt near operator >>( BigInt const near &, int unsigned )
 2fbb  89 c2                             mov     edx,eax
 2fbd  8d 44 24 40                       lea     eax,+40H[esp]
 2fc1  89 eb                             mov     ebx,ebp
 2fc3  e8 00 00 00 00                    call    BigInt near & near BigInt::operator =( BigInt const near & )
 2fc8  8d 54 24 38                       lea     edx,+38H[esp]
 2fcc  8d 44 24 68                       lea     eax,+68H[esp]
 2fd0  e8 00 00 00 00                    call    BigInt near operator <<( BigInt const near &, int unsigned )
 2fd5  89 c2                             mov     edx,eax
 2fd7  8d 44 24 38                       lea     eax,+38H[esp]
 2fdb  e8 00 00 00 00                    call    BigInt near & near BigInt::operator =( BigInt const near & )
 2fe0  e9 67 ff ff ff                    jmp     L471
 2fe5  8d 7c 24 30       L480            lea     edi,+30H[esp]
 2fe9  8d 74 24 70                       lea     esi,+70H[esp]

                if(sqr<=a)
 2fed  bb 08 00 00 00                    mov     ebx,00000008H
 2ff2  8b 94 24 8c 00 00 
       00                                mov     edx,+8cH[esp]
 2ff9  8b 84 24 90 00 00 
       00                                mov     eax,+90H[esp]
 3000  a5                                movsd   
 3001  a5                                movsd   
 3002  4b                L481            dec     ebx
 3003  83 fb ff                          cmp     ebx,0ffffffffH
 3006  74 19                             je      L484
 3008  8a 0a                             mov     cl,[edx]
 300a  8a 28                             mov     ch,[eax]
 300c  38 e9                             cmp     cl,ch
 300e  73 07                             jae     L482
 3010  b9 ff ff ff ff                    mov     ecx,0ffffffffH
 3015  eb 0c                             jmp     L485
 3017  76 04             L482            jbe     L483
 3019  89 e9                             mov     ecx,ebp
 301b  eb 06                             jmp     L485
 301d  4a                L483            dec     edx
 301e  48                                dec     eax
 301f  eb e1                             jmp     L481
 3021  31 c9             L484            xor     ecx,ecx
 3023  85 c9             L485            test    ecx,ecx
 3025  0f 9e c0                          setle   al
 3028  25 ff 00 00 00                    and     eax,000000ffH
 302d  74 0f                             je      L486

                        x=h;
                else
 302f  8d 7c 24 20                       lea     edi,+20H[esp]
 3033  8d 74 24 28                       lea     esi,+28H[esp]
 3037  a5                                movsd   
 3038  a5                                movsd   
 3039  e9 8c fd ff ff                    jmp     L454

                        y=h;
        }
 303e  8d 7c 24 60       L486            lea     edi,+60H[esp]
 3042  8d 74 24 28                       lea     esi,+28H[esp]
 3046  a5                                movsd   
 3047  a5                                movsd   
 3048  e9 7d fd ff ff                    jmp     L454

        return x;
 304d  8b 7c 24 78       L487            mov     edi,+78H[esp]
 3051  8d 74 24 20                       lea     esi,+20H[esp]
 3055  a5                                movsd   
 3056  a5                                movsd   

}

/*
        BigInt low=0,high=a+1;
        while(low+1<high) {
                BigInt center=(low+high)>>1;
                BigInt centersqr=center*center;
                if(centersqr<a)
                        low=center;
                else if(centersqr>a)
}
*/
 3057  8b 44 24 78                       mov     eax,+78H[esp]
 305b  81 c4 9c 00 00 00                 add     esp,0000009cH
 3061  5d                                pop     ebp
 3062  5f                                pop     edi
 3063  5e                                pop     esi
 3064  59                                pop     ecx
 3065  5b                                pop     ebx
 3066  c3                                ret     
 3067  90                                nop     

No disassembly errors

------------------------------------------------------------

Comdat: near BigInt::BigInt( BigInt const near & )  SEGMENT ANY '_TEXT'  0000000c bytes  
 0000  56                                push    esi
 0001  57                                push    edi
 0002  89 c7                             mov     edi,eax
 0004  89 d6                             mov     esi,edx
 0006  a5                                movsd   
 0007  a5                                movsd   
 0008  5f                                pop     edi
 0009  5e                                pop     esi
 000a  c3                                ret     
 000b  90                                nop     

No disassembly errors

------------------------------------------------------------
